{
    "idl": [
        [
            "GPUObjectBase",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUObjectBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "label",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUObjectDescriptorBase",
            [
                {
                    "type": "dictionary",
                    "name": "GPUObjectDescriptorBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "label",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": {
                                "type": "string",
                                "value": ""
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSupportedLimits",
            [
                {
                    "type": "interface",
                    "name": "GPUSupportedLimits",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension1D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension2D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension3D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureArrayLayers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindGroups",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindGroupsPlusVertexBuffers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindingsPerBindGroup",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxDynamicUniformBuffersPerPipelineLayout",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxDynamicStorageBuffersPerPipelineLayout",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxSampledTexturesPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxSamplersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageBuffersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageTexturesPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxUniformBuffersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxUniformBufferBindingSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageBufferBindingSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "minUniformBufferOffsetAlignment",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "minStorageBufferOffsetAlignment",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexBuffers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBufferSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexAttributes",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexBufferArrayStride",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxInterStageShaderComponents",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxInterStageShaderVariables",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxColorAttachments",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxColorAttachmentBytesPerSample",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupStorageSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeInvocationsPerWorkgroup",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeX",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeY",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeZ",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupsPerDimension",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSupportedFeatures",
            [
                {
                    "type": "interface",
                    "name": "GPUSupportedFeatures",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "setlike",
                            "idlType": [
                                {
                                    "type": null,
                                    "extAttrs": [],
                                    "generic": "",
                                    "nullable": false,
                                    "union": false,
                                    "idlType": "DOMString"
                                }
                            ],
                            "arguments": [],
                            "extAttrs": [],
                            "readonly": true,
                            "async": false
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "WGSLLanguageFeatures",
            [
                {
                    "type": "interface",
                    "name": "WGSLLanguageFeatures",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "setlike",
                            "idlType": [
                                {
                                    "type": null,
                                    "extAttrs": [],
                                    "generic": "",
                                    "nullable": false,
                                    "union": false,
                                    "idlType": "DOMString"
                                }
                            ],
                            "arguments": [],
                            "extAttrs": [],
                            "readonly": true,
                            "async": false
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUAdapterInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUAdapterInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "vendor",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "architecture",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "device",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "description",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "NavigatorGPU",
            [
                {
                    "type": "interface mixin",
                    "name": "NavigatorGPU",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "gpu",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPU"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                },
                                {
                                    "type": "extended-attribute",
                                    "name": "SecureContext",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "Navigator",
            [
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "Navigator",
                    "includes": "NavigatorGPU"
                }
            ]
        ],
        [
            "WorkerNavigator",
            [
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "WorkerNavigator",
                    "includes": "NavigatorGPU"
                }
            ]
        ],
        [
            "GPU",
            [
                {
                    "type": "interface",
                    "name": "GPU",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "requestAdapter",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUAdapter"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "options",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURequestAdapterOptions"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getPreferredCanvasFormat",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "wgslLanguageFeatures",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "WGSLLanguageFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPURequestAdapterOptions",
            [
                {
                    "type": "dictionary",
                    "name": "GPURequestAdapterOptions",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "powerPreference",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPowerPreference"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "forceFallbackAdapter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPowerPreference",
            [
                {
                    "type": "enum",
                    "name": "GPUPowerPreference",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "low-power"
                        },
                        {
                            "type": "enum-value",
                            "value": "high-performance"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUAdapter",
            [
                {
                    "type": "interface",
                    "name": "GPUAdapter",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "features",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "limits",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedLimits"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "isFallbackAdapter",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "requestDevice",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDevice"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDeviceDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "requestAdapterInfo",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAdapterInfo"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDeviceDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUDeviceDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "requiredFeatures",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUFeatureName"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "requiredLimits",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "record",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    }
                                ]
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "defaultQueue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueueDescriptor"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUFeatureName",
            [
                {
                    "type": "enum",
                    "name": "GPUFeatureName",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "depth-clip-control"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-bc"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-etc2"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-astc"
                        },
                        {
                            "type": "enum-value",
                            "value": "timestamp-query"
                        },
                        {
                            "type": "enum-value",
                            "value": "indirect-first-instance"
                        },
                        {
                            "type": "enum-value",
                            "value": "shader-f16"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg11b10ufloat-renderable"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm-storage"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32-filterable"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDevice",
            [
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": "EventTarget",
                    "members": [
                        {
                            "type": "attribute",
                            "name": "features",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "limits",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedLimits"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "queue",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueue"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBufferDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTexture"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createSampler",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampler"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSamplerDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "importExternalTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTexture"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExternalTextureDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBindGroupLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayoutDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createPipelineLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayoutDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroup"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createShaderModule",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderModule"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUShaderModuleDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createComputePipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePipeline"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPipeline"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createComputePipelineAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipeline"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderPipelineAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipeline"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createCommandEncoder",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCommandEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCommandEncoderDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderBundleEncoder",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderBundleEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderBundleEncoderDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createQuerySet",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUQuerySetDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUDevice",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "lost",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDeviceLostInfo"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "pushErrorScope",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "filter",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUErrorFilter"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "popErrorScope",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUError"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "onuncapturederror",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "EventHandler"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "Exposed",
                                    "rhs": {
                                        "type": "identifier-list",
                                        "value": [
                                            {
                                                "value": "Window"
                                            },
                                            {
                                                "value": "Worker"
                                            }
                                        ]
                                    },
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                }
            ]
        ],
        [
            "GPUBuffer",
            [
                {
                    "type": "interface",
                    "name": "GPUBuffer",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "size",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "usage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "mapState",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferMapState"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "mapAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "undefined"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "mode",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUMapModeFlags"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getMappedRange",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "ArrayBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "unmap",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBuffer",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBufferMapState",
            [
                {
                    "type": "enum",
                    "name": "GPUBufferMapState",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "unmapped"
                        },
                        {
                            "type": "enum-value",
                            "value": "pending"
                        },
                        {
                            "type": "enum-value",
                            "value": "mapped"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferUsageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "mappedAtCreation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferUsageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUBufferUsageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferUsage",
            [
                {
                    "type": "namespace",
                    "name": "GPUBufferUsage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "MAP_READ",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0001"
                            }
                        },
                        {
                            "type": "const",
                            "name": "MAP_WRITE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0002"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_SRC",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0004"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_DST",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0008"
                            }
                        },
                        {
                            "type": "const",
                            "name": "INDEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0010"
                            }
                        },
                        {
                            "type": "const",
                            "name": "VERTEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0020"
                            }
                        },
                        {
                            "type": "const",
                            "name": "UNIFORM",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0040"
                            }
                        },
                        {
                            "type": "const",
                            "name": "STORAGE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0080"
                            }
                        },
                        {
                            "type": "const",
                            "name": "INDIRECT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0100"
                            }
                        },
                        {
                            "type": "const",
                            "name": "QUERY_RESOLVE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0200"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUMapModeFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUMapModeFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMapMode",
            [
                {
                    "type": "namespace",
                    "name": "GPUMapMode",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "READ",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0001"
                            }
                        },
                        {
                            "type": "const",
                            "name": "WRITE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0002"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTexture",
            [
                {
                    "type": "interface",
                    "name": "GPUTexture",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "createView",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureViewDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "width",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "height",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "depthOrArrayLayers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "mipLevelCount",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "sampleCount",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "dimension",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureDimension"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "format",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "usage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUTexture",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUTextureDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExtent3D"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "mipLevelCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampleCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureUsageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "viewFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureDimension",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureDimension",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "1d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d"
                        },
                        {
                            "type": "enum-value",
                            "value": "3d"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureUsageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUTextureUsageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureUsage",
            [
                {
                    "type": "namespace",
                    "name": "GPUTextureUsage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "COPY_SRC",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x01"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_DST",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x02"
                            }
                        },
                        {
                            "type": "const",
                            "name": "TEXTURE_BINDING",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x04"
                            }
                        },
                        {
                            "type": "const",
                            "name": "STORAGE_BINDING",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x08"
                            }
                        },
                        {
                            "type": "const",
                            "name": "RENDER_ATTACHMENT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x10"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureView",
            [
                {
                    "type": "interface",
                    "name": "GPUTextureView",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUTextureView",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUTextureViewDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureViewDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "aspect",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureAspect"
                            },
                            "default": {
                                "type": "string",
                                "value": "all"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "baseMipLevel",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mipLevelCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "baseArrayLayer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "arrayLayerCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureViewDimension",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureViewDimension",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "1d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d-array"
                        },
                        {
                            "type": "enum-value",
                            "value": "cube"
                        },
                        {
                            "type": "enum-value",
                            "value": "cube-array"
                        },
                        {
                            "type": "enum-value",
                            "value": "3d"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureAspect",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureAspect",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "all"
                        },
                        {
                            "type": "enum-value",
                            "value": "stencil-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth-only"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "r8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb9e5ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb10a2uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb10a2unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg11b10ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth16unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth24plus"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth24plus-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc1-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc1-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc2-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc2-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc3-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc3-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc4-r-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc4-r-snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc5-rg-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc5-rg-snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc6h-rgb-ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc6h-rgb-float"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc7-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc7-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8a1unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8a1unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgba8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgba8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-r11unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-r11snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-rg11unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-rg11snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-4x4-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-4x4-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x4-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x4-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x8-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x8-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x8-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x8-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x10-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x10-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x10-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x10-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x12-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x12-unorm-srgb"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUExternalTexture",
            [
                {
                    "type": "interface",
                    "name": "GPUExternalTexture",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUExternalTexture",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUExternalTextureDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExternalTextureDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "source",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "HTMLVideoElement"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "VideoFrame"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "colorSpace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "PredefinedColorSpace"
                            },
                            "default": {
                                "type": "string",
                                "value": "srgb"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSampler",
            [
                {
                    "type": "interface",
                    "name": "GPUSampler",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUSampler",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUSamplerDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUSamplerDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "addressModeU",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "addressModeV",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "addressModeW",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "magFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "minFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mipmapFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUMipmapFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "lodMinClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "lodMaxClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "32"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "compare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "maxAnisotropy",
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "Clamp",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned short"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUAddressMode",
            [
                {
                    "type": "enum",
                    "name": "GPUAddressMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "clamp-to-edge"
                        },
                        {
                            "type": "enum-value",
                            "value": "repeat"
                        },
                        {
                            "type": "enum-value",
                            "value": "mirror-repeat"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFilterMode",
            [
                {
                    "type": "enum",
                    "name": "GPUFilterMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "nearest"
                        },
                        {
                            "type": "enum-value",
                            "value": "linear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMipmapFilterMode",
            [
                {
                    "type": "enum",
                    "name": "GPUMipmapFilterMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "nearest"
                        },
                        {
                            "type": "enum-value",
                            "value": "linear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCompareFunction",
            [
                {
                    "type": "enum",
                    "name": "GPUCompareFunction",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "never"
                        },
                        {
                            "type": "enum-value",
                            "value": "less"
                        },
                        {
                            "type": "enum-value",
                            "value": "equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "less-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "greater"
                        },
                        {
                            "type": "enum-value",
                            "value": "not-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "greater-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "always"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBindGroupLayout",
            [
                {
                    "type": "interface",
                    "name": "GPUBindGroupLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBindGroupLayout",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBindGroupLayoutDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupLayoutDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "entries",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayoutEntry"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindGroupLayoutEntry",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupLayoutEntry",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "binding",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "visibility",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderStageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "buffer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampler",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSamplerBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "texture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "storageTexture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStorageTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "externalTexture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderStageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUShaderStageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUShaderStage",
            [
                {
                    "type": "namespace",
                    "name": "GPUShaderStage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "VERTEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x1"
                            }
                        },
                        {
                            "type": "const",
                            "name": "FRAGMENT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x2"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COMPUTE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x4"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferBindingType",
            [
                {
                    "type": "enum",
                    "name": "GPUBufferBindingType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uniform"
                        },
                        {
                            "type": "enum-value",
                            "value": "storage"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-only-storage"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBindingType"
                            },
                            "default": {
                                "type": "string",
                                "value": "uniform"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "hasDynamicOffset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "minBindingSize",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSamplerBindingType",
            [
                {
                    "type": "enum",
                    "name": "GPUSamplerBindingType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "filtering"
                        },
                        {
                            "type": "enum-value",
                            "value": "non-filtering"
                        },
                        {
                            "type": "enum-value",
                            "value": "comparison"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSamplerBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUSamplerBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSamplerBindingType"
                            },
                            "default": {
                                "type": "string",
                                "value": "filtering"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureSampleType",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureSampleType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "float"
                        },
                        {
                            "type": "enum-value",
                            "value": "unfilterable-float"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "sampleType",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureSampleType"
                            },
                            "default": {
                                "type": "string",
                                "value": "float"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "viewDimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "multisampled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStorageTextureAccess",
            [
                {
                    "type": "enum",
                    "name": "GPUStorageTextureAccess",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "write-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-write"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStorageTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUStorageTextureBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "access",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStorageTextureAccess"
                            },
                            "default": {
                                "type": "string",
                                "value": "write-only"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "viewDimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUExternalTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExternalTextureBindingLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindGroup",
            [
                {
                    "type": "interface",
                    "name": "GPUBindGroup",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBindGroup",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBindGroupDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "entries",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupEntry"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindingResource",
            [
                {
                    "type": "typedef",
                    "name": "GPUBindingResource",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampler"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBinding"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTexture"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBindGroupEntry",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupEntry",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "binding",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "resource",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindingResource"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferBinding",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferBinding",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "buffer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBuffer"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "offset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineLayout",
            [
                {
                    "type": "interface",
                    "name": "GPUPipelineLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUPipelineLayout",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUPipelineLayoutDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineLayoutDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "bindGroupLayouts",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayout"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderModule",
            [
                {
                    "type": "interface",
                    "name": "GPUShaderModule",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "getCompilationInfo",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCompilationInfo"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUShaderModule",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUShaderModuleDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUShaderModuleDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "code",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "sourceMap",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "object"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "compilationHints",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUShaderModuleCompilationHint"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderModuleCompilationHint",
            [
                {
                    "type": "dictionary",
                    "name": "GPUShaderModuleCompilationHint",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "entryPoint",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayout"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAutoLayoutMode"
                                    }
                                ]
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCompilationMessageType",
            [
                {
                    "type": "enum",
                    "name": "GPUCompilationMessageType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "error"
                        },
                        {
                            "type": "enum-value",
                            "value": "warning"
                        },
                        {
                            "type": "enum-value",
                            "value": "info"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCompilationMessage",
            [
                {
                    "type": "interface",
                    "name": "GPUCompilationMessage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "type",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompilationMessageType"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "lineNum",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "linePos",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "offset",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "length",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCompilationInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUCompilationInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "messages",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "FrozenArray",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCompilationMessage"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineError",
            [
                {
                    "type": "interface",
                    "name": "GPUPipelineError",
                    "inheritance": "DOMException",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": {
                                        "type": "string",
                                        "value": ""
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "options",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineErrorInit"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        },
                        {
                            "type": "attribute",
                            "name": "reason",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineErrorReason"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineErrorInit",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineErrorInit",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "reason",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineErrorReason"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineErrorReason",
            [
                {
                    "type": "enum",
                    "name": "GPUPipelineErrorReason",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "validation"
                        },
                        {
                            "type": "enum-value",
                            "value": "internal"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUAutoLayoutMode",
            [
                {
                    "type": "enum",
                    "name": "GPUAutoLayoutMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "auto"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUPipelineDescriptorBase",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineDescriptorBase",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayout"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAutoLayoutMode"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineBase",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUPipelineBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "getBindGroupLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "unsigned long"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "NewObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUProgrammableStage",
            [
                {
                    "type": "dictionary",
                    "name": "GPUProgrammableStage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "module",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderModule"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "entryPoint",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "constants",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "record",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineConstantValue"
                                    }
                                ]
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineConstantValue",
            [
                {
                    "type": "typedef",
                    "name": "GPUPipelineConstantValue",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "double"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUComputePipeline",
            [
                {
                    "type": "interface",
                    "name": "GPUComputePipeline",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePipeline",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePipeline",
                    "includes": "GPUPipelineBase"
                }
            ]
        ],
        [
            "GPUComputePipelineDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePipelineDescriptor",
                    "inheritance": "GPUPipelineDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "compute",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUProgrammableStage"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPipeline",
            [
                {
                    "type": "interface",
                    "name": "GPURenderPipeline",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPipeline",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPipeline",
                    "includes": "GPUPipelineBase"
                }
            ]
        ],
        [
            "GPURenderPipelineDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPipelineDescriptor",
                    "inheritance": "GPUPipelineDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "vertex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexState"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "primitive",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPrimitiveState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthStencil",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDepthStencilState"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "multisample",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUMultisampleState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "fragment",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFragmentState"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPrimitiveState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPrimitiveState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "topology",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPrimitiveTopology"
                            },
                            "default": {
                                "type": "string",
                                "value": "triangle-list"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stripIndexFormat",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndexFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "frontFace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFrontFace"
                            },
                            "default": {
                                "type": "string",
                                "value": "ccw"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "cullMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCullMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "none"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "unclippedDepth",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPrimitiveTopology",
            [
                {
                    "type": "enum",
                    "name": "GPUPrimitiveTopology",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "point-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "line-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "line-strip"
                        },
                        {
                            "type": "enum-value",
                            "value": "triangle-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "triangle-strip"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFrontFace",
            [
                {
                    "type": "enum",
                    "name": "GPUFrontFace",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "ccw"
                        },
                        {
                            "type": "enum-value",
                            "value": "cw"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCullMode",
            [
                {
                    "type": "enum",
                    "name": "GPUCullMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "none"
                        },
                        {
                            "type": "enum-value",
                            "value": "front"
                        },
                        {
                            "type": "enum-value",
                            "value": "back"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMultisampleState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUMultisampleState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "count",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampleMask"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "alphaToCoverageEnabled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUFragmentState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUFragmentState",
                    "inheritance": "GPUProgrammableStage",
                    "members": [
                        {
                            "type": "field",
                            "name": "targets",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUColorTargetState"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColorTargetState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUColorTargetState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "blend",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendState"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "writeMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColorWriteFlags"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xF"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBlendState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "color",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendComponent"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "alpha",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendComponent"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColorWriteFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUColorWriteFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUColorWrite",
            [
                {
                    "type": "namespace",
                    "name": "GPUColorWrite",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "RED",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x1"
                            }
                        },
                        {
                            "type": "const",
                            "name": "GREEN",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x2"
                            }
                        },
                        {
                            "type": "const",
                            "name": "BLUE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x4"
                            }
                        },
                        {
                            "type": "const",
                            "name": "ALPHA",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x8"
                            }
                        },
                        {
                            "type": "const",
                            "name": "ALL",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0xF"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendComponent",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBlendComponent",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "operation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "add"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "srcFactor",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendFactor"
                            },
                            "default": {
                                "type": "string",
                                "value": "one"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dstFactor",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendFactor"
                            },
                            "default": {
                                "type": "string",
                                "value": "zero"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendFactor",
            [
                {
                    "type": "enum",
                    "name": "GPUBlendFactor",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "zero"
                        },
                        {
                            "type": "enum-value",
                            "value": "one"
                        },
                        {
                            "type": "enum-value",
                            "value": "src"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-src"
                        },
                        {
                            "type": "enum-value",
                            "value": "src-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-src-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "dst"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-dst"
                        },
                        {
                            "type": "enum-value",
                            "value": "dst-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-dst-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "src-alpha-saturated"
                        },
                        {
                            "type": "enum-value",
                            "value": "constant"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-constant"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBlendOperation",
            [
                {
                    "type": "enum",
                    "name": "GPUBlendOperation",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "add"
                        },
                        {
                            "type": "enum-value",
                            "value": "subtract"
                        },
                        {
                            "type": "enum-value",
                            "value": "reverse-subtract"
                        },
                        {
                            "type": "enum-value",
                            "value": "min"
                        },
                        {
                            "type": "enum-value",
                            "value": "max"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDepthStencilState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUDepthStencilState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthWriteEnabled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthCompare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilFront",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilFaceState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilBack",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilFaceState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilWriteMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBias",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDepthBias"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBiasSlopeScale",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBiasClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStencilFaceState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUStencilFaceState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "compare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": {
                                "type": "string",
                                "value": "always"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "failOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthFailOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "passOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStencilOperation",
            [
                {
                    "type": "enum",
                    "name": "GPUStencilOperation",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "keep"
                        },
                        {
                            "type": "enum-value",
                            "value": "zero"
                        },
                        {
                            "type": "enum-value",
                            "value": "replace"
                        },
                        {
                            "type": "enum-value",
                            "value": "invert"
                        },
                        {
                            "type": "enum-value",
                            "value": "increment-clamp"
                        },
                        {
                            "type": "enum-value",
                            "value": "decrement-clamp"
                        },
                        {
                            "type": "enum-value",
                            "value": "increment-wrap"
                        },
                        {
                            "type": "enum-value",
                            "value": "decrement-wrap"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIndexFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUIndexFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uint16"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUVertexFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uint8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "float16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "float16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm10-10-10-2"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexStepMode",
            [
                {
                    "type": "enum",
                    "name": "GPUVertexStepMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "vertex"
                        },
                        {
                            "type": "enum-value",
                            "value": "instance"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexState",
                    "inheritance": "GPUProgrammableStage",
                    "members": [
                        {
                            "type": "field",
                            "name": "buffers",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUVertexBufferLayout"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUVertexBufferLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexBufferLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "arrayStride",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "stepMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexStepMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "vertex"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "attributes",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUVertexAttribute"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUVertexAttribute",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexAttribute",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "offset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "shaderLocation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandBuffer",
            [
                {
                    "type": "interface",
                    "name": "GPUCommandBuffer",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandBuffer",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUCommandBufferDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCommandBufferDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUCommandsMixin",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPUCommandEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "beginRenderPass",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPassDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "beginComputePass",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePassEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePassDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyBufferToBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "sourceOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destinationOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyBufferToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyTextureToBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyTextureToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "clearBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "resolveQuerySet",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "querySet",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUQuerySet"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstQuery",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "queryCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destinationOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "finish",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCommandBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCommandBufferDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUDebugCommandsMixin"
                }
            ]
        ],
        [
            "GPUCommandEncoderDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCommandEncoderDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindingCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUBindingCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bindGroup",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBindGroup"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsets",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPUBufferDynamicOffset"
                                            }
                                        ]
                                    },
                                    "default": {
                                        "type": "sequence",
                                        "value": []
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bindGroup",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBindGroup"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsData",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "Uint32Array"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsDataStart",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsDataLength",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDebugCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUDebugCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "pushDebugGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "groupLabel",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "popDebugGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "insertDebugMarker",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "markerLabel",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUComputePassEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPUComputePassEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "pipeline",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipeline"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "dispatchWorkgroups",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "workgroupCountX",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "workgroupCountY",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "workgroupCountZ",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "dispatchWorkgroupsIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "end",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUBindingCommandsMixin"
                }
            ]
        ],
        [
            "GPUComputePassTimestampWrites",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePassTimestampWrites",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "querySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "beginningOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "endOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUComputePassDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePassDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "timestampWrites",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePassTimestampWrites"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPURenderPassEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setViewport",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "x",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "y",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "width",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "height",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "minDepth",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "maxDepth",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setScissorRect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "x",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "y",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "width",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "height",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setBlendConstant",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "color",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUColor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setStencilReference",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "reference",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUStencilValue"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "beginOcclusionQuery",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "queryIndex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "endOcclusionQuery",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "executeBundles",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "bundles",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPURenderBundle"
                                            }
                                        ]
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "end",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUBindingCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPURenderCommandsMixin"
                }
            ]
        ],
        [
            "GPURenderPassTimestampWrites",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassTimestampWrites",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "querySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "beginningOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "endOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "colorAttachments",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPURenderPassColorAttachment"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthStencilAttachment",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassDepthStencilAttachment"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "occlusionQuerySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "timestampWrites",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassTimestampWrites"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "maxDrawCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "50000000"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassColorAttachment",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassColorAttachment",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "view",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthSlice",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "resolveTarget",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "clearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColor"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "loadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "storeOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassDepthStencilAttachment",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassDepthStencilAttachment",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "view",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthClearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthLoadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthStoreOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilClearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilLoadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilStoreOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPULoadOp",
            [
                {
                    "type": "enum",
                    "name": "GPULoadOp",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "load"
                        },
                        {
                            "type": "enum-value",
                            "value": "clear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStoreOp",
            [
                {
                    "type": "enum",
                    "name": "GPUStoreOp",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "store"
                        },
                        {
                            "type": "enum-value",
                            "value": "discard"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPURenderPassLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassLayout",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "colorFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthStencilFormat",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampleCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPURenderCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "pipeline",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipeline"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setIndexBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indexFormat",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndexFormat"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setVertexBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "slot",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "draw",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "vertexCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "instanceCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstVertex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstInstance",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndexed",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indexCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "instanceCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstIndex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "baseVertex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSignedOffset32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstInstance",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndexedIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderBundle",
            [
                {
                    "type": "interface",
                    "name": "GPURenderBundle",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundle",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPURenderBundleDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderBundleDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderBundleEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPURenderBundleEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "finish",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderBundle"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderBundleDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUBindingCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPURenderCommandsMixin"
                }
            ]
        ],
        [
            "GPURenderBundleEncoderDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderBundleEncoderDescriptor",
                    "inheritance": "GPURenderPassLayout",
                    "members": [
                        {
                            "type": "field",
                            "name": "depthReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueueDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUQueueDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueue",
            [
                {
                    "type": "interface",
                    "name": "GPUQueue",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "submit",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "commandBuffers",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPUCommandBuffer"
                                            }
                                        ]
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "onSubmittedWorkDone",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "undefined"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "writeBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bufferOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "data",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "AllowSharedBufferSource"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dataOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "writeTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "data",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "AllowSharedBufferSource"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dataLayout",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageDataLayout"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyExternalImageToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyExternalImage"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTextureTagged"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUQueue",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUQuerySet",
            [
                {
                    "type": "interface",
                    "name": "GPUQuerySet",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "type",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueryType"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "count",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUQuerySet",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUQuerySetDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUQuerySetDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueryType"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "count",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueryType",
            [
                {
                    "type": "enum",
                    "name": "GPUQueryType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "occlusion"
                        },
                        {
                            "type": "enum-value",
                            "value": "timestamp"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCanvasContext",
            [
                {
                    "type": "interface",
                    "name": "GPUCanvasContext",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "canvas",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "HTMLCanvasElement"
                                    },
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "OffscreenCanvas"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "configure",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "configuration",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCanvasConfiguration"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "unconfigure",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getCurrentTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTexture"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCanvasAlphaMode",
            [
                {
                    "type": "enum",
                    "name": "GPUCanvasAlphaMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "opaque"
                        },
                        {
                            "type": "enum-value",
                            "value": "premultiplied"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCanvasConfiguration",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCanvasConfiguration",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "device",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDevice"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureUsageFlags"
                            },
                            "default": {
                                "type": "number",
                                "value": "0x10"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "viewFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "colorSpace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "PredefinedColorSpace"
                            },
                            "default": {
                                "type": "string",
                                "value": "srgb"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "alphaMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCanvasAlphaMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "opaque"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDeviceLostReason",
            [
                {
                    "type": "enum",
                    "name": "GPUDeviceLostReason",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "unknown"
                        },
                        {
                            "type": "enum-value",
                            "value": "destroyed"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDeviceLostInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUDeviceLostInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "reason",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDeviceLostReason"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUError",
            [
                {
                    "type": "interface",
                    "name": "GPUError",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUValidationError",
            [
                {
                    "type": "interface",
                    "name": "GPUValidationError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOutOfMemoryError",
            [
                {
                    "type": "interface",
                    "name": "GPUOutOfMemoryError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUInternalError",
            [
                {
                    "type": "interface",
                    "name": "GPUInternalError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUErrorFilter",
            [
                {
                    "type": "enum",
                    "name": "GPUErrorFilter",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "validation"
                        },
                        {
                            "type": "enum-value",
                            "value": "out-of-memory"
                        },
                        {
                            "type": "enum-value",
                            "value": "internal"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUUncapturedErrorEvent",
            [
                {
                    "type": "interface",
                    "name": "GPUUncapturedErrorEvent",
                    "inheritance": "Event",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "type",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "gpuUncapturedErrorEventInitDict",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUUncapturedErrorEventInit"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        },
                        {
                            "type": "attribute",
                            "name": "error",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUError"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUUncapturedErrorEventInit",
            [
                {
                    "type": "dictionary",
                    "name": "GPUUncapturedErrorEventInit",
                    "inheritance": "EventInit",
                    "members": [
                        {
                            "type": "field",
                            "name": "error",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUError"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferDynamicOffset",
            [
                {
                    "type": "typedef",
                    "name": "GPUBufferDynamicOffset",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStencilValue",
            [
                {
                    "type": "typedef",
                    "name": "GPUStencilValue",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSampleMask",
            [
                {
                    "type": "typedef",
                    "name": "GPUSampleMask",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDepthBias",
            [
                {
                    "type": "typedef",
                    "name": "GPUDepthBias",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize64",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize64",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIntegerCoordinate",
            [
                {
                    "type": "typedef",
                    "name": "GPUIntegerCoordinate",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIndex32",
            [
                {
                    "type": "typedef",
                    "name": "GPUIndex32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize32",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSignedOffset32",
            [
                {
                    "type": "typedef",
                    "name": "GPUSignedOffset32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize64Out",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize64Out",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIntegerCoordinateOut",
            [
                {
                    "type": "typedef",
                    "name": "GPUIntegerCoordinateOut",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize32Out",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize32Out",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFlagsConstant",
            [
                {
                    "type": "typedef",
                    "name": "GPUFlagsConstant",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUColorDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUColorDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "r",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "g",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "b",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "a",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColor",
            [
                {
                    "type": "typedef",
                    "name": "GPUColor",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "double"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColorDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUOrigin2DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUOrigin2DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "x",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "y",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOrigin2D",
            [
                {
                    "type": "typedef",
                    "name": "GPUOrigin2D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUOrigin2DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUOrigin3DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUOrigin3DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "x",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "y",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "z",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOrigin3D",
            [
                {
                    "type": "typedef",
                    "name": "GPUOrigin3D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUOrigin3DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUExtent3DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExtent3DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "width",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "height",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthOrArrayLayers",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUExtent3D",
            [
                {
                    "type": "typedef",
                    "name": "GPUExtent3D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExtent3DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ]
    ],
    "dfn": [
        [
            "GPUObjectDescriptorBase",
            [
                {
                    "target": "GPUObjectDescriptorBase",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>label</dfn>",
                        "    ::",
                        "        The initial value of {{GPUObjectBase/label|GPUObjectBase.label}}."
                    ]
                }
            ]
        ],
        [
            "adapter",
            [
                {
                    "target": "adapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[features]]</dfn>, of type [=ordered set=]&lt;{{GPUFeatureName}}&gt;, readonly",
                        "    ::",
                        "        The [=features=] which can be used to create devices on this adapter.",
                        "",
                        "    : <dfn>\\[[limits]]</dfn>, of type [=supported limits=], readonly",
                        "    ::",
                        "        The [=limit/better|best=] limits which can be used to create devices on this adapter.",
                        "",
                        "        Each adapter limit must be the same or [=limit/better=] than its default value",
                        "        in [=supported limits=].",
                        "",
                        "    : <dfn>\\[[fallback]]</dfn>, of type boolean",
                        "    ::",
                        "        If set to `true` indicates that the adapter is a [=fallback adapter=]."
                    ]
                }
            ]
        ],
        [
            "device",
            [
                {
                    "target": "device",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[adapter]]</dfn>, of type [=adapter=], readonly",
                        "    ::",
                        "        The [=adapter=] from which this device was created.",
                        "",
                        "    : <dfn>\\[[features]]</dfn>, of type [=ordered set=]&lt;{{GPUFeatureName}}&gt;, readonly",
                        "    ::",
                        "        The [=features=] which can be used on this device.",
                        "        No additional features can be used, even if the underlying [=adapter=] can support them.",
                        "",
                        "    : <dfn>\\[[limits]]</dfn>, of type [=supported limits=], readonly",
                        "    ::",
                        "        The limits which can be used on this device.",
                        "        No [=limit/better=] limits can be used, even if the underlying [=adapter=] can support them."
                    ]
                }
            ]
        ],
        [
            "GPUAdapterInfo",
            [
                {
                    "target": "GPUAdapterInfo",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>vendor</dfn>",
                        "    ::",
                        "        The name of the vendor of the [=adapter=], if available. Empty string otherwise.",
                        "",
                        "    : <dfn>architecture</dfn>",
                        "    ::",
                        "        The name of the family or class of GPUs the [=adapter=] belongs to, if available. Empty",
                        "        string otherwise.",
                        "",
                        "    : <dfn>device</dfn>",
                        "    ::",
                        "        A vendor-specific identifier for the [=adapter=], if available. Empty string otherwise.",
                        "",
                        "        Note: This is a value that represents the type of adapter. For example, it may be a",
                        "        [PCI device ID](https://pcisig.com/). It does not uniquely identify a given piece of",
                        "        hardware like a serial number.",
                        "",
                        "    : <dfn>description</dfn>",
                        "    ::",
                        "        A human readable string describing the [=adapter=] as reported by the driver, if available.",
                        "        Empty string otherwise.",
                        "",
                        "        Note: Because no formatting is applied to {{GPUAdapterInfo/description}} attempting to parse",
                        "        this value is not recommended. Applications which change their behavior based on the",
                        "        {{GPUAdapterInfo}}, such as applying workarounds for known driver issues, should rely on the",
                        "        other fields when possible."
                    ]
                }
            ]
        ],
        [
            "NavigatorGPU",
            [
                {
                    "target": "NavigatorGPU",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>gpu</dfn>",
                        "    ::",
                        "        A global singleton providing top-level entry points like {{GPU/requestAdapter()}}."
                    ]
                }
            ]
        ],
        [
            "GPU",
            [
                {
                    "target": "GPU",
                    "type": "method",
                    "lines": [
                        "    : <dfn>requestAdapter(options)</dfn>",
                        "    ::",
                        "        Requests an [=adapter=] from the user agent.",
                        "        The user agent chooses whether to return an adapter, and, if so,",
                        "        chooses according to the provided options.",
                        "",
                        "        <div algorithm=GPU.requestAdapter>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPU}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPU/requestAdapter(options)\">",
                        "                    |options|: Criteria used to select the adapter.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUAdapter}}?&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |adapter| be `null`.",
                        "                1. If the user agent chooses to return an adapter, it should:",
                        "                    1. Set |adapter| to a [=valid=] [=adapter=], chosen according to",
                        "                        the rules in [[#adapter-selection]] and the criteria in |options|,",
                        "                        adhering to [[#adapter-capability-guarantees]].",
                        "",
                        "                        The [=supported limits=] of the adapter must adhere to the requirements",
                        "                        defined in [[#limits]].",
                        "",
                        "                    1. If |adapter| meets the criteria of a [=fallback adapter=] set",
                        "                        |adapter|.{{adapter/[[fallback]]}} to `true`.",
                        "",
                        "                1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |adapter| is not `null`:",
                        "                    1. [=Resolve=] |promise| with a new {{GPUAdapter}} encapsulating |adapter|.",
                        "",
                        "                1. Otherwise, [=Resolve=] |promise| with `null`.",
                        "            </div>",
                        "            <!-- If we add ways to make invalid adapter requests (aside from those",
                        "                that violate IDL rules), specify that they reject the promise. -->",
                        "        </div>",
                        "",
                        "    : <dfn>getPreferredCanvasFormat()</dfn>",
                        "    ::",
                        "        Returns an optimal {{GPUTextureFormat}} for displaying 8-bit depth, standard dynamic range",
                        "        content on this system. Must only return {{GPUTextureFormat/\"rgba8unorm\"}} or",
                        "        {{GPUTextureFormat/\"bgra8unorm\"}}.",
                        "",
                        "        The returned value can be passed as the {{GPUCanvasConfiguration/format}} to",
                        "        {{GPUCanvasContext/configure()}} calls on a {{GPUCanvasContext}} to ensure the associated",
                        "        canvas is able to display its contents efficiently.",
                        "",
                        "        Note: Canvases which are not displayed to the screen may or may not benefit from using this",
                        "        format.",
                        "",
                        "        <div algorithm=GPU.getPreferredCanvasFormat>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPU}} this.",
                        "",
                        "                **Returns:** {{GPUTextureFormat}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Return either {{GPUTextureFormat/\"rgba8unorm\"}} or",
                        "                    {{GPUTextureFormat/\"bgra8unorm\"}}, depending on which format is optimal for",
                        "                    displaying WebGPU canvases on this system.",
                        "        </div>",
                        "",
                        "    : <dfn dfn-type=attribute>wgslLanguageFeatures</dfn>",
                        "    ::",
                        "        The names of supported WGSL [=language extensions=].",
                        "        Supported language extensions are automatically enabled."
                    ]
                }
            ]
        ],
        [
            "GPUPowerPreference",
            [
                {
                    "target": "GPUPowerPreference",
                    "type": "enum-value",
                    "lines": [
                        "            : `undefined` (or not present)",
                        "            ::",
                        "                Provides no hint to the user agent.",
                        "",
                        "            : <dfn>\"low-power\"</dfn>",
                        "            ::",
                        "                Indicates a request to prioritize power savings over performance.",
                        "",
                        "                Note:",
                        "                Generally, content should use this if it is unlikely to be constrained by drawing",
                        "                performance; for example, if it renders only one frame per second, draws only relatively",
                        "                simple geometry with simple shaders, or uses a small HTML canvas element.",
                        "                Developers are encouraged to use this value if their content allows, since it may",
                        "                significantly improve battery life on portable devices.",
                        "",
                        "            : <dfn>\"high-performance\"</dfn>",
                        "            ::",
                        "                Indicates a request to prioritize performance over power consumption.",
                        "",
                        "                Note:",
                        "                By choosing this value, developers should be aware that, for [=devices=] created on the",
                        "                resulting adapter, user agents are more likely to force device loss, in order to save",
                        "                power by switching to a lower-power adapter.",
                        "                Developers are encouraged to only specify this value if they believe it is absolutely",
                        "                necessary, since it may significantly decrease battery life on portable devices."
                    ]
                }
            ]
        ],
        [
            "GPUAdapter",
            [
                {
                    "target": "GPUAdapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>features</dfn>",
                        "    ::",
                        "        The set of values in `this`.{{GPUAdapter/[[adapter]]}}.{{adapter/[[features]]}}.",
                        "",
                        "    : <dfn>limits</dfn>",
                        "    ::",
                        "        The limits in `this`.{{GPUAdapter/[[adapter]]}}.{{adapter/[[limits]]}}.",
                        "",
                        "    : <dfn>isFallbackAdapter</dfn>",
                        "    ::",
                        "        Returns the value of {{GPUAdapter/[[adapter]]}}.{{adapter/[[fallback]]}}."
                    ]
                },
                {
                    "target": "GPUAdapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[adapter]]</dfn>, of type [=adapter=], readonly",
                        "    ::",
                        "        The [=adapter=] to which this {{GPUAdapter}} refers."
                    ]
                },
                {
                    "target": "GPUAdapter",
                    "type": "method",
                    "lines": [
                        "    : <dfn>requestDevice(descriptor)</dfn>",
                        "    ::",
                        "        Requests a [=device=] from the [=adapter=].",
                        "",
                        "        This is a one-time action: if a device is returned successfully,",
                        "        the adapter becomes [=invalid=].",
                        "",
                        "        <div algorithm=GPUAdapter.requestDevice>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUAdapter}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUAdapter/requestDevice(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUDevice}} to request.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUDevice}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Let |adapter| be |this|.{{GPUAdapter/[[adapter]]}}.",
                        "                1. Issue the |initialization steps| to the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following requirements are unmet:",
                        "",
                        "                    <div class=validusage>",
                        "                        - The set of values in |descriptor|.{{GPUDeviceDescriptor/requiredFeatures}}",
                        "                            must be a subset of those in |adapter|.{{adapter/[[features]]}}.",
                        "                    </div>",
                        "",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>",
                        "                    and return:",
                        "",
                        "                        <div data-timeline=content>",
                        "                            [=Content timeline=] steps:",
                        "",
                        "                            1. [=Reject=] |promise| with a {{TypeError}}.",
                        "                        </div>",
                        "",
                        "                    Note: This is the same error that is produced if a feature name isn't known",
                        "                    by the browser at all (in its {{GPUFeatureName}} definition).",
                        "                    This converges the behavior when the browser doesn't support a feature",
                        "                    with the behavior when a particular adapter doesn't support a feature.",
                        "",
                        "                1. If any of the following requirements are unmet:",
                        "",
                        "                    <div class=validusage>",
                        "                        - Each key in |descriptor|.{{GPUDeviceDescriptor/requiredLimits}}",
                        "                            must be the name of a member of [=supported limits=].",
                        "",
                        "                        - For each limit name |key| in the keys of [=supported limits=]:",
                        "                            Let |value| be |descriptor|.{{GPUDeviceDescriptor/requiredLimits}}[|key|].",
                        "                            - |value| must be no [=limit/better=] than the value of that limit in",
                        "                                |adapter|.{{adapter/[[limits]]}}.",
                        "                            - If the limit's [=limit class|class=] is [=limit class/alignment=],",
                        "                                |value| must be a power of 2 less than 2<sup>32</sup>.",
                        "                    </div>",
                        "",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>",
                        "                    and return:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        [=Content timeline=] steps:",
                        "",
                        "                        1. [=Reject=] |promise| with an {{OperationError}}.",
                        "                    </div>",
                        "",
                        "                1. If |adapter| is [=invalid=],",
                        "                    or the user agent otherwise cannot fulfill the request:",
                        "",
                        "                    1. Let |device| be a new [=device=].",
                        "                    1. [=Lose the device=](|device|, {{GPUDeviceLostReason/\"unknown\"}}).",
                        "",
                        "                        Note:",
                        "                        This makes |adapter| [=invalid=], if it wasn't already.",
                        "",
                        "                        Note:",
                        "                        User agents should consider issuing developer-visible warnings in",
                        "                        most or all cases when this occurs. Applications should perform",
                        "                        reinitialization logic starting with {{GPU/requestAdapter()}}.",
                        "",
                        "                    Otherwise:",
                        "",
                        "                    1. Let |device| be [=a new device=] with the capabilities described by |descriptor|.",
                        "                    1. Make |adapter|.{{GPUAdapter/[[adapter]]}} [=invalid=].",
                        "",
                        "                1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=Resolve=] |promise| with a new {{GPUDevice}} object |device|.",
                        "",
                        "                    Note:",
                        "                    If the device is already lost because the adapter could not fulfill the request,",
                        "                    |device|.{{GPUDevice/lost}} has already resolved before |promise| resolves.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>requestAdapterInfo()</dfn>",
                        "    ::",
                        "        Requests the {{GPUAdapterInfo}} for this {{GPUAdapter}}.",
                        "",
                        "        Note: Adapter info values are returned with a Promise to give user agents an",
                        "        opportunity to perform potentially long-running checks in the future.",
                        "",
                        "        <div algorithm=GPUAdapter.requestAdapterInfo>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUAdapter}} |this|.",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUAdapterInfo}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Let |adapter| be |this|.{{GPUAdapter/[[adapter]]}}.",
                        "                1. Run the following steps [=in parallel=]:",
                        "                    1. [=Resolve=] |promise| with a [$new adapter info$] for |adapter|.",
                        "",
                        "                1. Return |promise|.",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUDeviceDescriptor",
            [
                {
                    "target": "GPUDeviceDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>requiredFeatures</dfn>",
                        "    ::",
                        "        Specifies the [=features=] that are required by the device request.",
                        "        The request will fail if the adapter cannot provide these features.",
                        "",
                        "        Exactly the specified set of features, and no more or less, will be allowed in validation",
                        "        of API calls on the resulting device.",
                        "",
                        "    : <dfn>requiredLimits</dfn>",
                        "    ::",
                        "        Specifies the [=limits=] that are required by the device request.",
                        "        The request will fail if the adapter cannot provide these limits.",
                        "",
                        "        Each key must be the name of a member of [=supported limits=].",
                        "        Exactly the specified limits, and no [=limit/better=] or worse,",
                        "        will be allowed in validation of API calls on the resulting device.",
                        "",
                        "        <!-- If we ever need limit types other than GPUSize32/GPUSize64, we can change the value",
                        "        type to `double` or `any` in the future and write out the type conversion explicitly (by",
                        "        reference to WebIDL spec). Or change the entire type to `any` and add back a `dictionary",
                        "        GPULimits` and define the conversion of the whole object by reference to WebIDL. -->",
                        "",
                        "    : <dfn>defaultQueue</dfn>",
                        "    ::",
                        "        The descriptor for the default {{GPUQueue}}."
                    ]
                }
            ]
        ],
        [
            "GPUDevice",
            [
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>features</dfn>",
                        "    ::",
                        "        A set containing the {{GPUFeatureName}} values of the features",
                        "        supported by the device (i.e. the ones with which it was created).",
                        "",
                        "    : <dfn>limits</dfn>",
                        "    ::",
                        "        Exposes the limits supported by the device",
                        "        (which are exactly the ones with which it was created).",
                        "",
                        "    : <dfn>queue</dfn>",
                        "    ::",
                        "        The primary {{GPUQueue}} for this device."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>",
                        "    ::",
                        "        Destroys the [=device=], preventing further operations on it.",
                        "        Outstanding asynchronous operations will fail.",
                        "",
                        "        Note: It is valid to destroy a device multiple times.",
                        "",
                        "        <div algorithm=GPUDevice.destroy()>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. {{GPUBuffer/unmap()}} all {{GPUBuffer}}s from this device.",
                        "",
                        "                    <!-- POSTV1(multithreading) tentative text:",
                        "                    ... which are mapped in this [=agent=] (thread).",
                        "",
                        "                    Note: Any buffers which are mapped in a different thread are not unmapped.",
                        "                    They can be unmapped only from the thread on which they are mapped, either by",
                        "                    another call to {{GPUDevice/destroy()|GPUDevice.destroy()}}, or by",
                        "                    {{GPUBuffer/destroy()|GPUBuffer.destroy()}} or {{GPUBuffer/unmap()|GPUBuffer.unmap()}}.",
                        "                    -->",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Once all <span data-timeline=queue>currently-enqueued operations on any queue on this device</span>",
                        "                    are completed, issue the subsequent steps on the <span data-timeline=device>current timeline</span>.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                1. [=Lose the device=](|this|.{{GPUObjectBase/[[device]]}},",
                        "                    {{GPUDeviceLostReason/\"destroyed\"}}).",
                        "            </div>",
                        "        </div>",
                        "",
                        "        Note: Since no further operations can be enqueued on this device, implementations can abort",
                        "        outstanding asynchronous operations immediately and free resource allocations, including",
                        "        mapped memory that was just unmapped."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBuffer(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUBuffer}}.",
                        "",
                        "        <div algorithm=GPUDevice.createBuffer>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createBuffer(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUBuffer}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUBuffer}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let [|b|, |bi|] be [=!=] [$create a new WebGPU object$](|this|, {{GPUBuffer}}, |descriptor|).",
                        "                1. Set |b|.{{GPUBuffer/size}} to |descriptor|.{{GPUBufferDescriptor/size}}.",
                        "                1. Set |b|.{{GPUBuffer/usage}} to |descriptor|.{{GPUBufferDescriptor/usage}}.",
                        "                1. If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:",
                        "                    1. Set |b|.{{GPUBuffer/[[mapping]]}} to",
                        "                        [=?=] [$initialize an active buffer mapping$] with mode {{GPUMapMode/WRITE}}",
                        "                        and range <code>[0, |descriptor|.{{GPUBufferDescriptor/size}}]</code>.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |b|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following requirements are unmet,",
                        "                    [$generate a validation error$], make |bi| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |device| must be [=valid=].",
                        "                        - |descriptor|.{{GPUBufferDescriptor/usage}} must not be 0.",
                        "                        - |descriptor|.{{GPUBufferDescriptor/usage}} must be a subset of |device|'s",
                        "                            [=allowed buffer usages=].",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/usage}} contains {{GPUBufferUsage/MAP_READ}}:",
                        "                            - |descriptor|.{{GPUBufferDescriptor/usage}} must contain no other flags",
                        "                                except {{GPUBufferUsage/COPY_DST}}.",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/usage}} contains {{GPUBufferUsage/MAP_WRITE}}:",
                        "                            - |descriptor|.{{GPUBufferDescriptor/usage}} must contain no other flags",
                        "                                except {{GPUBufferUsage/COPY_SRC}}.",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/size}} must be &le;",
                        "                            |device|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxBufferSize}}.",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:",
                        "                            - |descriptor|.{{GPUBufferDescriptor/size}} must be a multiple of 4.",
                        "                    </div>",
                        "",
                        "                Note: If buffer creation fails, and |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `false`,",
                        "                any calls to {{GPUBuffer/mapAsync()}} will reject, so any resources allocated to enable mapping can",
                        "                and may be discarded or recycled.",
                        "",
                        "                1. If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:",
                        "                    1. Set |bi|.[=buffer internals/state=] to \"[=buffer internals/state/unavailable=]\".",
                        "",
                        "                    Else:",
                        "",
                        "                    1. Set |bi|.[=buffer internals/state=] to \"[=buffer internals/state/available=]\".",
                        "",
                        "                1. Create a device allocation for |bi| where each byte is zero.",
                        "",
                        "                    If the allocation fails without side-effects,",
                        "                    [$generate an out-of-memory error$],",
                        "                    make |bi| [=invalid=], and return.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createTexture(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUTexture}}.",
                        "",
                        "        <div algorithm=GPUDevice.createTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createTexture(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUTexture}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUTexture}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|descriptor|.{{GPUTextureDescriptor/size}}).",
                        "                1. [=?=] [$Validate texture format required features$] of",
                        "                    |descriptor|.{{GPUTextureDescriptor/format}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. [=?=] [$Validate texture format required features$] of each element of",
                        "                    |descriptor|.{{GPUTextureDescriptor/viewFormats}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |t| be a new {{GPUTexture}} object.",
                        "                1. Set |t|.{{GPUTexture/width}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/width=].",
                        "                1. Set |t|.{{GPUTexture/height}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/height=].",
                        "                1. Set |t|.{{GPUTexture/depthOrArrayLayers}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/depthOrArrayLayers=].",
                        "                1. Set |t|.{{GPUTexture/mipLevelCount}} to |descriptor|.{{GPUTextureDescriptor/mipLevelCount}}.",
                        "                1. Set |t|.{{GPUTexture/sampleCount}} to |descriptor|.{{GPUTextureDescriptor/sampleCount}}.",
                        "                1. Set |t|.{{GPUTexture/dimension}} to |descriptor|.{{GPUTextureDescriptor/dimension}}.",
                        "                1. Set |t|.{{GPUTexture/format}} to |descriptor|.{{GPUTextureDescriptor/format}}.",
                        "                1. Set |t|.{{GPUTexture/usage}} to |descriptor|.{{GPUTextureDescriptor/usage}}.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |t|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |t| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - [$validating GPUTextureDescriptor$](|this|, |descriptor|) returns `true`.",
                        "                    </div>",
                        "",
                        "                1. Set |t|.{{GPUTexture/[[size]]}} to |descriptor|.{{GPUTextureDescriptor/size}}.",
                        "                1. Set |t|.{{GPUTexture/[[viewFormats]]}} to |descriptor|.{{GPUTextureDescriptor/viewFormats}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>importExternalTexture(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUExternalTexture}} wrapping the provided image source.",
                        "",
                        "        <div algorithm=GPUDevice.importExternalTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/importExternalTexture(descriptor)\">",
                        "                    |descriptor|: Provides the external image source object (and any creation options).",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUExternalTexture}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |source| be |descriptor|.{{GPUExternalTextureDescriptor/source}}.",
                        "",
                        "                1. If the current image contents of |source| are the same as the most recent",
                        "                    {{GPUDevice/importExternalTexture()}} call with the same |descriptor|",
                        "                    (ignoring {{GPUObjectDescriptorBase/label}}),",
                        "                    and the user agent chooses to reuse it:",
                        "",
                        "                    1. Let |previousResult| be the {{GPUExternalTexture}} returned previously.",
                        "                    1. Set |previousResult|.{{GPUExternalTexture/[[expired]]}} to `false`,",
                        "                        renewing ownership of the underlying resource.",
                        "                    1. Let |result| be |previousResult|.",
                        "",
                        "                    Note:",
                        "                    This allows the application to detect duplicate imports and avoid re-creating",
                        "                    dependent objects (such as {{GPUBindGroup}}s).",
                        "                    Implementations still need to be able to handle a single frame being wrapped by",
                        "                    multiple {{GPUExternalTexture}}, since import metadata like",
                        "                    {{GPUExternalTextureDescriptor/colorSpace}} can change even for the same frame.",
                        "",
                        "                    Otherwise:",
                        "",
                        "                    1. If |source| <l spec=html>[=is not origin-clean=]</l>,",
                        "                        throw a {{SecurityError}} and stop.",
                        "",
                        "                    1. Let |usability| be [=?=] [=check the usability of the image argument=](|source|).",
                        "",
                        "                    1. If |usability| is not `good`:",
                        "                        1. [$Generate a validation error$].",
                        "                        1. Return an [=invalid=] {{GPUExternalTexture}}.",
                        "",
                        "                    1. Let |data| be the result of converting the current image contents of |source| into",
                        "                        the color space |descriptor|.{{GPUExternalTextureDescriptor/colorSpace}}",
                        "                        with unpremultiplied alpha.",
                        "",
                        "                        This [[#color-space-conversions|may result]] in values outside of the range [0, 1].",
                        "                        If clamping is desired, it may be performed after sampling.",
                        "",
                        "                        Note: This is described like a copy, but may be implemented as a reference to",
                        "                        read-only underlying data plus appropriate metadata to perform conversion later.",
                        "",
                        "                    1. Let |result| be a new {{GPUExternalTexture}} object wrapping |data|.",
                        "",
                        "                1. If |source| is an {{HTMLVideoElement}},",
                        "                    [$queue an automatic expiry task$] with device |this| and the following steps:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        1. Set |result|.{{GPUExternalTexture/[[expired]]}} to `true`,",
                        "                            releasing ownership of the underlying resource.",
                        "                    </div>",
                        "",
                        "                    Note:",
                        "                    An {{HTMLVideoElement}} should be imported in the same task that samples the texture",
                        "                    (which should generally be scheduled using `requestVideoFrameCallback` or",
                        "                    {{AnimationFrameProvider/requestAnimationFrame()}} depending on the application).",
                        "                    Otherwise, a texture could get destroyed by these steps before the",
                        "                    application is finished using it.",
                        "                1. If |source| is a {{VideoFrame}}, then when |source| is",
                        "                    [=Close VideoFrame|closed=], run the following steps:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        1. Set |result|.{{GPUExternalTexture/[[expired]]}} to `true`.",
                        "                    </div>",
                        "                1. Set |result|.{{GPUObjectBase/label}} to |descriptor|.{{GPUObjectDescriptorBase/label}}.",
                        "                1. Return |result|.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createSampler(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUSampler}}.",
                        "",
                        "        <div algorithm=GPUDevice.createSampler>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createSampler(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUSampler}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUSampler}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |s| be a new {{GPUSampler}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |s|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |s| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/lodMinClamp}} &ge; 0.",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/lodMaxClamp}} &ge;",
                        "                            |descriptor|.{{GPUSamplerDescriptor/lodMinClamp}}.",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/maxAnisotropy}} &ge; 1.",
                        "",
                        "                            Note: Most implementations support {{GPUSamplerDescriptor/maxAnisotropy}}",
                        "                            values in range between 1 and 16, inclusive. The provided",
                        "                            {{GPUSamplerDescriptor/maxAnisotropy}} value will be clamped to the",
                        "                            maximum value that the platform supports.",
                        "",
                        "                        - If |descriptor|.{{GPUSamplerDescriptor/maxAnisotropy}} &gt; 1:",
                        "                            - |descriptor|.{{GPUSamplerDescriptor/magFilter}},",
                        "                                |descriptor|.{{GPUSamplerDescriptor/minFilter}},",
                        "                                and |descriptor|.{{GPUSamplerDescriptor/mipmapFilter}} must be",
                        "                                {{GPUMipmapFilterMode/\"linear\"}}.",
                        "                    </div>",
                        "                1. Set |s|.{{GPUSampler/[[descriptor]]}} to |descriptor|.",
                        "                1. Set |s|.{{GPUSampler/[[isComparison]]}} to `false` if the {{GPUSamplerDescriptor/compare}} attribute",
                        "                        of |s|.{{GPUSampler/[[descriptor]]}} is `null` or undefined. Otherwise, set it to `true`.",
                        "                1. Set |s|.{{GPUSampler/[[isFiltering]]}} to `false` if none of {{GPUSamplerDescriptor/minFilter}},",
                        "                    {{GPUSamplerDescriptor/magFilter}}, or {{GPUSamplerDescriptor/mipmapFilter}} has the value of",
                        "                    {{GPUFilterMode/\"linear\"}}. Otherwise, set it to `true`.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBindGroupLayout(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUBindGroupLayout}}.",
                        "",
                        "        <div algorithm=GPUDevice.createBindGroupLayout>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createBindGroupLayout(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUBindGroupLayout}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUBindGroupLayout}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. For each {{GPUBindGroupLayoutEntry}} |entry| in |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:",
                        "                    1. If |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=]:",
                        "                        1. [=?=] [$Validate texture format required features$] for",
                        "                            |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/format}}",
                        "                            with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |layout| be a new {{GPUBindGroupLayout}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |layout|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |layout| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.",
                        "                        - The {{GPUBindGroupLayoutEntry/binding}} of each entry in |descriptor| is unique.",
                        "                        - The {{GPUBindGroupLayoutEntry/binding}} of each entry in |descriptor| must be &lt;",
                        "                            |limits|.{{supported limits/maxBindingsPerBindGroup}}.",
                        "                        - |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}} must not",
                        "                            [=exceeds the binding slot limits|exceed the binding slot limits=] of |limits|.",
                        "                        - For each {{GPUBindGroupLayoutEntry}} |entry| in |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:",
                        "                            - Exactly one of",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/buffer}},",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/sampler}},",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/texture}}, and",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=].",
                        "",
                        "                            - |entry|.{{GPUBindGroupLayoutEntry/visibility}} contains only bits defined in {{GPUShaderStage}}.",
                        "",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/visibility}} includes",
                        "                                {{GPUShaderStage/VERTEX}}:",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/buffer}}?.{{GPUBufferBindingLayout/type}}",
                        "                                    must not be {{GPUBufferBindingType/\"storage\"}}.",
                        "                                    Note that {{GPUBufferBindingType/\"read-only-storage\"}} is allowed.",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}?.{{GPUStorageTextureBindingLayout/access}}",
                        "                                    must be {{GPUStorageTextureAccess/\"read-only\"}}.",
                        "",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/texture}}?.{{GPUTextureBindingLayout/multisampled}} is `true`:",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/texture}}.{{GPUTextureBindingLayout/viewDimension}} is",
                        "                                    {{GPUTextureViewDimension/\"2d\"}}.",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/texture}}.{{GPUTextureBindingLayout/sampleType}} is not",
                        "                                    {{GPUTextureSampleType/\"float\"}}.",
                        "",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=]:",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/viewDimension}} is not",
                        "                                    {{GPUTextureViewDimension/\"cube\"}} or {{GPUTextureViewDimension/\"cube-array\"}}.",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/format}} must be a format",
                        "                                    which can support storage usage for the given",
                        "                                    |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/access}}",
                        "                                    according to the [[#plain-color-formats]] table.",
                        "",
                        "                    </div>",
                        "",
                        "                1. Set |layout|.{{GPUBindGroupLayout/[[descriptor]]}} to |descriptor|.",
                        "                1. Set |layout|.{{GPUBindGroupLayout/[[dynamicOffsetCount]]}} to the number of",
                        "                    entries in |descriptor| where {{GPUBindGroupLayoutEntry/buffer}} is [=map/exist|provided=] and",
                        "                    {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/hasDynamicOffset}} is `true`.",
                        "                1. For each {{GPUBindGroupLayoutEntry}} |entry| in",
                        "                    |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:",
                        "                    1. Insert |entry| into |layout|.{{GPUBindGroupLayout/[[entryMap]]}}",
                        "                        with the key of |entry|.{{GPUBindGroupLayoutEntry/binding}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBindGroup(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUBindGroup}}.",
                        "",
                        "        <div algorithm=GPUDevice.createBindGroup>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createBindGroup(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUBindGroup}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUBindGroup}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |bindGroup| be a new {{GPUBindGroup}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |bindGroup|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |bindGroup| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |descriptor|.{{GPUBindGroupDescriptor/layout}} is [$valid to use with$] |this|.",
                        "                        - The number of {{GPUBindGroupLayoutDescriptor/entries}} of",
                        "                            |descriptor|.{{GPUBindGroupDescriptor/layout}} is exactly equal to",
                        "                            the number of |descriptor|.{{GPUBindGroupDescriptor/entries}}.",
                        "",
                        "                        For each {{GPUBindGroupEntry}} |bindingDescriptor| in",
                        "                            |descriptor|.{{GPUBindGroupDescriptor/entries}}:",
                        "                            - Let |resource| be |bindingDescriptor|.{{GPUBindGroupEntry/resource}}.",
                        "                            - There is exactly one {{GPUBindGroupLayoutEntry}} |layoutBinding|",
                        "                                in |descriptor|.{{GPUBindGroupDescriptor/layout}}.{{GPUBindGroupLayoutDescriptor/entries}}",
                        "                                such that |layoutBinding|.{{GPUBindGroupLayoutEntry/binding}} equals to",
                        "                                |bindingDescriptor|.{{GPUBindGroupEntry/binding}}.",
                        "",
                        "                            - If the defined [=binding member=] for |layoutBinding| is",
                        "",
                        "                                <dl class=switch>",
                        "                                    : {{GPUBindGroupLayoutEntry/sampler}}",
                        "                                    ::",
                        "                                        - |resource| is a {{GPUSampler}}.",
                        "                                        - |resource| is [$valid to use with$] |this|.",
                        "                                        - If |layoutBinding|.{{GPUBindGroupLayoutEntry/sampler}}.{{GPUSamplerBindingLayout/type}} is:",
                        "",
                        "                                            <dl class=switch>",
                        "                                                : {{GPUSamplerBindingType/\"filtering\"}}",
                        "                                                :: |resource|.{{GPUSampler/[[isComparison]]}} is `false`.",
                        "",
                        "                                                : {{GPUSamplerBindingType/\"non-filtering\"}}",
                        "                                                ::",
                        "                                                    |resource|.{{GPUSampler/[[isFiltering]]}} is `false`.",
                        "                                                    |resource|.{{GPUSampler/[[isComparison]]}} is `false`.",
                        "",
                        "                                                : {{GPUSamplerBindingType/\"comparison\"}}",
                        "                                                :: |resource|.{{GPUSampler/[[isComparison]]}} is `true`."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createPipelineLayout(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUPipelineLayout}}.",
                        "",
                        "        <div algorithm=GPUDevice.createPipelineLayout>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createPipelineLayout(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUPipelineLayout}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUPipelineLayout}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |pl| be a new {{GPUPipelineLayout}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |pl|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.",
                        "                1. Let |allEntries| be the result of concatenating",
                        "                    |bgl|.{{GPUBindGroupLayout/[[descriptor]]}}.{{GPUBindGroupLayoutDescriptor/entries}}",
                        "                    for all |bgl| in |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}.",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |pl| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - Every {{GPUBindGroupLayout}} in |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}",
                        "                            must be [$valid to use with$] |this| and have a {{GPUBindGroupLayout/[[exclusivePipeline]]}}",
                        "                            of `null`.",
                        "                        - The [=list/size=] of |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}",
                        "                            must be &le; |limits|.{{supported limits/maxBindGroups}}.",
                        "                        - |allEntries| must not [=exceeds the binding slot limits|exceed the binding slot limits=] of |limits|.",
                        "                    </div>",
                        "",
                        "                1. Set the |pl|.{{GPUPipelineLayout/[[bindGroupLayouts]]}} to",
                        "                    |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createShaderModule(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUShaderModule}}.",
                        "",
                        "        <div algorithm=GPUDevice.createShaderModule>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createShaderModule(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUShaderModule}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUShaderModule}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |sm| be a new {{GPUShaderModule}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |sm|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |result| be the result of [=shader module creation=] with the WGSL source",
                        "                    |descriptor|.{{GPUShaderModuleDescriptor/code}}.",
                        "                1. If any of the following requirements are unmet,",
                        "                    [$generate a validation error$], make |sm| [=invalid=], and return.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| must be [=valid=].",
                        "                        - |result| must not be a [=shader-creation error|shader-creation=] [=program error=].",
                        "                    </div>",
                        "",
                        "                    Note: [=Uncategorized errors=] cannot arise from shader module creation.",
                        "                    Implementations which detect such errors during shader module creation",
                        "                    must behave as if the shader module is valid, and defer surfacing the",
                        "                    error until pipeline creation.",
                        "",
                        "                Issue: Describe remaining {{GPUDevice/createShaderModule()}} validation and",
                        "                algorithm steps.",
                        "",
                        "                <div class=note heading>",
                        "                    User agents **should not** include detailed compiler error messages or shader text in",
                        "                    the {{GPUError/message}} text of validation errors arising here:",
                        "                    these details are accessible via {{GPUShaderModule/getCompilationInfo()}}.",
                        "                    User agents **should** surface human-readable, formatted error details *to",
                        "                    developers* for easier debugging (for example as a warning in the browser developer",
                        "                    console, expandable to show full shader source).",
                        "",
                        "                    As shader compilation errors should be rare in production applications, user agents",
                        "                    could choose to surface them *to developers* regardless of error handling ([=GPU error scopes=] or",
                        "                    {{GPUDevice/uncapturederror}} event handlers), e.g. as an expandable warning.",
                        "                    If not, they should provide and document another way for developers to access",
                        "                    human-readable error details, for example by adding a checkbox to show errors",
                        "                    unconditionally, or by showing human-readable details when logging a",
                        "                    {{GPUCompilationInfo}} object to the console.",
                        "                </div>",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createComputePipeline(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUComputePipeline}} using [=immediate pipeline creation=].",
                        "",
                        "        <div algorithm=GPUDevice.createComputePipeline>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createComputePipeline(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUComputePipeline}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUComputePipeline}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |pipeline| be a new {{GPUComputePipeline}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |pipeline|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |layout| be a new [$default pipeline layout$] for |pipeline| if",
                        "                    |descriptor|.{{GPUPipelineDescriptorBase/layout}} is {{GPUAutoLayoutMode/\"auto\"}},",
                        "                    and |descriptor|.{{GPUPipelineDescriptorBase/layout}} otherwise.",
                        "",
                        "                1. If any of the requirements in the following steps are unsatisfied,",
                        "                    [$generate a validation error$], make |pipeline| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |layout| must be [$valid to use with$] |this|.",
                        "                        - [$validating GPUProgrammableStage$]({{GPUShaderStage/COMPUTE}},",
                        "                            |descriptor|.{{GPUComputePipelineDescriptor/compute}}, |layout|) must succeed.",
                        "                        - Let |entryPoint| be [$get the entry point$]({{GPUShaderStage/COMPUTE}}, |descriptor|.{{GPUComputePipelineDescriptor/compute}}). [=Assert=] |entryPoint| is not `null`.",
                        "                        - Let |workgroupStorageUsed| be the sum of [=roundUp=](16, [$SizeOf$](|T|)) over each",
                        "                            type |T| of all variables with address space \"[=address spaces/workgroup=]\"",
                        "                            [=statically used=] by |entryPoint|.",
                        "",
                        "                            |workgroupStorageUsed| must be &le;",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupStorageSize}}.",
                        "                        - |entryPoint| must use &le;",
                        "                            |device|.limits.{{supported limits/maxComputeInvocationsPerWorkgroup}} per",
                        "                            workgroup.",
                        "                        - Each component of |entryPoint|'s",
                        "                            `workgroup_size` attribute must be &le; the corresponding component in",
                        "                            [|device|.limits.{{supported limits/maxComputeWorkgroupSizeX}},",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupSizeY}},",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupSizeZ}}].",
                        "                    </div>",
                        "",
                        "                1. If any [=pipeline-creation error|pipeline-creation=] [=uncategorized errors=]",
                        "                    result from the implementation of pipeline creation,",
                        "                    [$generate an internal error$], make |pipeline| [=invalid=], and stop.",
                        "",
                        "                    Note:",
                        "                    Even if the implementation detected [=uncategorized errors=] in shader module",
                        "                    creation, the error is surfaced here.",
                        "",
                        "                1. Set |pipeline|.{{GPUPipelineBase/[[layout]]}} to |layout|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>createComputePipelineAsync(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUComputePipeline}} using [=async pipeline creation=].",
                        "        The returned {{Promise}} resolves when the created pipeline",
                        "        is ready to be used without additional delay.",
                        "",
                        "        If pipeline creation fails, the returned {{Promise}} rejects with an {{GPUPipelineError}}.",
                        "",
                        "        Note: Use of this method is preferred whenever possible, as it prevents blocking the",
                        "        [=queue timeline=] work on pipeline compilation.",
                        "",
                        "        <div algorithm=GPUDevice.createComputePipelineAsync>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createComputePipelineAsync(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUComputePipeline}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUComputePipeline}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |pipeline| be a new {{GPUComputePipeline}} created as if",
                        "                    |this|.{{GPUDevice/createComputePipeline()}} was called with |descriptor|;",
                        "",
                        "                1. When |pipeline| is ready to be used or has been made [=invalid=], issue the",
                        "                    subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |pipeline|...",
                        "                    <dl class=switch>",
                        "                        : [=valid=]",
                        "                        :: [=Resolve=] |promise| with |pipeline|.",
                        "                        : [=invalid=] due to an [$internal error$]",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"internal\"}}.",
                        "                        : [=invalid=] due to an [$validation error$]",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"validation\"}}."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createRenderPipeline(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPURenderPipeline}} using [=immediate pipeline creation=].",
                        "",
                        "        <div algorithm=GPUDevice.createRenderPipeline>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderPipeline(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPURenderPipeline}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPURenderPipeline}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |descriptor|.{{GPURenderPipelineDescriptor/fragment}} is [=map/exist|provided=]:",
                        "                    1. [=list/For each=] non-`null` |colorState| of",
                        "                        |descriptor|.{{GPURenderPipelineDescriptor/fragment}}.{{GPUFragmentState/targets}}:",
                        "                        1. [=?=] [$Validate texture format required features$] of",
                        "                            |colorState|.{{GPUColorTargetState/format}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. If |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}} is [=map/exist|provided=]:",
                        "                    1. [=?=] [$Validate texture format required features$] of",
                        "                        |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}}.{{GPUDepthStencilState/format}}",
                        "                        with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |pipeline| be a new {{GPURenderPipeline}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |pipeline|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |layout| be a new [$default pipeline layout$] for |pipeline| if",
                        "                    |descriptor|.{{GPUPipelineDescriptorBase/layout}} is {{GPUAutoLayoutMode/\"auto\"}},",
                        "                    and |descriptor|.{{GPUPipelineDescriptorBase/layout}} otherwise.",
                        "                1. If any of the following conditions are unsatisfied:",
                        "                    [$generate a validation error$], make |pipeline| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |layout| is [$valid to use with$] |this|.",
                        "                        - [$validating GPURenderPipelineDescriptor$](|descriptor|, |layout|, |this|) succeeds.",
                        "                        - |layout|.{{GPUPipelineLayout/[[bindGroupLayouts]]}}.length + |vertexBufferCount| is &le;",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxBindGroupsPlusVertexBuffers}},",
                        "                            where |vertexBufferCount| is the maximum index in |descriptor|.{{GPURenderPipelineDescriptor/vertex}}.{{GPUVertexState/buffers}} that is not `undefined`.",
                        "                    </div>",
                        "                1. If any [=pipeline-creation error|pipeline-creation=] [=uncategorized errors=]",
                        "                    result from the implementation of pipeline creation,",
                        "                    [$generate an internal error$], make |pipeline| [=invalid=], and stop.",
                        "",
                        "                    Note:",
                        "                    Even if the implementation detected [=uncategorized errors=] in shader module",
                        "                    creation, the error is surfaced here.",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[descriptor]]}} to |descriptor|.",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[writesDepth]]}} to false.",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to false.",
                        "                1. Let |depthStencil| be |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}}.",
                        "                1. If |depthStencil| is not null:",
                        "                    1. Set |pipeline|.{{GPURenderPipeline/[[writesDepth]]}} to |depthStencil|.{{GPUDepthStencilState/depthWriteEnabled}}.",
                        "                    1. If |depthStencil|.{{GPUDepthStencilState/stencilWriteMask}} is not 0:",
                        "                        1. Let |stencilFront| be |depthStencil|.{{GPUDepthStencilState/stencilFront}}.",
                        "                        1. Let |stencilBack| be |depthStencil|.{{GPUDepthStencilState/stencilBack}}.",
                        "                        1. Let |cullMode| be |descriptor|.{{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/cullMode}}.",
                        "                        1. If |cullMode| is not {{GPUCullMode/\"front\"}}, and any of |stencilFront|.{{GPUStencilFaceState/passOp}},",
                        "                            |stencilFront|.{{GPUStencilFaceState/depthFailOp}}, or |stencilFront|.{{GPUStencilFaceState/failOp}}",
                        "                            is not {{GPUStencilOperation/\"keep\"}}:",
                        "                            1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to true.",
                        "                        1. If |cullMode| is not {{GPUCullMode/\"back\"}}, and any of |stencilBack|.{{GPUStencilFaceState/passOp}},",
                        "                            |stencilBack|.{{GPUStencilFaceState/depthFailOp}}, or |stencilBack|.{{GPUStencilFaceState/failOp}}",
                        "                            is not {{GPUStencilOperation/\"keep\"}}:",
                        "                            1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to true.",
                        "                1. Set |pipeline|.{{GPUPipelineBase/[[layout]]}} to |layout|.",
                        "            </div>",
                        "",
                        "            Issue: need description of the render states.",
                        "        </div>",
                        "",
                        "    : <dfn>createRenderPipelineAsync(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPURenderPipeline}} using [=async pipeline creation=].",
                        "        The returned {{Promise}} resolves when the created pipeline",
                        "        is ready to be used without additional delay.",
                        "",
                        "        If pipeline creation fails, the returned {{Promise}} rejects with an {{GPUPipelineError}}.",
                        "",
                        "        Note: Use of this method is preferred whenever possible, as it prevents blocking the",
                        "        [=queue timeline=] work on pipeline compilation.",
                        "",
                        "        <div algorithm=GPUDevice.createRenderPipelineAsync>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderPipelineAsync(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPURenderPipeline}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPURenderPipeline}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Let |pipeline| be a new {{GPURenderPipeline}} created as if",
                        "                    |this|.{{GPUDevice/createRenderPipeline()}} was called with |descriptor|;",
                        "",
                        "                1. When |pipeline| is ready to be used or has been made [=invalid=], issue the",
                        "                    subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |pipeline| is...",
                        "                    <dl class=switch>",
                        "                        : [=valid=]",
                        "                        :: [=Resolve=] |promise| with |pipeline|.",
                        "                        : [=invalid=] due to an [$internal error$]",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"internal\"}}.",
                        "                        : [=invalid=] due to an [$validation error$]",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"validation\"}}."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createCommandEncoder(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUCommandEncoder}}.",
                        "",
                        "        <div algorithm=GPUDevice.createCommandEncoder>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createCommandEncoder(descriptor)\">",
                        "                    descriptor: Description of the {{GPUCommandEncoder}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUCommandEncoder}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |e| be a new {{GPUCommandEncoder}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |e|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |e| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                    </div>",
                        "",
                        "                Issue: Describe remaining {{GPUDevice/createCommandEncoder()}} validation and",
                        "                algorithm steps.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createRenderBundleEncoder(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPURenderBundleEncoder}}.",
                        "",
                        "        <div algorithm=GPUDevice.createRenderBundleEncoder>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderBundleEncoder(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPURenderBundleEncoder}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPURenderBundleEncoder}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$Validate texture format required features$] of each non-`null` element of",
                        "                    |descriptor|.{{GPURenderPassLayout/colorFormats}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. [=?=] [$Validate texture format required features$] of",
                        "                    |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |e| be a new {{GPURenderBundleEncoder}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |e|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |e| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - |descriptor|.{{GPURenderPassLayout/colorFormats}}.length must be &le;",
                        "                            |this|.{{device/[[limits]]}}.{{supported limits/maxColorAttachments}}.",
                        "                        - For each non-`null` |colorFormat| in |descriptor|.{{GPURenderPassLayout/colorFormats}}:",
                        "                            - |colorFormat| must be a [=color renderable format=].",
                        "                        - [$Calculating color attachment bytes per sample$](|descriptor|.{{GPURenderPassLayout/colorFormats}})",
                        "                            must be &le; |this|.{{device/[[limits]]}}.{{supported limits/maxColorAttachmentBytesPerSample}}.",
                        "                        - If |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} is [=map/exist|provided=]:",
                        "                            - |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} must be a",
                        "                                [=depth-or-stencil format=].",
                        "                        - There must exist at least one attachment, either:",
                        "                            - A non-`null` value in",
                        "                                |descriptor|.{{GPURenderPassLayout/colorFormats}}, or",
                        "                            - A |descriptor|.{{GPURenderPassLayout/depthStencilFormat}}.",
                        "                    </div>",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[layout]]}} to a copy of |descriptor|'s included {{GPURenderPassLayout}} interface.",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} to |descriptor|.{{GPURenderBundleEncoderDescriptor/depthReadOnly}}.",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} to |descriptor|.{{GPURenderBundleEncoderDescriptor/stencilReadOnly}}.",
                        "                1. Set |e|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[drawCount]]}} to 0.",
                        "",
                        "                Issue: Describe the reset of the steps for {{GPUDevice/createRenderBundleEncoder()}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createQuerySet(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUQuerySet}}.",
                        "",
                        "        <div algorithm=GPUDevice.createQuerySet>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/createQuerySet(descriptor)\">",
                        "                    descriptor: Description of the {{GPUQuerySet}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUQuerySet}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |descriptor|.{{GPUQuerySetDescriptor/type}} is {{GPUQueryType/\"timestamp\"}},",
                        "                    but {{GPUFeatureName/\"timestamp-query\"}} is not [=enabled for=] |this|:",
                        "                    1. Throw a {{TypeError}}.",
                        "                1. Let |q| be a new {{GPUQuerySet}} object.",
                        "                1. Set |q|.{{GPUQuerySet/type}} to |descriptor|.{{GPUQuerySetDescriptor/type}}.",
                        "                1. Set |q|.{{GPUQuerySet/count}} to |descriptor|.{{GPUQuerySetDescriptor/count}}.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |q|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$],",
                        "                    make |q| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - |descriptor|.{{GPUQuerySetDescriptor/count}} must be &le; 4096.",
                        "                    </div>",
                        "",
                        "                1. Set |q|.{{GPUQuerySet/[[state]]}} to [=query set state/available=].",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>lost</dfn>",
                        "    ::",
                        "        A [=slot-backed attribute=] holding a promise which is created with the device, remains",
                        "        pending for the lifetime of the device, then resolves when the device is lost.",
                        "",
                        "        Upon initialization, it is set to [=a new promise=]."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[errorScopeStack]]</dfn>, of type [=stack=]&lt;[=GPU error scope=]&gt;",
                        "    ::",
                        "        A [=stack=] of [=GPU error scopes=] that have been pushed to the {{GPUDevice}}."
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>pushErrorScope(filter)</dfn>",
                        "    ::",
                        "        Pushes a new [=GPU error scope=] onto the {{GPUDevice/[[errorScopeStack]]}} for |this|.",
                        "",
                        "        <div algorithm=GPUDevice.pushErrorScope>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDevice/pushErrorScope(filter)\">",
                        "                    |filter|: Which class of errors this error scope observes.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Let |scope| be a new [=GPU error scope=].",
                        "                1. Set |scope|.{{GPU error scope/[[filter]]}} to |filter|.",
                        "                1. [=stack/Push=] |scope| onto |this|.{{GPUDevice/[[errorScopeStack]]}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>popErrorScope()</dfn>",
                        "    ::",
                        "        Pops a [=GPU error scope=] off the {{GPUDevice/[[errorScopeStack]]}} for |this|",
                        "        and resolves to **any** {{GPUError}} observed by the error scope, or `null` if none.",
                        "",
                        "        There is no guarantee of the ordering of promise resolution.",
                        "",
                        "        <div algorithm=GPUDevice.popErrorScope>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDevice}} |this|.",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUError}}?&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Issue the |check steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |check steps|:",
                        "",
                        "                1. If |this| is [=invalid|lost=], issue the following steps on",
                        "                    <var data-timeline=content>contentTimeline</var> and return:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        [=Content timeline=] steps:",
                        "",
                        "                        1. [=Resolve=] |promise| with `null`.",
                        "                    </div>",
                        "",
                        "                    Note: No errors are generated after device loss. See [[#errors-and-debugging]].",
                        "",
                        "                1. If any of the following requirements are unmet:",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPUDevice/[[errorScopeStack]]}}.[=list/size=] must be &gt; 0.",
                        "                    </div>",
                        "",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>",
                        "                    and return:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        [=Content timeline=] steps:",
                        "",
                        "                        1. [=Reject=] |promise| with an {{OperationError}}.",
                        "                    </div>",
                        "",
                        "                1. Let |scope| be the result of [=stack/pop|popping=] an [=list/item=] off of",
                        "                    |this|.{{GPUDevice/[[errorScopeStack]]}}.",
                        "                1. Let |error| be **any** one of the items in |scope|.{{GPU error scope/[[errors]]}},",
                        "                    or `null` if there are none.",
                        "",
                        "                    For any two errors E1 and E2 in the list, if E2 was caused by E1, E2 **should",
                        "                    not** be the one selected.",
                        "",
                        "                    Note:",
                        "                    For example, if E1 comes from `t` = {{GPUDevice/createTexture()}}, and",
                        "                    E2 comes from `t`.{{GPUTexture/createView()}} because `t` was [=invalid=],",
                        "                    E1 should be be preferred since it will be easier for a developer to understand",
                        "                    what went wrong.",
                        "                    Since both of these are {{GPUValidationError}}s, the only difference will be in",
                        "                    the {{GPUError/message}} field, which is meant only to be read by humans anyway.",
                        "",
                        "                1. At an **unspecified point now or in the future**,",
                        "                    issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "",
                        "                    Note:",
                        "                    By allowing {{GPUDevice/popErrorScope()}} calls to resolve in any order, with",
                        "                    any of the errors observed by the scope, this spec allows validation to complete",
                        "                    out of order, as long as any state observations are made at the appropriate",
                        "                    point in adherence to this spec. For example, this allows implementations to",
                        "                    perform shader compilation, which depends only on non-stateful inputs, to be",
                        "                    completed on a background thread in parallel with other device-timeline work,",
                        "                    and report any resulting errors later.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=Resolve=] |promise| with |error|.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>onuncapturederror</dfn>",
                        "    ::",
                        "        An [=event handler IDL attribute=] for the {{GPUDevice/uncapturederror}} event type."
                    ]
                }
            ]
        ],
        [
            "GPUBufferMapState",
            [
                {
                    "target": "GPUBufferMapState",
                    "type": "enum-value",
                    "lines": [
                        "            : <dfn>\"unmapped\"</dfn>",
                        "            ::",
                        "                The buffer is not mapped for use by `this`.{{GPUBuffer/getMappedRange()}}.",
                        "",
                        "            : <dfn>\"pending\"</dfn>",
                        "            ::",
                        "                A mapping of the buffer has been requested, but is pending.",
                        "                It may succeed, or fail validation in {{GPUBuffer/mapAsync()}}.",
                        "",
                        "            : <dfn>\"mapped\"</dfn>",
                        "            ::",
                        "                The buffer is mapped and `this`.{{GPUBuffer/getMappedRange()}} may be used."
                    ]
                }
            ]
        ],
        [
            "GPUBufferDescriptor",
            [
                {
                    "target": "GPUBufferDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>size</dfn>",
                        "    ::",
                        "        The size of the buffer in bytes.",
                        "",
                        "    : <dfn>usage</dfn>",
                        "    ::",
                        "        The allowed usages for the buffer.",
                        "",
                        "    : <dfn>mappedAtCreation</dfn>",
                        "    ::",
                        "        If `true` creates the buffer in an already mapped state, allowing",
                        "        {{GPUBuffer/getMappedRange()}} to be called immediately. It is valid to set",
                        "        {{GPUBufferDescriptor/mappedAtCreation}} to `true` even if {{GPUBufferDescriptor/usage}}",
                        "        does not contain {{GPUBufferUsage/MAP_READ}} or {{GPUBufferUsage/MAP_WRITE}}. This can be",
                        "        used to set the buffer's initial data.",
                        "",
                        "        Guarantees that even if the buffer creation eventually fails, it will still appear as if the",
                        "        mapped range can be written/read to until it is unmapped."
                    ]
                }
            ]
        ],
        [
            "GPUBufferUsage",
            [
                {
                    "target": "GPUBufferUsage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>MAP_READ</dfn>",
                        "    ::",
                        "        The buffer can be mapped for reading. (Example: calling {{GPUBuffer/mapAsync()}} with",
                        "        {{GPUMapMode/READ|GPUMapMode.READ}})",
                        "",
                        "        May only be combined with {{GPUBufferUsage/COPY_DST}}.",
                        "",
                        "    : <dfn>MAP_WRITE</dfn>",
                        "    ::",
                        "        The buffer can be mapped for writing. (Example: calling {{GPUBuffer/mapAsync()}} with",
                        "        {{GPUMapMode/WRITE|GPUMapMode.WRITE}})",
                        "",
                        "        May only be combined with {{GPUBufferUsage/COPY_SRC}}.",
                        "",
                        "    : <dfn>COPY_SRC</dfn>",
                        "    ::",
                        "        The buffer can be used as the source of a copy operation. (Examples: as the `source`",
                        "        argument of a {{GPUCommandEncoder/copyBufferToBuffer()}} or",
                        "        {{GPUCommandEncoder/copyBufferToTexture()}} call.)",
                        "",
                        "    : <dfn>COPY_DST</dfn>",
                        "    ::",
                        "        The buffer can be used as the destination of a copy or write operation. (Examples: as the",
                        "        `destination` argument of a {{GPUCommandEncoder/copyBufferToBuffer()}} or",
                        "        {{GPUCommandEncoder/copyTextureToBuffer()}} call, or as the target of a",
                        "        {{GPUQueue/writeBuffer()}} call.)",
                        "",
                        "    : <dfn>INDEX</dfn>",
                        "    ::",
                        "        The buffer can be used as an index buffer. (Example: passed to",
                        "        {{GPURenderCommandsMixin/setIndexBuffer()}}.)",
                        "",
                        "    : <dfn>VERTEX</dfn>",
                        "    ::",
                        "        The buffer can be used as a vertex buffer. (Example: passed to",
                        "        {{GPURenderCommandsMixin/setVertexBuffer()}}.)",
                        "",
                        "    : <dfn>UNIFORM</dfn>",
                        "    ::",
                        "        The buffer can be used as a uniform buffer. (Example: as a bind group entry for a",
                        "        {{GPUBufferBindingLayout}} with a",
                        "        {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/type}} of",
                        "        {{GPUBufferBindingType/\"uniform\"}}.)",
                        "",
                        "    : <dfn>STORAGE</dfn>",
                        "    ::",
                        "        The buffer can be used as a storage buffer. (Example: as a bind group entry for a",
                        "        {{GPUBufferBindingLayout}} with a",
                        "        {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/type}} of",
                        "        {{GPUBufferBindingType/\"storage\"}} or {{GPUBufferBindingType/\"read-only-storage\"}}.)",
                        "",
                        "    : <dfn>INDIRECT</dfn>",
                        "    ::",
                        "        The buffer can be used as to store indirect command arguments. (Examples: as the",
                        "        `indirectBuffer` argument of a {{GPURenderCommandsMixin/drawIndirect()}} or",
                        "        {{GPUComputePassEncoder/dispatchWorkgroupsIndirect()}} call.)",
                        "",
                        "    : <dfn>QUERY_RESOLVE</dfn>",
                        "    ::",
                        "        The buffer can be used to capture query results. (Example: as the `destination` argument of",
                        "        a {{GPUCommandEncoder/resolveQuerySet()}} call.)"
                    ]
                }
            ]
        ],
        [
            "GPUBuffer",
            [
                {
                    "target": "GPUBuffer",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>",
                        "    ::",
                        "        Destroys the {{GPUBuffer}}.",
                        "",
                        "        Note: It is valid to destroy a buffer multiple times.",
                        "",
                        "        <div algorithm=GPUBuffer.destroy>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUBuffer}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Call |this|.{{GPUBuffer/unmap()}}.",
                        "",
                        "                <!-- POSTV1(multithreading) tentative text:",
                        "                    Note: If the buffer is mapped in a different thread, it is not unmapped.",
                        "                    It can be unmapped only from the thread on which it is mapped, either by",
                        "                    another call to {{GPUBuffer/destroy()|GPUBuffer.destroy()}},",
                        "                    or by {{GPUBuffer/unmap()|GPUBuffer.unmap()}}.",
                        "                -->",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to",
                        "                    \"[=buffer internals/state/destroyed=]\".",
                        "            </div>",
                        "        </div>",
                        "",
                        "        Note: Since no further operations can be enqueued using this buffer, implementations can",
                        "        free resource allocations, including mapped memory that was just unmapped."
                    ]
                },
                {
                    "target": "GPUBuffer",
                    "type": "method",
                    "lines": [
                        "    : <dfn>mapAsync(mode, offset, size)</dfn>",
                        "    ::",
                        "        Maps the given range of the {{GPUBuffer}} and resolves the returned {{Promise}} when the",
                        "        {{GPUBuffer}}'s content is ready to be accessed with {{GPUBuffer/getMappedRange()}}.",
                        "",
                        "        The resolution of the returned {{Promise}} **only** indicates that the buffer has been mapped.",
                        "        It does not guarantee the completion of any other operations visible to the [=content timeline=],",
                        "        and in particular does not imply that any other {{Promise}} returned from",
                        "        {{GPUQueue/onSubmittedWorkDone()}} or {{GPUBuffer/mapAsync()}} on other {{GPUBuffer}}s",
                        "        have resolved.",
                        "",
                        "        The resolution of the {{Promise}} returned from {{GPUQueue/onSubmittedWorkDone()}}",
                        "        **does** imply the completion of",
                        "        {{GPUBuffer/mapAsync()}} calls made prior to that call,",
                        "        on {{GPUBuffer}}s last used exclusively on that queue.",
                        "",
                        "        <div algorithm=GPUBuffer.mapAsync>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUBuffer}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUBuffer/mapAsync(mode, offset, size)\">",
                        "                    |mode|: Whether the buffer should be mapped for reading or writing.",
                        "                    |offset|: Offset in bytes into the buffer to the start of the range to map.",
                        "                    |size|: Size in bytes of the range to map.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{undefined}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} is not `null`:",
                        "                    1. Return [=a promise rejected with=] {{OperationError}}.",
                        "                1. Let |p| be a new {{Promise}}.",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to |p|.",
                        "                1. Issue the |validation steps| on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Return |p|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |validation steps|:",
                        "",
                        "                1. If |size| is `undefined`:",
                        "                    1. Let |rangeSize| be max(0, |this|.{{GPUBuffer/size}} - |offset|).",
                        "",
                        "                    Otherwise:",
                        "",
                        "                    1. Let |rangeSize| be |size|.",
                        "",
                        "                1. If any of the following conditions are unsatisfied:",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is a [=valid=] {{GPUBuffer}}.",
                        "                        - |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] is \"[=buffer internals/state/available=]\".",
                        "                        - |offset| is a multiple of 8.",
                        "                        - |rangeSize| is a multiple of 4.",
                        "                        - |offset| + |rangeSize| &le; |this|.{{GPUBuffer/size}}",
                        "                        - |mode| contains only bits defined in {{GPUMapMode}}.",
                        "                        - |mode| contains exactly one of {{GPUMapMode/READ}} or {{GPUMapMode/WRITE}}.",
                        "                        - If |mode| contains {{GPUMapMode/READ}} then |this|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/MAP_READ}}.",
                        "                        - If |mode| contains {{GPUMapMode/WRITE}} then |this|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/MAP_WRITE}}.",
                        "                    </div>",
                        "",
                        "                    Then:",
                        "",
                        "                    1. Issue the <var data-timeline=content>map failure steps</var> on",
                        "                        <var data-timeline=content>contentTimeline</var>.",
                        "                    1. [$Generate a validation error$].",
                        "                    1. Return.",
                        "",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to \"[=buffer internals/state/unavailable=]\".",
                        "",
                        "                    Note: Since the buffer is mapped, its contents cannot change between this completion and {{GPUBuffer/unmap()}}.",
                        "                1. If |this|.{{GPUObjectBase/[[device]]}} is lost, or when it [=lose the device|becomes lost=]:",
                        "",
                        "                    1. Issue the <var data-timeline=content>map failure steps</var> on",
                        "                        <var data-timeline=content>contentTimeline</var>.",
                        "",
                        "                    Otherwise, at an unspecified point:",
                        "",
                        "                    - after the completion of",
                        "                        <span data-timeline=queue>currently-enqueued operations that use |this|</span>,",
                        "                    - and no later than the next [=device timeline=] operation after the",
                        "                        [=device timeline=] becomes informed of the completion of",
                        "                        <span data-timeline=queue>all currently-enqueued operations</span>",
                        "                        (regardless of whether they use |this|),",
                        "",
                        "                    run the following steps:",
                        "",
                        "                    1. Let |internalStateAtCompletion| be |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=].",
                        "",
                        "                        Note: If, and only if, at this point the buffer has become \"[=buffer internals/state/available=]\"",
                        "                        again due to an {{GPUBuffer/unmap()}} call, then {{GPUBuffer/[[pending_map]]}} != |p| below,",
                        "                        so mapping will not succeed in the steps below.",
                        "                    1. Let |dataForMappedRegion| be the contents of |this| starting at offset |offset|, for |rangeSize| bytes.",
                        "                    1. Issue the <var data-timeline=content>map success steps</var> on the",
                        "                        <var data-timeline=content>contentTimeline</var>.",
                        "",
                        "                    <!-- POSTV1(multi-queue): this may be better described using queue-transfer language. -->",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] <var data-timeline=content>map success steps</var>:",
                        "",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} != |p|:",
                        "",
                        "                    Note: The map has been cancelled by {{GPUBuffer/unmap()}}.",
                        "",
                        "                    1. [=Assert=] |p| is rejected.",
                        "                    1. Return.",
                        "                1. [=Assert=] |p| is pending.",
                        "                1. [=Assert=] |internalStateAtCompletion| is \"[=buffer internals/state/unavailable=]\".",
                        "                1. Let |mapping| be [$initialize an active buffer mapping$]",
                        "                    with mode |mode| and range <code>[|offset|, |offset| + |rangeSize|]</code>.",
                        "",
                        "                    If this allocation fails:",
                        "",
                        "                    1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,",
                        "                        and [=reject=] |p| with a {{RangeError}}.",
                        "                    1. Return.",
                        "                1. Set the content of |mapping|.[=active buffer mapping/data=] to |dataForMappedRegion|.",
                        "                1. Set |this|.{{GPUBuffer/[[mapping]]}} to |mapping|.",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,",
                        "                    and [=resolve=] |p|.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] <var data-timeline=content>map failure steps</var>:",
                        "",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} != |p|:",
                        "",
                        "                    Note: The map has been cancelled by {{GPUBuffer/unmap()}}.",
                        "",
                        "                    1. [=Assert=] |p| is already rejected.",
                        "                    1. Return.",
                        "                1. [=Assert=] |p| is still pending.",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,",
                        "                    and [=reject=] |p| with an {{OperationError}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>getMappedRange(offset, size)</dfn>",
                        "    ::",
                        "        Returns an {{ArrayBuffer}} with the contents of the {{GPUBuffer}} in the given mapped range.",
                        "",
                        "        <div algorithm=GPUBuffer.getMappedRange>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUBuffer}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUBuffer/getMappedRange(offset, size)\">",
                        "                    |offset|: Offset in bytes into the buffer to return buffer contents from.",
                        "                    |size|: Size in bytes of the {{ArrayBuffer}} to return.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{ArrayBuffer}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |size| is missing:",
                        "                    1. Let |rangeSize| be max(0, |this|.{{GPUBuffer/size}} - |offset|).",
                        "",
                        "                    Otherwise, let |rangeSize| be |size|.",
                        "",
                        "                1. If any of the following conditions are unsatisfied, throw an {{OperationError}} and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPUBuffer/[[mapping]]}} is not `null`.",
                        "                        - |offset| is a multiple of 8.",
                        "                        - |rangeSize| is a multiple of 4.",
                        "                        - |offset| &ge; |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0].",
                        "                        - |offset| + |rangeSize| &le; |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][1].",
                        "                        - [|offset|, |offset| + |rangeSize|) does not overlap another range in",
                        "                            |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=].",
                        "",
                        "                        Note: It is always valid to get mapped ranges of a {{GPUBuffer}} that is",
                        "                        {{GPUBufferDescriptor/mappedAtCreation}}, even if it is [=invalid=], because",
                        "                        the [=Content timeline=] might not know it is invalid.",
                        "                    </div>",
                        "",
                        "                1. Let |data| be |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/data=].",
                        "",
                        "                1. Let |view| be [=!=] [=ArrayBuffer/create|create an ArrayBuffer=] of size |rangeSize|,",
                        "                    but with its pointer mutably referencing the content of |data| at offset",
                        "                    (|offset| - {{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0]).",
                        "",
                        "                    Note: A {{RangeError}} may not be thrown here, because the |data| has already",
                        "                    been allocated during {{GPUBuffer/mapAsync()}} or {{GPUDevice/createBuffer()}}.",
                        "",
                        "                1. Set |view|.{{ArrayBuffer/[[ArrayBufferDetachKey]]}} to \"WebGPUBufferMapping\".",
                        "",
                        "                    Note: This causes a {{TypeError}} to be thrown if an attempt is made to",
                        "                    [$DetachArrayBuffer$], except by {{GPUBuffer/unmap()}}.",
                        "",
                        "                1. [=list/Append=] |view| to |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=].",
                        "",
                        "                1. Return |view|.",
                        "",
                        "                Note: User agents should consider issuing a developer-visible warning if",
                        "                {{GPUBuffer/getMappedRange()}} succeeds without having checked the status of",
                        "                the map, by waiting for {{GPUBuffer/mapAsync()}} to succeed, querying a",
                        "                {{GPUBuffer/mapState}} of {{GPUBufferMapState/\"mapped\"}}, or waiting for a",
                        "                later {{GPUQueue/onSubmittedWorkDone()}} call to succeed.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>unmap()</dfn>",
                        "    ::",
                        "        Unmaps the mapped range of the {{GPUBuffer}} and makes it's contents available for use by the",
                        "        GPU again.",
                        "",
                        "        <div algorithm=GPUBuffer.unmap>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUBuffer}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} is not `null`:",
                        "                    1. [=Reject=] |this|.{{GPUBuffer/[[pending_map]]}} with an {{AbortError}}.",
                        "                    1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`.",
                        "",
                        "                1. If |this|.{{GPUBuffer/[[mapping]]}} is `null`:",
                        "                    1. Return.",
                        "",
                        "                1. For each {{ArrayBuffer}} |ab| in |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=]:",
                        "                    1. Perform [$DetachArrayBuffer$](|ab|, \"WebGPUBufferMapping\").",
                        "",
                        "                1. Let |bufferUpdate| be `null`.",
                        "",
                        "                1. If |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/mode=] contains {{GPUMapMode/WRITE}}:",
                        "                    1. Set |bufferUpdate| to {",
                        "                        `data`: |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/data=],",
                        "                        `offset`: |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0]",
                        "                        }.",
                        "",
                        "                    Note: When a buffer is mapped without the {{GPUMapMode/WRITE}} mode, then",
                        "                    unmapped, any local modifications done by the application to the mapped ranges",
                        "                    {{ArrayBuffer}} are discarded and will not affect the content of later mappings.",
                        "",
                        "                1. Set |this|.{{GPUBuffer/[[mapping]]}} to `null`.",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. If |this|.{{GPUObjectBase/[[device]]}} is [=invalid=], return.",
                        "                1. If |bufferUpdate| is not `null`:",
                        "",
                        "                    1. Issue the following steps on the [=Queue timeline=] of |this|.{{GPUObjectBase/[[device]]}}.{{GPUDevice/queue}}:",
                        "",
                        "                        <div data-timeline=queue>",
                        "                            [=Queue timeline=] steps:",
                        "",
                        "                            1. Update the contents of |this| at offset |bufferUpdate|.`offset`",
                        "                                with the data |bufferUpdate|.`data`.",
                        "                        </div>",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to \"[=buffer internals/state/available=]\".",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUMapMode",
            [
                {
                    "target": "GPUMapMode",
                    "type": "const",
                    "lines": [
                        "    : <dfn>READ</dfn>",
                        "    ::",
                        "        Only valid with buffers created with the {{GPUBufferUsage/MAP_READ}} usage.",
                        "",
                        "        Once the buffer is mapped, calls to {{GPUBuffer/getMappedRange()}} will return an",
                        "        {{ArrayBuffer}} containing the buffer's current values. Changes to the returned",
                        "        {{ArrayBuffer}} will be discarded after {{GPUBuffer/unmap()}} is called.",
                        "",
                        "    : <dfn>WRITE</dfn>",
                        "    ::",
                        "        Only valid with buffers created with the {{GPUBufferUsage/MAP_WRITE}} usage.",
                        "",
                        "        Once the buffer is mapped, calls to {{GPUBuffer/getMappedRange()}} will return an",
                        "        {{ArrayBuffer}} containing the buffer's current values. Changes to the returned",
                        "        {{ArrayBuffer}} will be stored in the {{GPUBuffer}} after {{GPUBuffer/unmap()}} is called.",
                        "",
                        "        Note: Since the {{GPUBufferUsage/MAP_WRITE}} buffer usage may only be combined with the",
                        "        {{GPUBufferUsage/COPY_SRC}} buffer usage, mapping for writing can never return values",
                        "        produced by the GPU, and the returned {{ArrayBuffer}} will only ever contain the default",
                        "        initialized data (zeros) or data written by the webpage during a previous mapping."
                    ]
                }
            ]
        ],
        [
            "GPUTexture",
            [
                {
                    "target": "GPUTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>width</dfn>",
                        "    ::",
                        "        The width of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>height</dfn>",
                        "    ::",
                        "        The height of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>depthOrArrayLayers</dfn>",
                        "    ::",
                        "        The depth or layer count of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>mipLevelCount</dfn>",
                        "    ::",
                        "        The number of mip levels of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>sampleCount</dfn>",
                        "    ::",
                        "        The number of sample count of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>dimension</dfn>",
                        "    ::",
                        "        The dimension of the set of texel for each of this {{GPUTexture}}'s subresources.",
                        "",
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The format of this {{GPUTexture}}.",
                        "",
                        "    : <dfn>usage</dfn>",
                        "    ::",
                        "        The allowed usages for this {{GPUTexture}}."
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[size]]</dfn>, of type {{GPUExtent3D}}",
                        "    ::",
                        "        The size of the texture (same as the {{GPUTexture/width}}, {{GPUTexture/height}}, and",
                        "        {{GPUTexture/depthOrArrayLayers}} attributes).",
                        "",
                        "    : <dfn>\\[[viewFormats]]</dfn>, of type [=sequence=]&lt;{{GPUTextureFormat}}&gt;",
                        "    ::",
                        "        The set of {{GPUTextureFormat}}s that can be used {{GPUTextureViewDescriptor}}.{{GPUTextureViewDescriptor/format}}",
                        "        when creating views on this {{GPUTexture}}.",
                        "",
                        "    : <dfn>\\[[destroyed]]</dfn>, of type `boolean`, initially false",
                        "    ::",
                        "        If the texture is destroyed, it can no longer be used in any operation,",
                        "        and its underlying memory can be freed."
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>",
                        "    ::",
                        "        Destroys the {{GPUTexture}}.",
                        "",
                        "        <div algorithm=GPUTexture.destroy>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUTexture}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Set |this|.{{GPUTexture/[[destroyed]]}} to true.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createView(descriptor)</dfn>",
                        "    ::",
                        "        Creates a {{GPUTextureView}}.",
                        "",
                        "        <div class=note heading>",
                        "            By default {{GPUTexture/createView()}} will create a view with a dimension that can",
                        "            represent the entire texture. For example, calling {{GPUTexture/createView()}} without",
                        "            specifying a {{GPUTextureViewDescriptor/dimension}} on a {{GPUTextureDimension/\"2d\"}}",
                        "            texture with more than one layer will create a {{GPUTextureViewDimension/\"2d-array\"}}",
                        "            {{GPUTextureView}}, even if an {{GPUTextureViewDescriptor/arrayLayerCount}} of 1 is",
                        "            specified.",
                        "",
                        "            For textures created from sources where the layer count is unknown at the",
                        "            time of development it is recommended that calls to {{GPUTexture/createView()}} are provided",
                        "            with an explicit {{GPUTextureViewDescriptor/dimension}} to ensure shader compatibility.",
                        "        </div>",
                        "",
                        "        <div algorithm=GPUTexture.createView>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUTexture}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUTexture/createView(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPUTextureView}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** |view|, of type {{GPUTextureView}}.",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$Validate texture format required features$] of",
                        "                    |descriptor|.{{GPUTextureViewDescriptor/format}} with |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |view| be a new {{GPUTextureView}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |view|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. Set |descriptor| to the result of [$resolving GPUTextureViewDescriptor defaults$]",
                        "                    for |this| with |descriptor|.",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |view| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/aspect}} must be present in |this|.{{GPUTexture/format}}.",
                        "                        - If the |descriptor|.{{GPUTextureViewDescriptor/aspect}} is {{GPUTextureAspect/\"all\"}}:",
                        "                            - |descriptor|.{{GPUTextureViewDescriptor/format}} must equal either",
                        "                                    |this|.{{GPUTexture/format}} or one",
                        "                                    of the formats in |this|.{{GPUTexture/[[viewFormats]]}}.",
                        "",
                        "                            Otherwise:",
                        "",
                        "                            - |descriptor|.{{GPUTextureViewDescriptor/format}} must equal the result of [$resolving GPUTextureAspect$](",
                        "                                |this|.{{GPUTexture/format}},",
                        "                                |descriptor|.{{GPUTextureViewDescriptor/aspect}}).",
                        "",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/mipLevelCount}} must be &gt; 0.",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/baseMipLevel}} +",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/mipLevelCount}} must be &le;",
                        "                            |this|.{{GPUTexture/mipLevelCount}}.",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be &gt; 0.",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/baseArrayLayer}} +",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be &le;",
                        "                            the [$array layer count$] of |this|.",
                        "                        - If |this|.{{GPUTexture/sampleCount}} &gt; 1,",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/dimension}} must be {{GPUTextureViewDimension/\"2d\"}}.",
                        "                        - If |descriptor|.{{GPUTextureViewDescriptor/dimension}} is:",
                        "",
                        "                            <dl class=switch>",
                        "                                : {{GPUTextureViewDimension/\"1d\"}}",
                        "                                ::",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"1d\"}}.",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`.",
                        "",
                        "                                : {{GPUTextureViewDimension/\"2d\"}}",
                        "                                ::",
                        "",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`.",
                        "",
                        "                                : {{GPUTextureViewDimension/\"2d-array\"}}",
                        "                                ::",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.",
                        "",
                        "                                : {{GPUTextureViewDimension/\"cube\"}}",
                        "                                ::",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `6`.",
                        "                                    - |this|.{{GPUTexture/width}} must equal |this|.{{GPUTexture/height}}.",
                        "",
                        "                                : {{GPUTextureViewDimension/\"cube-array\"}}",
                        "                                ::",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be a multiple of `6`.",
                        "                                    - |this|.{{GPUTexture/width}} must equal |this|.{{GPUTexture/height}}.",
                        "",
                        "                                : {{GPUTextureViewDimension/\"3d\"}}",
                        "                                ::",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"3d\"}}.",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`."
                    ]
                }
            ]
        ],
        [
            "GPUTextureDescriptor",
            [
                {
                    "target": "GPUTextureDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>size</dfn>",
                        "    ::",
                        "        The width, height, and depth or layer count of the texture.",
                        "",
                        "    : <dfn>mipLevelCount</dfn>",
                        "    ::",
                        "        The number of mip levels the texture will contain.",
                        "",
                        "    : <dfn>sampleCount</dfn>",
                        "    ::",
                        "        The sample count of the texture. A {{GPUTextureDescriptor/sampleCount}} &gt; `1` indicates",
                        "        a multisampled texture.",
                        "",
                        "    : <dfn>dimension</dfn>",
                        "    ::",
                        "        Whether the texture is one-dimensional, an array of two-dimensional layers, or three-dimensional.",
                        "",
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The format of the texture.",
                        "",
                        "    : <dfn>usage</dfn>",
                        "    ::",
                        "        The allowed usages for the texture.",
                        "",
                        "    : <dfn>viewFormats</dfn>",
                        "    ::",
                        "        Specifies what view {{GPUTextureViewDescriptor/format}} values will be allowed when calling",
                        "        {{GPUTexture/createView()}} on this texture (in addition to the texture's actual",
                        "        {{GPUTextureDescriptor/format}}).",
                        "",
                        "        <div class=note heading>",
                        "            Adding a format to this list may have a significant performance impact, so it is best",
                        "            to avoid adding formats unnecessarily.",
                        "",
                        "            The actual performance impact is highly dependent on the target system; developers must",
                        "            test various systems to find out the impact on their particular application.",
                        "            For example, on some systems any texture with a {{GPUTextureDescriptor/format}} or",
                        "            {{GPUTextureDescriptor/viewFormats}} entry including",
                        "            {{GPUTextureFormat/\"rgba8unorm-srgb\"}} will perform less optimally than a",
                        "            {{GPUTextureFormat/\"rgba8unorm\"}} texture which does not.",
                        "            Similar caveats exist for other formats and pairs of formats on other systems.",
                        "        </div>",
                        "",
                        "        Formats in this list must be [=texture view format compatible=] with the texture format.",
                        "",
                        "        <div algorithm>",
                        "            Two {{GPUTextureFormat}}s |format| and |viewFormat| are <dfn dfn for=\"\">texture view format compatible</dfn> if:",
                        "",
                        "            - |format| equals |viewFormat|, or",
                        "            - |format| and |viewFormat| differ only in whether they are `srgb` formats (have the `-srgb` suffix).",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUTextureDimension",
            [
                {
                    "target": "GPUTextureDimension",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"1d\"</dfn>",
                        "    ::",
                        "        Specifies a texture that has one dimension, width.",
                        "",
                        "    : <dfn>\"2d\"</dfn>",
                        "    ::",
                        "        Specifies a texture that has a width and height, and may have layers. Only",
                        "        {{GPUTextureDimension/\"2d\"}} textures may have mipmaps, be multisampled, use a compressed or",
                        "        depth/stencil format, and be used as a render attachment.",
                        "",
                        "    : <dfn>\"3d\"</dfn>",
                        "    ::",
                        "        Specifies a texture that has a width, height, and depth."
                    ]
                }
            ]
        ],
        [
            "GPUTextureUsage",
            [
                {
                    "target": "GPUTextureUsage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>COPY_SRC</dfn>",
                        "    ::",
                        "        The texture can be used as the source of a copy operation. (Examples: as the `source`",
                        "        argument of a {{GPUCommandEncoder/copyTextureToTexture()}} or",
                        "        {{GPUCommandEncoder/copyTextureToBuffer()}} call.)",
                        "",
                        "    : <dfn>COPY_DST</dfn>",
                        "    ::",
                        "        The texture can be used as the destination of a copy or write operation. (Examples: as the",
                        "        `destination` argument of a {{GPUCommandEncoder/copyTextureToTexture()}} or",
                        "        {{GPUCommandEncoder/copyBufferToTexture()}} call, or as the target of a",
                        "        {{GPUQueue/writeTexture()}} call.)",
                        "",
                        "    : <dfn>TEXTURE_BINDING</dfn>",
                        "    ::",
                        "        The texture can be bound for use as a sampled texture in a shader (Example: as a bind group",
                        "        entry for a {{GPUTextureBindingLayout}}.)",
                        "",
                        "    : <dfn>STORAGE_BINDING</dfn>",
                        "    ::",
                        "        The texture can be bound for use as a storage texture in a shader (Example: as a bind group",
                        "        entry for a {{GPUStorageTextureBindingLayout}}.)",
                        "",
                        "    : <dfn>RENDER_ATTACHMENT</dfn>",
                        "    ::",
                        "        The texture can be used as a color or depth/stencil attachment in a render pass.",
                        "        (Example: as a {{GPURenderPassColorAttachment}}.{{GPURenderPassColorAttachment/view}} or",
                        "        {{GPURenderPassDepthStencilAttachment}}.{{GPURenderPassDepthStencilAttachment/view}}.)"
                    ]
                }
            ]
        ],
        [
            "GPUTextureView",
            [
                {
                    "target": "GPUTextureView",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[texture]]</dfn>",
                        "    ::",
                        "        The {{GPUTexture}} into which this is a view.",
                        "",
                        "    : <dfn>\\[[descriptor]]</dfn>",
                        "    ::",
                        "        The {{GPUTextureViewDescriptor}} describing this texture view.",
                        "",
                        "        All optional fields of {{GPUTextureViewDescriptor}} are defined.",
                        "",
                        "    : <dfn>\\[[renderExtent]]</dfn>",
                        "    ::",
                        "        For renderable views, this is the effective {{GPUExtent3DDict}} for rendering.",
                        "",
                        "        Note: this extent depends on the {{GPUTextureViewDescriptor/baseMipLevel}}."
                    ]
                }
            ]
        ],
        [
            "GPUTextureViewDescriptor",
            [
                {
                    "target": "GPUTextureViewDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The format of the texture view. Must be either the {{GPUTextureDescriptor/format}} of the",
                        "        texture or one of the {{GPUTextureDescriptor/viewFormats}} specified during its creation.",
                        "",
                        "    : <dfn>dimension</dfn>",
                        "    ::",
                        "        The dimension to view the texture as.",
                        "",
                        "    : <dfn>aspect</dfn>",
                        "    ::",
                        "        Which {{GPUTextureAspect|aspect(s)}} of the texture are accessible to the texture view.",
                        "",
                        "    : <dfn>baseMipLevel</dfn>",
                        "    ::",
                        "        The first (most detailed) mipmap level accessible to the texture view.",
                        "",
                        "    : <dfn>mipLevelCount</dfn>",
                        "    ::",
                        "        How many mipmap levels, starting with {{GPUTextureViewDescriptor/baseMipLevel}}, are accessible to",
                        "        the texture view.",
                        "",
                        "    : <dfn>baseArrayLayer</dfn>",
                        "    ::",
                        "        The index of the first array layer accessible to the texture view.",
                        "",
                        "    : <dfn>arrayLayerCount</dfn>",
                        "    ::",
                        "        How many array layers, starting with {{GPUTextureViewDescriptor/baseArrayLayer}}, are accessible",
                        "        to the texture view."
                    ]
                }
            ]
        ],
        [
            "GPUTextureViewDimension",
            [
                {
                    "target": "GPUTextureViewDimension",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"1d\"</dfn>",
                        "    ::",
                        "        The texture is viewed as a 1-dimensional image.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_1d`",
                        "        - `texture_storage_1d`",
                        "",
                        "    : <dfn>\"2d\"</dfn>",
                        "    ::",
                        "        The texture is viewed as a single 2-dimensional image.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_2d`",
                        "        - `texture_storage_2d`",
                        "        - `texture_multisampled_2d`",
                        "        - `texture_depth_2d`",
                        "        - `texture_depth_multisampled_2d`",
                        "",
                        "    : <dfn>\"2d-array\"</dfn>",
                        "    ::",
                        "        The texture view is viewed as an array of 2-dimensional images.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_2d_array`",
                        "        - `texture_storage_2d_array`",
                        "        - `texture_depth_2d_array`",
                        "",
                        "    : <dfn>\"cube\"</dfn>",
                        "    ::",
                        "        The texture is viewed as a cubemap.",
                        "        The view has 6 array layers, corresponding to the [+X, -X, +Y, -Y, +Z, -Z] faces of the cube.",
                        "        Sampling is done seamlessly across the faces of the cubemap.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_cube`",
                        "        - `texture_depth_cube`",
                        "",
                        "    : <dfn>\"cube-array\"</dfn>",
                        "    ::",
                        "        The texture is viewed as a packed array of `n` cubemaps,",
                        "        each with 6 array layers corresponding to the [+X, -X, +Y, -Y, +Z, -Z] faces of the cube.",
                        "        Sampling is done seamlessly across the faces of the cubemaps.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_cube_array`",
                        "        - `texture_depth_cube_array`",
                        "",
                        "    : <dfn>\"3d\"</dfn>",
                        "    ::",
                        "        The texture is viewed as a 3-dimensional image.",
                        "",
                        "        Corresponding WGSL types:",
                        "",
                        "        - `texture_3d`",
                        "        - `texture_storage_3d`"
                    ]
                }
            ]
        ],
        [
            "GPUTextureAspect",
            [
                {
                    "target": "GPUTextureAspect",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"all\"</dfn>",
                        "    ::",
                        "        All available aspects of the texture format will be accessible to the texture view. For",
                        "        color formats the color aspect will be accessible. For",
                        "        [=combined depth-stencil format=]s both the depth and stencil aspects will be accessible.",
                        "        [=Depth-or-stencil format=]s with a single aspect will only make that aspect accessible.",
                        "",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/color=], [=aspect/depth=], [=aspect/stencil=]].",
                        "",
                        "    : <dfn>\"stencil-only\"</dfn>",
                        "    ::",
                        "        Only the stencil aspect of a [=depth-or-stencil format=] format will be accessible to the",
                        "        texture view.",
                        "",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/stencil=]].",
                        "",
                        "    : <dfn>\"depth-only\"</dfn>",
                        "    ::",
                        "        Only the depth aspect of a [=depth-or-stencil format=] format will be accessible to the",
                        "        texture view.",
                        "",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/depth=]]."
                    ]
                }
            ]
        ],
        [
            "GPUExternalTexture",
            [
                {
                    "target": "GPUExternalTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[expired]]</dfn>, of type `boolean`",
                        "    ::",
                        "        Indicates whether the object has expired (can no longer be used).",
                        "        Initially set to `false`.",
                        "",
                        "        Note:",
                        "        Unlike similar `\\[[destroyed]]` slots, this can change from `true` back to `false`.",
                        "",
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUExternalTextureDescriptor}}",
                        "    ::",
                        "        The descriptor with which the texture was created."
                    ]
                }
            ]
        ],
        [
            "GPUSampler",
            [
                {
                    "target": "GPUSampler",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUSamplerDescriptor}}, readonly",
                        "    ::",
                        "        The {{GPUSamplerDescriptor}} with which the {{GPUSampler}} was created.",
                        "",
                        "    : <dfn>\\[[isComparison]]</dfn>, of type {{boolean}}",
                        "    ::",
                        "        Whether the {{GPUSampler}} is used as a comparison sampler.",
                        "",
                        "    : <dfn>\\[[isFiltering]]</dfn>, of type {{boolean}}",
                        "    ::",
                        "        Whether the {{GPUSampler}} weights multiple samples of a texture."
                    ]
                }
            ]
        ],
        [
            "GPUSamplerDescriptor",
            [
                {
                    "target": "GPUSamplerDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>addressModeU</dfn>",
                        "    : <dfn>addressModeV</dfn>",
                        "    : <dfn>addressModeW</dfn>",
                        "    ::",
                        "        Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth",
                        "        coordinates, respectively.",
                        "",
                        "    : <dfn>magFilter</dfn>",
                        "    ::",
                        "        Specifies the sampling behavior when the sample footprint is smaller than or equal to one",
                        "        texel.",
                        "",
                        "    : <dfn>minFilter</dfn>",
                        "    ::",
                        "        Specifies the sampling behavior when the sample footprint is larger than one texel.",
                        "",
                        "    : <dfn>mipmapFilter</dfn>",
                        "    ::",
                        "        Specifies behavior for sampling between mipmap levels.",
                        "",
                        "    : <dfn>lodMinClamp</dfn>",
                        "    : <dfn>lodMaxClamp</dfn>",
                        "    ::",
                        "        Specifies the minimum and maximum levels of detail, respectively, used internally when",
                        "        sampling a texture.",
                        "",
                        "    : <dfn>compare</dfn>",
                        "    ::",
                        "        When provided the sampler will be a comparison sampler with the specified",
                        "        {{GPUCompareFunction}}.",
                        "",
                        "        Note: Comparison samplers may use filtering, but the sampling results will be",
                        "        implementation-dependent and may differ from the normal filtering rules.",
                        "",
                        "    : <dfn>maxAnisotropy</dfn>",
                        "    ::",
                        "        Specifies the maximum anisotropy value clamp used by the sampler.",
                        "",
                        "        Note: Most implementations support {{GPUSamplerDescriptor/maxAnisotropy}} values in range",
                        "        between 1 and 16, inclusive. The used value of {{GPUSamplerDescriptor/maxAnisotropy}} will",
                        "        be clamped to the maximum value that the platform supports."
                    ]
                }
            ]
        ],
        [
            "GPUAddressMode",
            [
                {
                    "target": "GPUAddressMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"clamp-to-edge\"</dfn>",
                        "    ::",
                        "        Texture coordinates are clamped between 0.0 and 1.0, inclusive.",
                        "",
                        "    : <dfn>\"repeat\"</dfn>",
                        "    ::",
                        "        Texture coordinates wrap to the other side of the texture.",
                        "",
                        "    : <dfn>\"mirror-repeat\"</dfn>",
                        "    ::",
                        "        Texture coordinates wrap to the other side of the texture, but the texture is flipped",
                        "        when the integer part of the coordinate is odd."
                    ]
                }
            ]
        ],
        [
            "GPUFilterMode",
            [
                {
                    "target": "GPUFilterMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"nearest\"</dfn>",
                        "    ::",
                        "        Return the value of the texel nearest to the texture coordinates.",
                        "",
                        "    : <dfn>\"linear\"</dfn>",
                        "    ::",
                        "        Select two texels in each dimension and return a linear interpolation between their values."
                    ]
                }
            ]
        ],
        [
            "GPUCompareFunction",
            [
                {
                    "target": "GPUCompareFunction",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"never\"</dfn>",
                        "    ::",
                        "        Comparison tests never pass.",
                        "",
                        "    : <dfn>\"less\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is less than the sampled value.",
                        "",
                        "    : <dfn>\"equal\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is equal to the sampled value.",
                        "",
                        "    : <dfn>\"less-equal\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is less than or equal to the sampled value.",
                        "",
                        "    : <dfn>\"greater\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is greater than the sampled value.",
                        "",
                        "    : <dfn>\"not-equal\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is not equal to the sampled value.",
                        "",
                        "    : <dfn>\"greater-equal\"</dfn>",
                        "    ::",
                        "        A provided value passes the comparison test if it is greater than or equal to the sampled value.",
                        "",
                        "    : <dfn>\"always\"</dfn>",
                        "    ::",
                        "        Comparison tests always pass."
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupLayout",
            [
                {
                    "target": "GPUBindGroupLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUBindGroupLayoutDescriptor}}",
                        "    ::"
                    ]
                },
                {
                    "target": "GPUBindGroupLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[entryMap]]</dfn>, of type [=ordered map=]&lt;{{GPUSize32}}, {{GPUBindGroupLayoutEntry}}&gt;",
                        "    ::",
                        "        The map of binding indices pointing to the {{GPUBindGroupLayoutEntry}}s,",
                        "        which this {{GPUBindGroupLayout}} describes.",
                        "",
                        "    : <dfn>\\[[dynamicOffsetCount]]</dfn>, of type {{GPUSize32}}",
                        "    ::",
                        "        The number of buffer bindings with dynamic offsets in this {{GPUBindGroupLayout}}.",
                        "",
                        "    : <dfn>\\[[exclusivePipeline]]</dfn>, of type {{GPUPipelineBase}}?, initially `null`",
                        "    ::",
                        "        The pipeline that created this {{GPUBindGroupLayout}}, if it was created as part of a",
                        "        [[#default-pipeline-layout|default pipeline layout]]. If not `null`, {{GPUBindGroup}}s",
                        "        created with this {{GPUBindGroupLayout}} can only be used with the specified",
                        "        {{GPUPipelineBase}}."
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupLayoutEntry",
            [
                {
                    "target": "GPUBindGroupLayoutEntry",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>binding</dfn>",
                        "    ::",
                        "        A unique identifier for a resource binding within the {{GPUBindGroupLayout}}, corresponding",
                        "        to a {{GPUBindGroupEntry/binding|GPUBindGroupEntry.binding}} and a [=@binding=]",
                        "        attribute in the {{GPUShaderModule}}.",
                        "",
                        "    : <dfn>visibility</dfn>",
                        "    ::",
                        "        A bitset of the members of {{GPUShaderStage}}.",
                        "        Each set bit indicates that a {{GPUBindGroupLayoutEntry}}'s resource",
                        "        will be accessible from the associated shader stage.",
                        "",
                        "    : <dfn>buffer</dfn>",
                        "    ::",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}",
                        "        is {{GPUBufferBinding}}.",
                        "",
                        "    : <dfn>sampler</dfn>",
                        "    ::",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}",
                        "        is {{GPUSampler}}.",
                        "",
                        "    : <dfn>texture</dfn>",
                        "    ::",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}",
                        "        is {{GPUTextureView}}.",
                        "",
                        "    : <dfn>storageTexture</dfn>",
                        "    ::",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}",
                        "        is {{GPUTextureView}}.",
                        "",
                        "    : <dfn>externalTexture</dfn>",
                        "    ::",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}",
                        "        is {{GPUExternalTexture}}."
                    ]
                }
            ]
        ],
        [
            "GPUShaderStage",
            [
                {
                    "target": "GPUShaderStage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>VERTEX</dfn>",
                        "    ::",
                        "        The bind group entry will be accessible to vertex shaders.",
                        "",
                        "    : <dfn>FRAGMENT</dfn>",
                        "    ::",
                        "        The bind group entry will be accessible to fragment shaders.",
                        "",
                        "    : <dfn>COMPUTE</dfn>",
                        "    ::",
                        "        The bind group entry will be accessible to compute shaders."
                    ]
                }
            ]
        ],
        [
            "GPUBufferBindingLayout",
            [
                {
                    "target": "GPUBufferBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>",
                        "    ::",
                        "        Indicates the type required for buffers bound to this bindings.",
                        "",
                        "    : <dfn>hasDynamicOffset</dfn>",
                        "    ::",
                        "        Indicates whether this binding requires a dynamic offset.",
                        "",
                        "    : <dfn>minBindingSize</dfn>",
                        "    ::",
                        "        Indicates the minimum {{GPUBufferBinding/size}} of a buffer binding used with this bind point.",
                        "",
                        "        Bindings are always validated against this size in {{GPUDevice/createBindGroup()}}.",
                        "",
                        "        If this *is not* `0`, pipeline creation additionally [$validating shader binding|validates$]",
                        "        that this value &ge; the [=minimum buffer binding size=] of the variable.",
                        "",
                        "        If this *is* `0`, it is ignored by pipeline creation, and instead draw/dispatch commands",
                        "        [$Validate encoder bind groups|validate$] that each binding in the {{GPUBindGroup}}",
                        "        satisfies the [=minimum buffer binding size=] of the variable.",
                        "",
                        "        Note:",
                        "        Similar execution-time validation is theoretically possible for other",
                        "        binding-related fields specified for early validation, like",
                        "        {{GPUTextureBindingLayout/sampleType}} and {{GPUStorageTextureBindingLayout/format}},",
                        "        which currently can only be validated in pipeline creation.",
                        "        However, such execution-time validation could be costly or unnecessarily complex, so it is",
                        "        available only for {{GPUBufferBindingLayout/minBindingSize}} which is expected to have the",
                        "        most ergonomic impact."
                    ]
                }
            ]
        ],
        [
            "GPUSamplerBindingLayout",
            [
                {
                    "target": "GPUSamplerBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>",
                        "    ::",
                        "        Indicates the required type of a sampler bound to this bindings."
                    ]
                }
            ]
        ],
        [
            "GPUTextureBindingLayout",
            [
                {
                    "target": "GPUTextureBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>sampleType</dfn>",
                        "    ::",
                        "        Indicates the type required for texture views bound to this binding.",
                        "",
                        "    : <dfn>viewDimension</dfn>",
                        "    ::",
                        "        Indicates the required {{GPUTextureViewDescriptor/dimension}} for texture views bound to",
                        "        this binding.",
                        "",
                        "    : <dfn>multisampled</dfn>",
                        "    ::",
                        "        Indicates whether or not texture views bound to this binding must be multisampled."
                    ]
                }
            ]
        ],
        [
            "GPUStorageTextureBindingLayout",
            [
                {
                    "target": "GPUStorageTextureBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>access</dfn>",
                        "    ::",
                        "        The access mode for this binding, indicating readability and writability.",
                        "",
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The required {{GPUTextureViewDescriptor/format}} of texture views bound to this binding.",
                        "",
                        "    : <dfn>viewDimension</dfn>",
                        "    ::",
                        "        Indicates the required {{GPUTextureViewDescriptor/dimension}} for texture views bound to",
                        "        this binding."
                    ]
                }
            ]
        ],
        [
            "GPUBindGroup",
            [
                {
                    "target": "GPUBindGroup",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPUBindGroupLayout}}, readonly",
                        "    ::",
                        "        The {{GPUBindGroupLayout}} associated with this {{GPUBindGroup}}.",
                        "",
                        "    : <dfn>\\[[entries]]</dfn>, of type [=sequence=]&lt;{{GPUBindGroupEntry}}&gt;, readonly",
                        "    ::",
                        "        The set of {{GPUBindGroupEntry}}s this {{GPUBindGroup}} describes.",
                        "",
                        "    : <dfn>\\[[usedResources]]</dfn>, of type [=ordered map=]&lt;[=subresource=], [=list=]&lt;[=internal usage=]&gt;&gt;, readonly",
                        "    ::",
                        "        The set of buffer and texture [=subresource=]s used by this bind group,",
                        "        associated with lists of the [=internal usage=] flags."
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupDescriptor",
            [
                {
                    "target": "GPUBindGroupDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>",
                        "    ::",
                        "        The {{GPUBindGroupLayout}} the entries of this bind group will conform to.",
                        "",
                        "    : <dfn>entries</dfn>",
                        "    ::",
                        "        A list of entries describing the resources to expose to the shader for each binding",
                        "        described by the {{GPUBindGroupDescriptor/layout}}."
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupEntry",
            [
                {
                    "target": "GPUBindGroupEntry",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>binding</dfn>",
                        "    ::",
                        "        A unique identifier for a resource binding within the {{GPUBindGroup}}, corresponding to a",
                        "        {{GPUBindGroupLayoutEntry/binding|GPUBindGroupLayoutEntry.binding}} and a [=@binding=]",
                        "        attribute in the {{GPUShaderModule}}.",
                        "",
                        "    : <dfn>resource</dfn>",
                        "    ::",
                        "        The resource to bind, which may be a {{GPUSampler}}, {{GPUTextureView}},",
                        "        {{GPUExternalTexture}}, or {{GPUBufferBinding}}."
                    ]
                }
            ]
        ],
        [
            "GPUBufferBinding",
            [
                {
                    "target": "GPUBufferBinding",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>buffer</dfn>",
                        "    ::",
                        "        The {{GPUBuffer}} to bind.",
                        "",
                        "    : <dfn>offset</dfn>",
                        "    ::",
                        "        The offset, in bytes, from the beginning of {{GPUBufferBinding/buffer}} to the",
                        "        beginning of the range exposed to the shader by the buffer binding.",
                        "",
                        "    : <dfn>size</dfn>",
                        "    ::",
                        "        The size, in bytes, of the buffer binding.",
                        "        If not [=map/exist|provided=], specifies the range starting at",
                        "        {{GPUBufferBinding/offset}} and ending at the end of {{GPUBufferBinding/buffer}}."
                    ]
                }
            ]
        ],
        [
            "GPUPipelineLayout",
            [
                {
                    "target": "GPUPipelineLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[bindGroupLayouts]]</dfn>, of type [=list=]&lt;{{GPUBindGroupLayout}}&gt;",
                        "    ::",
                        "        The {{GPUBindGroupLayout}} objects provided at creation in {{GPUPipelineLayoutDescriptor/bindGroupLayouts|GPUPipelineLayoutDescriptor.bindGroupLayouts}}."
                    ]
                }
            ]
        ],
        [
            "GPUPipelineLayoutDescriptor",
            [
                {
                    "target": "GPUPipelineLayoutDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>bindGroupLayouts</dfn>",
                        "    ::",
                        "        A list of {{GPUBindGroupLayout}}s the pipeline will use. Each element corresponds to a",
                        "        [=@group=] attribute in the {{GPUShaderModule}}, with the `N`th element corresponding with",
                        "        `@group(N)`."
                    ]
                }
            ]
        ],
        [
            "GPUShaderModuleDescriptor",
            [
                {
                    "target": "GPUShaderModuleDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>code</dfn>",
                        "    ::",
                        "        The <a href=\"https://gpuweb.github.io/gpuweb/wgsl/\">WGSL</a> source code for the shader",
                        "        module.",
                        "",
                        "    : <dfn>sourceMap</dfn>",
                        "    ::",
                        "        If defined MAY be interpreted as a source-map-v3 format.",
                        "",
                        "        Source maps are optional, but serve as a standardized way to support dev-tool",
                        "        integration such as source-language debugging [[SourceMap]].",
                        "        WGSL names (identifiers) in source maps follow the rules defined in [=WGSL identifier",
                        "        comparison=].",
                        "",
                        "    : <dfn>compilationHints</dfn>",
                        "    ::",
                        "        A list of {{GPUShaderModuleCompilationHint}}s.",
                        "",
                        "        Any hint provided by an application **should** contain information about one entry point of",
                        "        a pipeline that will eventually be created from the entry point.",
                        "",
                        "        Implementations **should** use any information present in the {{GPUShaderModuleCompilationHint}}",
                        "        to perform as much compilation as is possible within {{GPUDevice/createShaderModule()}}.",
                        "",
                        "        Aside from type-checking, these hints are not validated in any way.",
                        "",
                        "        <div class=note heading>",
                        "            Supplying information in {{GPUShaderModuleDescriptor/compilationHints}} does not have any",
                        "            observable effect, other than performance. It may be detrimental to performance to",
                        "            provide hints for pipelines that never end up being created.",
                        "",
                        "            Because a single shader module can hold",
                        "            multiple entry points, and multiple pipelines can be created from a single shader",
                        "            module, it can be more performant for an implementation to do as much compilation as",
                        "            possible once in {{GPUDevice/createShaderModule()}} rather than multiple times in",
                        "            the multiple calls to {{GPUDevice/createComputePipeline()}} or",
                        "            {{GPUDevice/createRenderPipeline()}}.",
                        "        </div>",
                        "",
                        "        Note:",
                        "        Hints are not validated in an observable way, but user agents **may** surface identifiable",
                        "        errors (like unknown entry point names or incompatible pipeline layouts) to developers,",
                        "        for example in the browser developer console."
                    ]
                }
            ]
        ],
        [
            "GPUShaderModuleCompilationHint",
            [
                {
                    "target": "GPUShaderModuleCompilationHint",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>",
                        "    ::",
                        "        A {{GPUPipelineLayout}} that the {{GPUShaderModule}} may be used with in a future",
                        "        {{GPUDevice/createComputePipeline()}} or {{GPUDevice/createRenderPipeline()}} call.",
                        "        If set to {{GPUAutoLayoutMode/\"auto\"}} the layout will be the [$default pipeline layout$]",
                        "        for the entry point associated with this hint will be used."
                    ]
                }
            ]
        ],
        [
            "GPUCompilationMessage",
            [
                {
                    "target": "GPUCompilationMessage",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>message</dfn>",
                        "    ::",
                        "        The human-readable, [=localizable text=] for this compilation message.",
                        "",
                        "        Note: The {{GPUCompilationMessage/message}} should follow the [=best practices for language",
                        "        and direction information=]. This includes making use of any future standards which may",
                        "        emerge regarding the reporting of string language and direction metadata.",
                        "",
                        "        <p class=\"note editorial\"><span class=marker>Editorial note:</span>",
                        "        At the time of this writing, no language/direction recommendation is available that provides",
                        "        compatibility and consistency with legacy APIs, but when there is, adopt it formally.",
                        "",
                        "    : <dfn>type</dfn>",
                        "    ::",
                        "        The severity level of the message.",
                        "",
                        "        If the {{GPUCompilationMessage/type}} is {{GPUCompilationMessageType/\"error\"}}, it",
                        "        corresponds to a [=shader-creation error=].",
                        "",
                        "    : <dfn>lineNum</dfn>",
                        "    ::",
                        "        The line number in the shader {{GPUShaderModuleDescriptor/code}} the",
                        "        {{GPUCompilationMessage/message}} corresponds to. Value is one-based, such that a lineNum of",
                        "        `1` indicates the first line of the shader {{GPUShaderModuleDescriptor/code}}. Lines are",
                        "        delimited by [=line breaks=].",
                        "",
                        "        If the {{GPUCompilationMessage/message}} corresponds to a substring this points to",
                        "        the line on which the substring begins. Must be `0` if the {{GPUCompilationMessage/message}}",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.",
                        "",
                        "    : <dfn>linePos</dfn>",
                        "    ::",
                        "        The offset, in UTF-16 code units, from the beginning of line {{GPUCompilationMessage/lineNum}}",
                        "        of the shader {{GPUShaderModuleDescriptor/code}} to the point or beginning of the substring",
                        "        that the {{GPUCompilationMessage/message}} corresponds to. Value is one-based, such that a",
                        "        {{GPUCompilationMessage/linePos}} of `1` indicates the first code unit of the line.",
                        "",
                        "        If {{GPUCompilationMessage/message}} corresponds to a substring this points to the",
                        "        first UTF-16 code unit of the substring. Must be `0` if the {{GPUCompilationMessage/message}}",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.",
                        "",
                        "    : <dfn>offset</dfn>",
                        "    ::",
                        "        The offset from the beginning of the shader {{GPUShaderModuleDescriptor/code}} in UTF-16",
                        "        code units to the point or beginning of the substring that {{GPUCompilationMessage/message}}",
                        "        corresponds to. Must reference the same position as {{GPUCompilationMessage/lineNum}} and",
                        "        {{GPUCompilationMessage/linePos}}. Must be `0` if the {{GPUCompilationMessage/message}}",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.",
                        "",
                        "    : <dfn>length</dfn>",
                        "    ::",
                        "        The number of UTF-16 code units in the substring that {{GPUCompilationMessage/message}}",
                        "        corresponds to. If the message does not correspond with a substring then",
                        "        {{GPUCompilationMessage/length}} must be 0."
                    ]
                }
            ]
        ],
        [
            "GPUShaderModule",
            [
                {
                    "target": "GPUShaderModule",
                    "type": "method",
                    "lines": [
                        "    : <dfn>getCompilationInfo()</dfn>",
                        "    ::",
                        "        Returns any messages generated during the {{GPUShaderModule}}'s compilation.",
                        "",
                        "        The locations, order, and contents of messages are implementation-defined.",
                        "        In particular, messages may not be ordered by {{GPUCompilationMessage/lineNum}}.",
                        "",
                        "        <div algorithm=GPUShaderModule.getCompilationInfo>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUShaderModule}} this",
                        "",
                        "                **Returns:** {{Promise}}&lt;{{GPUCompilationInfo}}&gt;",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].",
                        "                1. Let |promise| be [=a new promise=].",
                        "                1. Issue the |synchronization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |promise|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |synchronization steps|:",
                        "",
                        "                1. When the [=device timeline=] becomes informed that [=shader module creation=] has",
                        "                    completed for |this|:",
                        "                    1. Let |messages| be a list of any errors, warnings, or informational messages",
                        "                        generated during [=shader module creation=] for |this|.",
                        "                    1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.",
                        "            </div>",
                        "            <div data-timeline=content>",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |info| be a new {{GPUCompilationInfo}}.",
                        "                1. For each |message| in |messages|:",
                        "                    1. Let |m| be a new {{GPUCompilationMessage}}.",
                        "                    1. Set |m|.{{GPUCompilationMessage/message}} to be the text of |message|.",
                        "                    1.",
                        "                        <dl class=switch>",
                        "                            : If |message| is a [=shader-creation error=]:",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to",
                        "                                {{GPUCompilationMessageType/\"error\"}}",
                        "                            : If |message| is a warning:",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to",
                        "                                {{GPUCompilationMessageType/\"warning\"}}",
                        "                            : Otherwise:",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to",
                        "                                {{GPUCompilationMessageType/\"info\"}}"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineError",
            [
                {
                    "target": "GPUPipelineError",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>reason</dfn>",
                        "    ::",
                        "        A read-only [=slot-backed attribute=] exposing the type of error encountered in pipeline creation",
                        "        as a <dfn enum for=\"\">GPUPipelineErrorReason</dfn>:",
                        "",
                        "        <ul dfn-type=enum-value dfn-for=GPUPipelineErrorReason>",
                        "            - <dfn>\"validation\"</dfn>: A [$validation error$].",
                        "            - <dfn>\"internal\"</dfn>: An [$internal error$].",
                        "        </ul>"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineDescriptorBase",
            [
                {
                    "target": "GPUPipelineDescriptorBase",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>",
                        "    ::",
                        "        The {{GPUPipelineLayout}} for this pipeline, or {{GPUAutoLayoutMode/\"auto\"}} to generate",
                        "        the pipeline layout automatically.",
                        "",
                        "        Note: If {{GPUAutoLayoutMode/\"auto\"}} is used the pipeline cannot share {{GPUBindGroup}}s",
                        "        with any other pipelines."
                    ]
                }
            ]
        ],
        [
            "GPUPipelineBase",
            [
                {
                    "target": "GPUPipelineBase",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type `GPUPipelineLayout`",
                        "    ::",
                        "        The definition of the layout of resources which can be used with `this`."
                    ]
                },
                {
                    "target": "GPUPipelineBase",
                    "type": "method",
                    "lines": [
                        "    : <dfn>getBindGroupLayout(index)</dfn>",
                        "    ::",
                        "        Gets a {{GPUBindGroupLayout}} that is compatible with the {{GPUPipelineBase}}'s",
                        "        {{GPUBindGroupLayout}} at `index`.",
                        "",
                        "        <div algorithm=GPUPipelineBase.getBindGroupLayout>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUPipelineBase}} |this|",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUPipelineBase/getBindGroupLayout(index)\">",
                        "                    |index|: Index into the pipeline layout's {{GPUPipelineLayout/[[bindGroupLayouts]]}}",
                        "                        sequence.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUBindGroupLayout}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |layout| be a new {{GPUBindGroupLayout}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |layout|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. If any of the following conditions are unsatisfied",
                        "                    [$generate a validation error$], make |layout| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| is [=valid=].",
                        "                        - |index| &lt; the [=list/size=] of",
                        "                            |this|.{{GPUPipelineBase/[[layout]]}}.{{GPUPipelineLayout/[[bindGroupLayouts]]}}",
                        "                    </div>",
                        "",
                        "                1. Initialize |layout| so it is a copy of",
                        "                    |this|.{{GPUPipelineBase/[[layout]]}}.{{GPUPipelineLayout/[[bindGroupLayouts]]}}[|index|].",
                        "",
                        "                    Note: {{GPUBindGroupLayout}} is only ever used by-value, not by-reference,",
                        "                    so this is equivalent to returning the same internal object in a new wrapper.",
                        "                    A new {{GPUBindGroupLayout}} wrapper is returned each time to avoid a round-trip",
                        "                    between the [=Content timeline=] and the [=Device timeline=].",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUProgrammableStage",
            [
                {
                    "target": "GPUProgrammableStage",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>module</dfn>",
                        "    ::",
                        "        The {{GPUShaderModule}} containing the code that this programmable stage will execute.",
                        "",
                        "    : <dfn>entryPoint</dfn>",
                        "    ::",
                        "        The name of the function in {{GPUProgrammableStage/module}} that this stage will use to",
                        "        perform its work.",
                        "",
                        "        NOTE: Since the {{GPUProgrammableStage/entryPoint}} dictionary member is",
                        "        not required, the consumer of a {{GPUProgrammableStage}} must use the",
                        "        \"[$get the entry point$]\" algorithm to determine which entry point",
                        "        it refers to.",
                        "",
                        "    : <dfn>constants</dfn>",
                        "    ::",
                        "        Specifies the values of [=pipeline-overridable=] constants in the shader module",
                        "        {{GPUProgrammableStage/module}}.",
                        "",
                        "        Each such [=pipeline-overridable=] constant is uniquely identified by a single",
                        "        [=pipeline-overridable constant identifier string=], representing the [=pipeline",
                        "        constant ID=] of the constant if its declaration specifies one, and otherwise the",
                        "        constant's identifier name.",
                        "",
                        "        The key of each key-value pair must equal the",
                        "        [=pipeline-overridable constant identifier string|identifier string=]",
                        "        of one such constant, with the comparison performed",
                        "        according to the rules for [=WGSL identifier comparison=].",
                        "        When the pipeline is executed, that constant will have the specified value.",
                        "",
                        "        Values are specified as <dfn typedef for=\"\">GPUPipelineConstantValue</dfn>, which is a {{double}}.",
                        "        They are converted [$to WGSL type$] of the pipeline-overridable constant (`bool`/`i32`/`u32`/`f32`/`f16`).",
                        "        If conversion fails, a validation error is generated.",
                        "",
                        "        <div class=example>",
                        "            Pipeline-overridable constants defined in WGSL:",
                        "",
                        "            <pre highlight=wgsl>",
                        "                @id(0)      override has_point_light: bool = true;  // Algorithmic control.",
                        "                @id(1200)   override specular_param: f32 = 2.3;     // Numeric control.",
                        "                @id(1300)   override gain: f32;                     // Must be overridden.",
                        "                            override width: f32 = 0.0;              // Specifed at the API level",
                        "                                                                    //   using the name \"width\".",
                        "                            override depth: f32;                    // Specifed at the API level",
                        "                                                                    //   using the name \"depth\".",
                        "                                                                    //   Must be overridden.",
                        "                            override height = 2 * depth;            // The default value",
                        "                                                                    // (if not set at the API level),",
                        "                                                                    // depends on another",
                        "                                                                    // overridable constant.",
                        "            </pre>",
                        "",
                        "            Corresponding JavaScript code, providing only the overrides which are required",
                        "            (have no defaults):",
                        "",
                        "            <pre highlight=js>",
                        "                {",
                        "                    // ...",
                        "                    constants: {",
                        "                        1300: 2.0,  // \"gain\"",
                        "                        depth: -1,  // \"depth\"",
                        "                    }",
                        "                }",
                        "            </pre>",
                        "",
                        "            Corresponding JavaScript code, overriding all constants:",
                        "",
                        "            <pre highlight=js>",
                        "                {",
                        "                    // ...",
                        "                    constants: {",
                        "                        0: false,   // \"has_point_light\"",
                        "                        1200: 3.0,  // \"specular_param\"",
                        "                        1300: 2.0,  // \"gain\"",
                        "                        width: 20,  // \"width\"",
                        "                        depth: -1,  // \"depth\"",
                        "                        height: 15, // \"height\"",
                        "                    }",
                        "                }",
                        "            </pre>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUComputePipelineDescriptor",
            [
                {
                    "target": "GPUComputePipelineDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>compute</dfn>",
                        "    ::",
                        "        Describes the compute shader entry point of the [=pipeline=]."
                    ]
                }
            ]
        ],
        [
            "GPURenderPipeline",
            [
                {
                    "target": "GPURenderPipeline",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPURenderPipelineDescriptor}}",
                        "    ::",
                        "        The {{GPURenderPipelineDescriptor}} describing this pipeline.",
                        "",
                        "        All optional fields of {{GPURenderPipelineDescriptor}} are defined.",
                        "",
                        "    : <dfn>\\[[writesDepth]]</dfn>, of type boolean",
                        "    :: True if the pipeline writes to the depth component of the depth/stencil attachment",
                        "",
                        "    : <dfn>\\[[writesStencil]]</dfn>, of type boolean",
                        "    :: True if the pipeline writes to the stencil component of the depth/stencil attachment"
                    ]
                }
            ]
        ],
        [
            "GPURenderPipelineDescriptor",
            [
                {
                    "target": "GPURenderPipelineDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>vertex</dfn>",
                        "    ::",
                        "        Describes the vertex shader entry point of the [=pipeline=] and its input buffer layouts.",
                        "",
                        "    : <dfn>primitive</dfn>",
                        "    ::",
                        "        Describes the primitive-related properties of the [=pipeline=].",
                        "",
                        "    : <dfn>depthStencil</dfn>",
                        "    ::",
                        "        Describes the optional depth-stencil properties, including the testing, operations, and bias.",
                        "",
                        "    : <dfn>multisample</dfn>",
                        "    ::",
                        "        Describes the multi-sampling properties of the [=pipeline=].",
                        "",
                        "    : <dfn>fragment</dfn>",
                        "    ::",
                        "        Describes the fragment shader entry point of the [=pipeline=] and its output colors. If",
                        "        not [=map/exist|provided=], the [[#no-color-output]] mode is enabled."
                    ]
                }
            ]
        ],
        [
            "GPUPrimitiveState",
            [
                {
                    "target": "GPUPrimitiveState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>topology</dfn>",
                        "    ::",
                        "        The type of primitive to be constructed from the vertex inputs.",
                        "",
                        "    : <dfn>stripIndexFormat</dfn>",
                        "    ::",
                        "        For pipelines with strip topologies",
                        "        ({{GPUPrimitiveTopology/\"line-strip\"}} or {{GPUPrimitiveTopology/\"triangle-strip\"}}),",
                        "        this determines the index buffer format and primitive restart value",
                        "        ({{GPUIndexFormat/\"uint16\"}}/`0xFFFF` or {{GPUIndexFormat/\"uint32\"}}/`0xFFFFFFFF`).",
                        "        It is not allowed on pipelines with non-strip topologies.",
                        "",
                        "        Note: Some implementations require knowledge of the primitive restart value to compile",
                        "        pipeline state objects.",
                        "",
                        "        To use a strip-topology pipeline with an indexed draw call",
                        "        ({{GPURenderCommandsMixin/drawIndexed()}} or {{GPURenderCommandsMixin/drawIndexedIndirect()}}),",
                        "        this must be set, and it must match the index buffer format used with the draw call",
                        "        (set in {{GPURenderCommandsMixin/setIndexBuffer()}}).",
                        "",
                        "        See [[#primitive-assembly]] for additional details.",
                        "",
                        "    : <dfn>frontFace</dfn>",
                        "    ::",
                        "        Defines which polygons are considered [=front-facing=].",
                        "",
                        "    : <dfn>cullMode</dfn>",
                        "    ::",
                        "        Defines which polygon orientation will be culled, if any.",
                        "",
                        "    : <dfn>unclippedDepth</dfn>",
                        "    ::",
                        "        If true, indicates that [=depth clipping=] is disabled.",
                        "",
                        "        Requires the {{GPUFeatureName/\"depth-clip-control\"}} feature to be enabled."
                    ]
                }
            ]
        ],
        [
            "GPUPrimitiveTopology",
            [
                {
                    "target": "GPUPrimitiveTopology",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"point-list\"</dfn>",
                        "    ::",
                        "        Each vertex defines a point primitive.",
                        "",
                        "    : <dfn>\"line-list\"</dfn>",
                        "    ::",
                        "        Each consecutive pair of two vertices defines a line primitive.",
                        "",
                        "    : <dfn>\"line-strip\"</dfn>",
                        "    ::",
                        "        Each vertex after the first defines a line primitive between it and the previous vertex.",
                        "",
                        "    : <dfn>\"triangle-list\"</dfn>",
                        "    ::",
                        "        Each consecutive triplet of three vertices defines a triangle primitive.",
                        "",
                        "    : <dfn>\"triangle-strip\"</dfn>",
                        "    ::",
                        "        Each vertex after the first two defines a triangle primitive between it and the previous",
                        "        two vertices."
                    ]
                }
            ]
        ],
        [
            "GPUFrontFace",
            [
                {
                    "target": "GPUFrontFace",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"ccw\"</dfn>",
                        "    ::",
                        "        Polygons with vertices whose framebuffer coordinates are given in counter-clockwise order",
                        "        are considered [=front-facing=].",
                        "",
                        "    : <dfn>\"cw\"</dfn>",
                        "    ::",
                        "        Polygons with vertices whose framebuffer coordinates are given in clockwise order are",
                        "        considered [=front-facing=]."
                    ]
                }
            ]
        ],
        [
            "GPUCullMode",
            [
                {
                    "target": "GPUCullMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"none\"</dfn>",
                        "    ::",
                        "        No polygons are discarded.",
                        "",
                        "    : <dfn>\"front\"</dfn>",
                        "    ::",
                        "        [=Front-facing=] polygons are discarded.",
                        "",
                        "    : <dfn>\"back\"</dfn>",
                        "    ::",
                        "        [=Back-facing=] polygons are discarded."
                    ]
                }
            ]
        ],
        [
            "GPUMultisampleState",
            [
                {
                    "target": "GPUMultisampleState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>count</dfn>",
                        "    ::",
                        "        Number of samples per pixel. This {{GPURenderPipeline}} will be compatible only",
                        "        with attachment textures ({{GPURenderPassDescriptor/colorAttachments}}",
                        "        and {{GPURenderPassDescriptor/depthStencilAttachment}})",
                        "        with matching {{GPUTextureDescriptor/sampleCount}}s.",
                        "",
                        "    : <dfn>mask</dfn>",
                        "    ::",
                        "        Mask determining which samples are written to.",
                        "",
                        "    : <dfn>alphaToCoverageEnabled</dfn>",
                        "    ::",
                        "        When `true` indicates that a fragment's alpha channel should be used to generate a sample",
                        "        coverage mask."
                    ]
                }
            ]
        ],
        [
            "GPUFragmentState",
            [
                {
                    "target": "GPUFragmentState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>targets</dfn>",
                        "    ::",
                        "        A list of {{GPUColorTargetState}} defining the formats and behaviors of the color targets",
                        "        this pipeline writes to."
                    ]
                }
            ]
        ],
        [
            "GPUColorTargetState",
            [
                {
                    "target": "GPUColorTargetState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The {{GPUTextureFormat}} of this color target. The pipeline will only be compatible with",
                        "        {{GPURenderPassEncoder}}s which use a {{GPUTextureView}} of this format in the",
                        "        corresponding color attachment.",
                        "",
                        "    : <dfn>blend</dfn>",
                        "    ::",
                        "        The blending behavior for this color target. If left undefined, disables blending for this",
                        "        color target.",
                        "",
                        "    : <dfn>writeMask</dfn>",
                        "    ::",
                        "        Bitmask controlling which channels are are written to when drawing to this color target."
                    ]
                }
            ]
        ],
        [
            "GPUBlendState",
            [
                {
                    "target": "GPUBlendState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>color</dfn>",
                        "    ::",
                        "        Defines the blending behavior of the corresponding render target for color channels.",
                        "",
                        "    : <dfn>alpha</dfn>",
                        "    ::",
                        "        Defines the blending behavior of the corresponding render target for the alpha channel."
                    ]
                }
            ]
        ],
        [
            "GPUBlendComponent",
            [
                {
                    "target": "GPUBlendComponent",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>operation</dfn>",
                        "    ::",
                        "        Defines the {{GPUBlendOperation}} used to calculate the values written to the target",
                        "        attachment components.",
                        "",
                        "    : <dfn>srcFactor</dfn>",
                        "    ::",
                        "        Defines the {{GPUBlendFactor}} operation to be performed on values from the fragment shader.",
                        "",
                        "    : <dfn>dstFactor</dfn>",
                        "    ::",
                        "        Defines the {{GPUBlendFactor}} operation to be performed on values from the target attachment."
                    ]
                }
            ]
        ],
        [
            "GPUDepthStencilState",
            [
                {
                    "target": "GPUDepthStencilState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The {{GPUTextureViewDescriptor/format}} of {{GPURenderPassDescriptor/depthStencilAttachment}}",
                        "        this {{GPURenderPipeline}} will be compatible with.",
                        "",
                        "    : <dfn>depthWriteEnabled</dfn>",
                        "    ::",
                        "        Indicates if this {{GPURenderPipeline}} can modify",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} depth values.",
                        "",
                        "    : <dfn>depthCompare</dfn>",
                        "    ::",
                        "        The comparison operation used to test fragment depths against",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} depth values.",
                        "",
                        "    : <dfn>stencilFront</dfn>",
                        "    ::",
                        "        Defines how stencil comparisons and operations are performed for front-facing primitives.",
                        "",
                        "    : <dfn>stencilBack</dfn>",
                        "    ::",
                        "        Defines how stencil comparisons and operations are performed for back-facing primitives.",
                        "",
                        "    : <dfn>stencilReadMask</dfn>",
                        "    ::",
                        "        Bitmask controlling which {{GPURenderPassDescriptor/depthStencilAttachment}} stencil value",
                        "        bits are read when performing stencil comparison tests.",
                        "",
                        "    : <dfn>stencilWriteMask</dfn>",
                        "    ::",
                        "        Bitmask controlling which {{GPURenderPassDescriptor/depthStencilAttachment}} stencil value",
                        "        bits are written to when performing stencil operations.",
                        "",
                        "    : <dfn>depthBias</dfn>",
                        "    ::",
                        "        Constant depth bias added to each fragment. See [$biased fragment depth$] for details.",
                        "",
                        "    : <dfn>depthBiasSlopeScale</dfn>",
                        "    ::",
                        "        Depth bias that scales with the fragment’s slope. See [$biased fragment depth$] for details.",
                        "",
                        "    : <dfn>depthBiasClamp</dfn>",
                        "    ::",
                        "        The maximum depth bias of a fragment. See [$biased fragment depth$] for details."
                    ]
                }
            ]
        ],
        [
            "GPUStencilFaceState",
            [
                {
                    "target": "GPUStencilFaceState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>compare</dfn>",
                        "    ::",
                        "        The {{GPUCompareFunction}} used when testing fragments against",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} stencil values.",
                        "",
                        "    : <dfn>failOp</dfn>",
                        "    ::",
                        "        The {{GPUStencilOperation}} performed if the fragment stencil comparison test described by",
                        "        {{GPUStencilFaceState/compare}} fails.",
                        "",
                        "    : <dfn>depthFailOp</dfn>",
                        "    ::",
                        "        The {{GPUStencilOperation}} performed if the fragment depth comparison described by",
                        "        {{GPUDepthStencilState/depthCompare}} fails.",
                        "",
                        "    : <dfn>passOp</dfn>",
                        "    ::",
                        "        The {{GPUStencilOperation}} performed if the fragment stencil comparison test described by",
                        "        {{GPUStencilFaceState/compare}} passes."
                    ]
                }
            ]
        ],
        [
            "GPUStencilOperation",
            [
                {
                    "target": "GPUStencilOperation",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"keep\"</dfn>",
                        "    ::",
                        "        Keep the current stencil value.",
                        "",
                        "    : <dfn>\"zero\"</dfn>",
                        "    ::",
                        "        Set the stencil value to `0`.",
                        "",
                        "    : <dfn>\"replace\"</dfn>",
                        "    ::",
                        "        Set the stencil value to {{RenderState/[[stencilReference]]}}.",
                        "",
                        "    : <dfn>\"invert\"</dfn>",
                        "    ::",
                        "        Bitwise-invert the current stencil value.",
                        "",
                        "    : <dfn>\"increment-clamp\"</dfn>",
                        "    ::",
                        "        Increments the current stencil value, clamping to the maximum representable value of the",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil aspect.",
                        "",
                        "    : <dfn>\"decrement-clamp\"</dfn>",
                        "    ::",
                        "        Decrement the current stencil value, clamping to `0`.",
                        "",
                        "    : <dfn>\"increment-wrap\"</dfn>",
                        "    ::",
                        "        Increments the current stencil value, wrapping to zero if the value exceeds the maximum",
                        "        representable value of the {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil",
                        "        aspect.",
                        "",
                        "    : <dfn>\"decrement-wrap\"</dfn>",
                        "    ::",
                        "        Decrement the current stencil value, wrapping to the maximum representable value of the",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil aspect if the value goes below",
                        "        `0`."
                    ]
                }
            ]
        ],
        [
            "GPUVertexStepMode",
            [
                {
                    "target": "GPUVertexStepMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"vertex\"</dfn>",
                        "    ::",
                        "        The address is advanced by {{GPUVertexBufferLayout/arrayStride}} for each vertex,",
                        "        and reset between instances.",
                        "",
                        "    : <dfn>\"instance\"</dfn>",
                        "    ::",
                        "        The address is advanced by {{GPUVertexBufferLayout/arrayStride}} for each instance."
                    ]
                }
            ]
        ],
        [
            "GPUVertexState",
            [
                {
                    "target": "GPUVertexState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>buffers</dfn>",
                        "    ::",
                        "        A list of {{GPUVertexBufferLayout}}s, each defining the layout of vertex attribute data in a",
                        "        vertex buffer used by this pipeline."
                    ]
                }
            ]
        ],
        [
            "GPUVertexBufferLayout",
            [
                {
                    "target": "GPUVertexBufferLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>arrayStride</dfn>",
                        "    ::",
                        "        The stride, in bytes, between elements of this array.",
                        "",
                        "    : <dfn>stepMode</dfn>",
                        "    ::",
                        "        Whether each element of this array represents per-vertex data or per-instance data",
                        "",
                        "    : <dfn>attributes</dfn>",
                        "    ::",
                        "        An array defining the layout of the vertex attributes within each element."
                    ]
                }
            ]
        ],
        [
            "GPUVertexAttribute",
            [
                {
                    "target": "GPUVertexAttribute",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The {{GPUVertexFormat}} of the attribute.",
                        "",
                        "    : <dfn>offset</dfn>",
                        "    ::",
                        "        The offset, in bytes, from the beginning of the element to the data for the attribute.",
                        "",
                        "    : <dfn>shaderLocation</dfn>",
                        "    ::",
                        "        The numeric location associated with this attribute, which will correspond with a",
                        "        <a href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\">\"@location\" attribute</a>",
                        "        declared in the {{GPURenderPipelineDescriptor/vertex}}.{{GPUProgrammableStage/module|module}}."
                    ]
                }
            ]
        ],
        [
            "GPUCommandBuffer",
            [
                {
                    "target": "GPUCommandBuffer",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_list]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;",
                        "    ::",
                        "        A [=list=] of [=GPU commands=] to be executed on the [=Queue timeline=] when this command",
                        "        buffer is submitted.",
                        "",
                        "    : <dfn>\\[[renderState]]</dfn>, of type [=RenderState=]",
                        "    ::",
                        "        The current state used by any render pass commands being executed, initially `null`."
                    ]
                }
            ]
        ],
        [
            "GPUCommandsMixin",
            [
                {
                    "target": "GPUCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[state]]</dfn>, of type [=encoder state=], initially \"[=encoder state/open=]\"",
                        "    ::",
                        "        The current state of the encoder.",
                        "",
                        "    : <dfn>\\[[commands]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;, initially `[]`",
                        "    ::",
                        "        A [=list=] of [=GPU commands=] to be executed on the [=Queue timeline=] when a",
                        "        {{GPUCommandBuffer}} containing these commands is submitted."
                    ]
                }
            ]
        ],
        [
            "GPUCommandEncoder",
            [
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>beginRenderPass(descriptor)</dfn>",
                        "    ::",
                        "        Begins encoding a render pass described by |descriptor|.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.beginRenderPass>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/beginRenderPass(descriptor)\">",
                        "                    |descriptor|: Description of the {{GPURenderPassEncoder}} to create.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPURenderPassEncoder}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. For each non-`null` |colorAttachment| in |descriptor|.{{GPURenderPassDescriptor/colorAttachments}}:",
                        "                    1. If |colorAttachment|.{{GPURenderPassColorAttachment/clearValue}} is not `null`.",
                        "                        1. [=?=] [$validate GPUColor shape$](|colorAttachment|.{{GPURenderPassColorAttachment/clearValue}}).",
                        "                1. Let |pass| be a new {{GPURenderPassEncoder}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |pass|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|.",
                        "                    If it returns false, make |pass| [=invalid=] and return.",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/locked=]\".",
                        "                1. If any of the following requirements are unmet, make |pass| [=invalid=] and return.",
                        "                    <div class=validusage>",
                        "                        - |descriptor| must meet the [$GPURenderPassDescriptor/Valid Usage$] rules",
                        "                            given device |this|.{{GPUObjectBase/[[device]]}}.",
                        "                        - The set of attachments in |descriptor|.{{GPURenderPassDescriptor/colorAttachments}}",
                        "                            must be pairwise disjoint.",
                        "                            That is, no two attachments may refer to the same region, as defined by",
                        "                            the {{GPURenderPassColorAttachment/view}}'s [=texture subresource=]",
                        "                            range and (for {{GPUTextureViewDimension/\"3d\"}} attachments)",
                        "                            the attachment's {{GPURenderPassColorAttachment/depthSlice}}.",
                        "                    </div>",
                        "                1. Consider each [=texture subresource=] viewed by a non-`null` element of",
                        "                    |descriptor|.{{GPURenderPassDescriptor/colorAttachments}} to be used as",
                        "                    an [=internal usage/attachment=] for the duration of the render pass.",
                        "",
                        "                    If a subresource is seen more than once, consider it used only once.",
                        "                    (Attachments are already checked for overlaps in the validation rules above.)",
                        "                1. Let |depthStencilAttachment| be |descriptor|.{{GPURenderPassDescriptor/depthStencilAttachment}},",
                        "                    or `null` if not [=map/exist|provided=].",
                        "                1. If |depthStencilAttachment| is not `null`:",
                        "                    1. Let |depthStencilView| be |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/view}}.",
                        "                    1. Consider the [=aspect/depth=] [=GPUTextureView/subresource=] of |depthStencilView|",
                        "                        (if any) used for the duration of the render pass, as [=internal usage/attachment-read=] if",
                        "                        |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/depthReadOnly}} is true,",
                        "                        or as [=internal usage/attachment=] otherwise.",
                        "                    1. Consider the [=aspect/stencil=] [=GPUTextureView/subresource=] of |depthStencilView|",
                        "                        (if any) used for the duration of the render pass, as [=internal usage/attachment-read=] if",
                        "                        |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/stencilReadOnly}} is true,",
                        "                        or as [=internal usage/attachment=] otherwise.",
                        "                    1. Set |pass|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} to |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/depthReadOnly}}.",
                        "                    1. Set |pass|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} to |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/stencilReadOnly}}.",
                        "                1. Set |pass|.{{GPURenderCommandsMixin/[[layout]]}} to [$derive render targets layout from pass$](|descriptor|).",
                        "                1. If |descriptor|.{{GPURenderPassDescriptor/timestampWrites}} is [=map/exist|provided=]:",
                        "                    1. Let |timestampWrites| be |descriptor|.{{GPURenderPassDescriptor/timestampWrites}}.",
                        "                    1. If |timestampWrites|.{{GPURenderPassTimestampWrites/beginningOfPassWriteIndex}}",
                        "                        is [=map/exist|provided=],",
                        "                        [=list/append=] a [=GPU command=] to |this|.{{GPUCommandsMixin/[[commands]]}}",
                        "                        with the following steps:",
                        "",
                        "                        <div data-timeline=queue>",
                        "                            1. Before the pass commands begin executing,",
                        "                                write the [$current queue timestamp$] into index",
                        "                                |timestampWrites|.{{GPURenderPassTimestampWrites/beginningOfPassWriteIndex}}",
                        "                                of |timestampWrites|.{{GPURenderPassTimestampWrites/querySet}}.",
                        "                        </div>",
                        "                    1. If |timestampWrites|.{{GPURenderPassTimestampWrites/endOfPassWriteIndex}}",
                        "                        is [=map/exist|provided=], set |pass|.{{GPURenderPassEncoder/[[endTimestampWrite]]}}",
                        "                        to a [=GPU command=] with the following steps:",
                        "",
                        "                        <div data-timeline=queue>",
                        "                            1. After the pass commands finish executing,",
                        "                                write the [$current queue timestamp$] into index",
                        "                                |timestampWrites|.{{GPURenderPassTimestampWrites/endOfPassWriteIndex}}",
                        "                                of |timestampWrites|.{{GPURenderPassTimestampWrites/querySet}}.",
                        "                        </div>",
                        "                1. Set |pass|.{{GPURenderCommandsMixin/[[drawCount]]}} to 0.",
                        "                1. Set |pass|.{{GPURenderPassEncoder/[[maxDrawCount]]}} to |descriptor|.{{GPURenderPassDescriptor/maxDrawCount}}.",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Let the {{GPUCommandBuffer/[[renderState]]}} of the currently executing",
                        "                    {{GPUCommandBuffer}} be a new [=RenderState=].",
                        "                1. Issue: Perform attachment loads/clears.",
                        "            </div>",
                        "",
                        "            Issue: specify the behavior of read-only depth/stencil",
                        "        </div>",
                        "",
                        "    : <dfn>beginComputePass(descriptor)</dfn>",
                        "    ::",
                        "        Begins encoding a compute pass described by |descriptor|.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.beginComputePass>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/beginComputePass(descriptor)\">",
                        "                    descriptor:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUComputePassEncoder}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |pass| be a new {{GPUComputePassEncoder}} object.",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.",
                        "                1. Return |pass|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |initialization steps|:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|.",
                        "                    If it returns false, make |pass| [=invalid=] and return.",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/locked=]\".",
                        "                1. If any of the following requirements are unmet, make |pass| [=invalid=] and return.",
                        "                    <div class=validusage>",
                        "                        - If |descriptor|.{{GPUComputePassDescriptor/timestampWrites}} is [=map/exist|provided=]:",
                        "                            - [$Validate timestampWrites$](|this|.{{GPUObjectBase/[[device]]}},",
                        "                                |descriptor|.{{GPUComputePassDescriptor/timestampWrites}})",
                        "                                must return true.",
                        "                    </div>",
                        "                1. If |descriptor|.{{GPUComputePassDescriptor/timestampWrites}} is [=map/exist|provided=]:",
                        "                    1. Let |timestampWrites| be |descriptor|.{{GPUComputePassDescriptor/timestampWrites}}.",
                        "                    1. If |timestampWrites|.{{GPUComputePassTimestampWrites/beginningOfPassWriteIndex}}",
                        "                        is [=map/exist|provided=],",
                        "                        [=list/append=] a [=GPU command=] to |this|.{{GPUCommandsMixin/[[commands]]}}",
                        "                        with the following steps:",
                        "",
                        "                        <div data-timeline=queue>",
                        "                            1. Before the pass commands begin executing,",
                        "                                write the [$current queue timestamp$] into index",
                        "                                |timestampWrites|.{{GPUComputePassTimestampWrites/beginningOfPassWriteIndex}}",
                        "                                of |timestampWrites|.{{GPUComputePassTimestampWrites/querySet}}.",
                        "                        </div>",
                        "                    1. If |timestampWrites|.{{GPUComputePassTimestampWrites/endOfPassWriteIndex}}",
                        "                        is [=map/exist|provided=], set |pass|.{{GPUComputePassEncoder/[[endTimestampWrite]]}}",
                        "                        to a [=GPU command=] with the following steps:",
                        "",
                        "                        <div data-timeline=queue>",
                        "                            1. After the pass commands finish executing,",
                        "                                write the [$current queue timestamp$] into index",
                        "                                |timestampWrites|.{{GPUComputePassTimestampWrites/endOfPassWriteIndex}}",
                        "                                of |timestampWrites|.{{GPUComputePassTimestampWrites/querySet}}.",
                        "                        </div>",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)</dfn>",
                        "    ::",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of a",
                        "        {{GPUBuffer}} to a sub-region of another {{GPUBuffer}}.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.copyBufferToBuffer>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)\">",
                        "                    |source|: The {{GPUBuffer}} to copy from.",
                        "                    |sourceOffset|: Offset in bytes into |source| to begin copying from.",
                        "                    |destination|: The {{GPUBuffer}} to copy to.",
                        "                    |destinationOffset|: Offset in bytes into |destination| to place the copied data.",
                        "                    |size|: Bytes to copy.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |source| is [$valid to use with$] |this|.",
                        "                        - |destination| is [$valid to use with$] |this|.",
                        "                        - |source|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_SRC}}.",
                        "                        - |destination|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_DST}}.",
                        "                        - |size| is a multiple of 4.",
                        "                        - |sourceOffset| is a multiple of 4.",
                        "                        - |destinationOffset| is a multiple of 4.",
                        "                        - |source|.{{GPUBuffer/size}} &ge; (|sourceOffset| + |size|).",
                        "                        - |destination|.{{GPUBuffer/size}} &ge; (|destinationOffset| + |size|).",
                        "                        - |source| and |destination| are not the same {{GPUBuffer}}.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Copy |size| bytes of |source|, beginning at |sourceOffset|, into |destination|,",
                        "                    beginning at |destinationOffset|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>clearBuffer(buffer, offset, size)</dfn>",
                        "    ::",
                        "        Encode a command into the {{GPUCommandEncoder}} that fills a sub-region of a",
                        "        {{GPUBuffer}} with zeros.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.clearBuffer>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/clearBuffer(buffer, offset, size)\">",
                        "                    |buffer|: The {{GPUBuffer}} to clear.",
                        "                    |offset|: Offset in bytes into |buffer| where the sub-region to clear begins.",
                        "                    |size|: Size in bytes of the sub-region to clear. Defaults to the size of the buffer minus |offset|.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If |size| is missing, set |size| to `max(0, |buffer|.{{GPUBuffer/size}} - |offset|)`.",
                        "                1. If any of the following conditions are unsatisfied make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |buffer| is [$valid to use with$] |this|.",
                        "                        - |buffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_DST}}.",
                        "                        - |size| is a multiple of 4.",
                        "                        - |offset| is a multiple of 4.",
                        "                        - |buffer|.{{GPUBuffer/size}} &ge; (|offset| + |size|).",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Set |size| bytes of |buffer| to `0` starting at |offset|.",
                        "            </div>",
                        "",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>copyBufferToTexture(source, destination, copySize)</dfn>",
                        "    ::",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of a",
                        "        {{GPUBuffer}} to a sub-region of one or multiple continuous [=texture subresources=].",
                        "",
                        "        <div algorithm=GPUCommandEncoder.copyBufferToTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyBufferToTexture(source, destination, copySize)\">",
                        "                    |source|: Combined with |copySize|, defines the region of the source buffer.",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination [=texture subresource=].",
                        "                    |copySize|:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - Let |dstTexture| be |destination|.{{GPUImageCopyTexture/texture}}.",
                        "                        - [$validating GPUImageCopyBuffer$](|source|) returns `true`.",
                        "                        - |source|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_SRC}}.",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |copySize|) returns `true`.",
                        "                        - |dstTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_DST}}.",
                        "                        - |dstTexture|.{{GPUTexture/sampleCount}} is 1.",
                        "                        - Let |aspectSpecificFormat| = |dstTexture|.{{GPUTexture/format}}.",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:",
                        "                            - |destination|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of",
                        "                                |dstTexture|.{{GPUTexture/format}}.",
                        "                            - That aspect must be a valid image copy destination according to [[#depth-formats]].",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] according to [[#depth-formats]].",
                        "                        - [=validating texture copy range=](|destination|, |copySize|) return `true`.",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is not a [=depth-or-stencil format=]:",
                        "                            - |source|.{{GPUImageDataLayout/offset}} is a multiple of the",
                        "                                [=texel block copy footprint=] of |dstTexture|.{{GPUTexture/format}}.",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:",
                        "                            - |source|.{{GPUImageDataLayout/offset}} is a multiple of 4.",
                        "                        - [$validating linear texture data$](|source|,",
                        "                            |source|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/size}},",
                        "                            |aspectSpecificFormat|,",
                        "                            |copySize|) succeeds.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                Issue: Define copy, including provision for snorm.",
                        "            </div>",
                        "",
                        "        </div>",
                        "",
                        "    : <dfn>copyTextureToBuffer(source, destination, copySize)</dfn>",
                        "    ::",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of one or",
                        "        multiple continuous [=texture subresources=] to a sub-region of a {{GPUBuffer}}.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.copyTextureToBuffer>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyTextureToBuffer(source, destination, copySize)\">",
                        "                    |source|: Combined with |copySize|, defines the region of the source [=texture subresources=].",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination buffer.",
                        "                    |copySize|:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|source|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - Let |srcTexture| be |source|.{{GPUImageCopyTexture/texture}}.",
                        "                        - [$validating GPUImageCopyTexture$](|source|, |copySize|) returns `true`.",
                        "                        - |srcTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_SRC}}.",
                        "                        - |srcTexture|.{{GPUTexture/sampleCount}} is 1.",
                        "                        - Let |aspectSpecificFormat| = |srcTexture|.{{GPUTexture/format}}.",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=] format:",
                        "                            - |source|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of",
                        "                                |srcTexture|.{{GPUTexture/format}}.",
                        "                            - That aspect must be a valid image copy source according to [[#depth-formats]].",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] according to [[#depth-formats]].",
                        "                        - [$validating GPUImageCopyBuffer$](|destination|) returns `true`.",
                        "                        - |destination|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/usage}} contains",
                        "                            {{GPUBufferUsage/COPY_DST}}.",
                        "                        - [=validating texture copy range=](|source|, |copySize|) returns `true`.",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is not a [=depth-or-stencil format=]:",
                        "                            - |destination|.{{GPUImageDataLayout/offset}} is a multiple of the",
                        "                                [=texel block copy footprint=] of |srcTexture|.{{GPUTexture/format}}.",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:",
                        "                            - |destination|.{{GPUImageDataLayout/offset}} is a multiple of 4.",
                        "                        - [$validating linear texture data$](|destination|,",
                        "                            |destination|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/size}},",
                        "                            |aspectSpecificFormat|,",
                        "                            |copySize|) succeeds.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                Issue: Define copy, including provision for snorm.",
                        "            </div>",
                        "",
                        "        </div>",
                        "",
                        "    : <dfn>copyTextureToTexture(source, destination, copySize)</dfn>",
                        "    ::",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of one",
                        "        or multiple contiguous [=texture subresources=] to another sub-region of one or",
                        "        multiple continuous [=texture subresources=].",
                        "",
                        "        <div algorithm=GPUCommandEncoder.copyTextureToTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyTextureToTexture(source, destination, copySize)\">",
                        "                    |source|: Combined with |copySize|, defines the region of the source [=texture subresources=].",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination [=texture subresources=].",
                        "                    |copySize|:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|source|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - Let |srcTexture| be |source|.{{GPUImageCopyTexture/texture}}.",
                        "                        - Let |dstTexture| be |destination|.{{GPUImageCopyTexture/texture}}.",
                        "                        - [$validating GPUImageCopyTexture$](|source|, |copySize|) returns `true`.",
                        "                        - |srcTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_SRC}}.",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |copySize|) returns `true`.",
                        "                        - |dstTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_DST}}.",
                        "                        - |srcTexture|.{{GPUTexture/sampleCount}} is equal to |dstTexture|.{{GPUTexture/sampleCount}}.",
                        "                        - |srcTexture|.{{GPUTexture/format}} and |dstTexture|.{{GPUTexture/format}}",
                        "                            must be [=copy-compatible=].",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a depth-stencil format:",
                        "                            - |source|.{{GPUImageCopyTexture/aspect}} and |destination|.{{GPUImageCopyTexture/aspect}}",
                        "                                must both refer to all aspects of |srcTexture|.{{GPUTexture/format}}",
                        "                                and |dstTexture|.{{GPUTexture/format}}, respectively.",
                        "                        - [=validating texture copy range=](|source|, |copySize|) returns `true`.",
                        "                        - [=validating texture copy range=](|destination|, |copySize|) returns `true`.",
                        "                        - The [$set of subresources for texture copy$](|source|, |copySize|) and",
                        "                            the [$set of subresources for texture copy$](|destination|, |copySize|) are disjoint.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                Issue: Define copy, including provision for snorm.",
                        "            </div>",
                        "",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)</dfn>",
                        "    ::",
                        "        Resolves query results from a {{GPUQuerySet}} out into a range of a {{GPUBuffer}}.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.resolveQuerySet>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)\">",
                        "                    querySet:",
                        "                    firstQuery:",
                        "                    queryCount:",
                        "                    destination:",
                        "                    destinationOffset:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                        |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |querySet| is [$valid to use with$] |this|.",
                        "                        - |destination| is [$valid to use with$] |this|.",
                        "                        - |destination|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/QUERY_RESOLVE}}.",
                        "                        - |firstQuery| &lt; the number of queries in |querySet|.",
                        "                        - (|firstQuery| + |queryCount|) &le; the number of queries in |querySet|.",
                        "                        - |destinationOffset| is a multiple of 256.",
                        "                        - |destinationOffset| + 8 &times; |queryCount| &le; |destination|.{{GPUBuffer/size}}.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Let |queryIndex| be |firstQuery|.",
                        "                1. Let |offset| be |destinationOffset|.",
                        "                1. While |queryIndex| &lt; |firstQuery| + |queryCount|:",
                        "                    1. Set 8 bytes of |destination|, beginning at |offset|, to be the value of",
                        "                        |querySet| at |queryIndex|.",
                        "                    1. Set |queryIndex| to be |queryIndex| + 1.",
                        "                    1. Set |offset| to be |offset| + 8.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>finish(descriptor)</dfn>",
                        "    ::",
                        "        Completes recording of the commands sequence and returns a corresponding {{GPUCommandBuffer}}.",
                        "",
                        "        <div algorithm=GPUCommandEncoder.finish>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/finish(descriptor)\">",
                        "                    descriptor:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPUCommandBuffer}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |commandBuffer| be a new {{GPUCommandBuffer}}.",
                        "                1. Issue the |finish steps| on the [=Device timeline=] of",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Return |commandBuffer|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |finish steps|:",
                        "",
                        "                1. Let |validationSucceeded| be `true` if all of the following requirements are met, and `false` otherwise.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| must be [=valid=].",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].",
                        "                        - Every [=usage scope=] contained in |this| must satisfy the [=usage scope validation=].",
                        "                    </div>",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".",
                        "                1. If |validationSucceeded| is `false`, then:",
                        "                    1. [$Generate a validation error$].",
                        "                    1. Return a new [=invalid=] {{GPUCommandBuffer}}.",
                        "                1. Set |commandBuffer|.{{GPUCommandBuffer/[[command_list]]}} to",
                        "                    |this|.{{GPUCommandsMixin/[[commands]]}}.",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUBindingCommandsMixin",
            [
                {
                    "target": "GPUBindingCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[bind_groups]]</dfn>, of type [=ordered map=]&lt;{{GPUIndex32}}, {{GPUBindGroup}}&gt;",
                        "    ::",
                        "        The current {{GPUBindGroup}} for each index, initially empty.",
                        "",
                        "    : <dfn>\\[[dynamic_offsets]]</dfn>, of type [=ordered map=]&lt;{{GPUIndex32}}, [=list=]&lt;{{GPUBufferDynamicOffset}}&gt; &gt;",
                        "    ::",
                        "        The current dynamic offsets for each {{GPUBindingCommandsMixin/[[bind_groups]]}} entry, initially empty."
                    ]
                },
                {
                    "target": "GPUBindingCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setBindGroup(index, bindGroup, dynamicOffsets)</dfn>",
                        "    ::",
                        "        Sets the current {{GPUBindGroup}} for the given index.",
                        "",
                        "        <div algorithm=GPUBindingCommandsMixin.setBindGroup>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUBindingCommandsMixin}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <!-- TODO(tabatkins/bikeshed#1740, plinss/widlparser#56):",
                        "                The argumentdef feature doesn't work with overloaded functions, and it ends up",
                        "                expecting this to define the arguments for the 5-arg variant of the method, despite",
                        "                the \"for\" explicitly pointing at the 3-arg variant.",
                        "                So, we don't use argumentdef for this method. -->",
                        "",
                        "                <dl dfn-type=argument dfn-for=\"GPUBindingCommandsMixin/setBindGroup(index, bindGroup, dynamicOffsets)\">",
                        "                    : <dfn>|index|</dfn>, of type {{GPUIndex32}}, non-nullable, required",
                        "                    ::",
                        "                        The index to set the bind group at.",
                        "",
                        "                    : <dfn>|bindGroup|</dfn>, of type {{GPUBindGroup}}, nullable, required",
                        "                    ::",
                        "                        Bind group to use for subsequent render or compute commands.",
                        "",
                        "                    : <dfn>|dynamicOffsets|</dfn>, of type [=sequence=]&lt;{{GPUBufferDynamicOffset}}&gt;, non-nullable, defaulting to `[]`",
                        "                    ::",
                        "                        Array containing buffer offsets in bytes for each entry in",
                        "                        |bindGroup| marked as {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/hasDynamicOffset}}."
                    ]
                }
            ]
        ],
        [
            "GPUDebugCommandsMixin",
            [
                {
                    "target": "GPUDebugCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[debug_group_stack]]</dfn>, of type [=stack=]&lt;{{USVString}}&gt;",
                        "    ::",
                        "        A stack of active debug group labels."
                    ]
                },
                {
                    "target": "GPUDebugCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>pushDebugGroup(groupLabel)</dfn>",
                        "    ::",
                        "        Begins a labeled debug group containing subsequent commands.",
                        "",
                        "        <div algorithm=GPUDebugCommandsMixin.pushDebugGroup>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDebugCommandsMixin}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDebugCommandsMixin/pushDebugGroup(groupLabel)\">",
                        "                    |groupLabel|: The label for the command group.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. [=stack/Push=] |groupLabel| onto |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>popDebugGroup()</dfn>",
                        "    ::",
                        "        Ends the labeled debug group most recently started by {{GPUDebugCommandsMixin/pushDebugGroup()}}.",
                        "",
                        "        <div algorithm=GPUDebugCommandsMixin.popDebugGroup>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDebugCommandsMixin}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following requirements are unmet, make |this| [=invalid=], and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must not [=list/is empty|be empty=].",
                        "                    </div>",
                        "                1. [=stack/Pop=] an entry off of |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>insertDebugMarker(markerLabel)</dfn>",
                        "    ::",
                        "        Marks a point in a stream of commands with a label.",
                        "",
                        "        <div algorithm=GPUDebugCommandsMixin.insertDebugMarker>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUDebugCommandsMixin}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUDebugCommandsMixin/insertDebugMarker(markerLabel)\">",
                        "                    markerLabel: The label to insert.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUComputePassEncoder",
            [
                {
                    "target": "GPUComputePassEncoder",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_encoder]]</dfn>, of type {{GPUCommandEncoder}}, readonly",
                        "    ::",
                        "        The {{GPUCommandEncoder}} that created this compute pass encoder.",
                        "",
                        "    : <dfn>\\[[pipeline]]</dfn>, of type {{GPUComputePipeline}}, readonly",
                        "    ::",
                        "        The current {{GPUComputePipeline}}, initially `null`.",
                        "",
                        "    : <dfn>\\[[endTimestampWrite]]</dfn>, of type [=GPU command=]?, readonly, defaulting to `null`",
                        "    ::",
                        "        [=GPU command=], if any, writing a timestamp when the pass ends."
                    ]
                },
                {
                    "target": "GPUComputePassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setPipeline(pipeline)</dfn>",
                        "    ::",
                        "        Sets the current {{GPUComputePipeline}}.",
                        "",
                        "        <div algorithm=GPUComputePassEncoder.setPipeline>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUComputePassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/setPipeline(pipeline)\">",
                        "                    |pipeline|: The compute pipeline to use for subsequent dispatch commands.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |pipeline| is [$valid to use with$] |this|.",
                        "                    </div>",
                        "                1. Set |this|.{{GPUComputePassEncoder/[[pipeline]]}} to be |pipeline|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ)</dfn>",
                        "    ::",
                        "        Dispatch work to be performed with the current {{GPUComputePipeline}}.",
                        "        See [[#computing-operations]] for the detailed specification.",
                        "",
                        "        <div algorithm=GPUComputePassEncoder.dispatch>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUComputePassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ)\">",
                        "                    |workgroupCountX|: X dimension of the grid of workgroups to dispatch.",
                        "                    |workgroupCountY|: Y dimension of the grid of workgroups to dispatch.",
                        "                    |workgroupCountZ|: Z dimension of the grid of workgroups to dispatch.",
                        "                </pre>",
                        "",
                        "                <div class=note heading>",
                        "                    The `x`, `y`, and `z` values passed to {{GPUComputePassEncoder/dispatchWorkgroups()}}",
                        "                    and {{GPUComputePassEncoder/dispatchWorkgroupsIndirect()}} are the number of",
                        "                    *workgroups* to dispatch for each dimension, *not* the number of shader invocations",
                        "                    to perform across each dimension. This matches the behavior of modern native GPU",
                        "                    APIs, but differs from the behavior of OpenCL.",
                        "",
                        "                    This means that if a {{GPUShaderModule}} defines an entry point with",
                        "                    `@workgroup_size(4, 4)`, and work is dispatched to it with the call",
                        "                    `computePass.dispatchWorkgroups(8, 8);` the entry point will be invoked 1024 times",
                        "                    total: Dispatching a 4x4 workgroup 8 times along both the X and Y axes.",
                        "                    (`4*4*8*8=1024`)",
                        "                </div>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - [$Validate encoder bind groups$](|this|, |this|.{{GPUComputePassEncoder/[[pipeline]]}})",
                        "                            is `true`.",
                        "                        - all of |workgroupCountX|, |workgroupCountY| and |workgroupCountZ| are &le;",
                        "                            |this|.device.limits.{{supported limits/maxComputeWorkgroupsPerDimension}}.",
                        "                    </div>",
                        "",
                        "                1. Let |passState| be a snapshot of |this|'s current state.",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=].",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Execute a grid of workgroups with dimensions [|workgroupCountX|, |workgroupCountY|,",
                        "                    |workgroupCountZ|] with |passState|.{{GPUComputePassEncoder/[[pipeline]]}} using",
                        "                    |passState|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>dispatchWorkgroupsIndirect(indirectBuffer, indirectOffset)</dfn>",
                        "    ::",
                        "        Dispatch work to be performed with the current {{GPUComputePipeline}} using parameters read",
                        "        from a {{GPUBuffer}}.",
                        "        See [[#computing-operations]] for the detailed specification.",
                        "",
                        "        The <dfn dfn for=\"\">indirect dispatch parameters</dfn> encoded in the buffer must be a tightly",
                        "        packed block of **three 32-bit unsigned integer values (12 bytes total)**,",
                        "        given in the same order as the arguments for {{GPUComputePassEncoder/dispatchWorkgroups()}}.",
                        "        For example:",
                        "",
                        "        <pre highlight=js>",
                        "            let dispatchIndirectParameters = new Uint32Array(3);",
                        "            dispatchIndirectParameters[0] = workgroupCountX;",
                        "            dispatchIndirectParameters[1] = workgroupCountY;",
                        "            dispatchIndirectParameters[2] = workgroupCountZ;",
                        "        </pre>",
                        "",
                        "        <div algorithm=GPUComputePassEncoder.dispatchIndirect>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUComputePassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/dispatchWorkgroupsIndirect(indirectBuffer, indirectOffset)\">",
                        "                    |indirectBuffer|: Buffer containing the [=indirect dispatch parameters=].",
                        "                    |indirectOffset|: Offset in bytes into |indirectBuffer| where the dispatch data begins.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - [$Validate encoder bind groups$](|this|, |this|.{{GPUComputePassEncoder/[[pipeline]]}})",
                        "                            is `true`.",
                        "                        - |indirectBuffer| is [$valid to use with$] |this|.",
                        "                        - |indirectBuffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/INDIRECT}}.",
                        "                        - |indirectOffset| + sizeof([=indirect dispatch parameters=]) &le;",
                        "                            |indirectBuffer|.{{GPUBuffer/size}}.",
                        "                        - |indirectOffset| is a multiple of 4.",
                        "                    </div>",
                        "                1. Add |indirectBuffer| to the [=usage scope=] as {{GPUBufferUsage/INDIRECT}}.",
                        "",
                        "                1. Let |passState| be a snapshot of |this|'s current state.",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=].",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Let |workgroupCountX| be an unsigned 32-bit integer read from |indirectBuffer| at",
                        "                    |indirectOffset| bytes.",
                        "                1. Let |workgroupCountY| be an unsigned 32-bit integer read from |indirectBuffer| at",
                        "                    (|indirectOffset| + 4) bytes.",
                        "                1. Let |workgroupCountZ| be an unsigned 32-bit integer read from |indirectBuffer| at",
                        "                    (|indirectOffset| + 8) bytes.",
                        "                1. If |workgroupCountX|, |workgroupCountY|, or |workgroupCountZ| is greater than",
                        "                    |this|.device.limits.{{supported limits/maxComputeWorkgroupsPerDimension}},",
                        "                    stop.",
                        "                1. Execute a grid of workgroups with dimensions [|workgroupCountX|, |workgroupCountY|,",
                        "                    |workgroupCountZ|] with |passState|.{{GPUComputePassEncoder/[[pipeline]]}} using",
                        "                    |passState|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPUComputePassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>end()</dfn>",
                        "    ::",
                        "        Completes recording of the compute pass commands sequence.",
                        "",
                        "        <div algorithm=GPUComputePassEncoder.end>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUComputePassEncoder}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Let |parentEncoder| be |this|.{{GPURenderPassEncoder/[[command_encoder]]}}.",
                        "                1. If any of the following requirements are unmet,",
                        "                    [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".",
                        "                        - |parentEncoder|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/locked=]\".",
                        "                    </div>",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".",
                        "                1. Set |parentEncoder|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".",
                        "                1. If any of the following requirements are unmet, make",
                        "                    |parentEncoder| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| must be [=valid=].",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].",
                        "                    </div>",
                        "                1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}",
                        "                    with |this|.{{GPUCommandsMixin/[[commands]]}}.",
                        "                1. If |this|.{{GPUComputePassEncoder/[[endTimestampWrite]]}} is not `null`:",
                        "                    1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}",
                        "                        with |this|.{{GPUComputePassEncoder/[[endTimestampWrite]]}}.",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUComputePassTimestampWrites",
            [
                {
                    "target": "GPUComputePassTimestampWrites",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>querySet</dfn>",
                        "    ::",
                        "        The {{GPUQuerySet}}, of type {{GPUQueryType/\"timestamp\"}}, that the query results will be",
                        "        written to.",
                        "",
                        "    : <dfn>beginningOfPassWriteIndex</dfn>",
                        "    ::",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into",
                        "        which the timestamp at the beginning of the compute pass will be written.",
                        "",
                        "    : <dfn>endOfPassWriteIndex</dfn>",
                        "    ::",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into",
                        "        which the timestamp at the end of the compute pass will be written."
                    ]
                }
            ]
        ],
        [
            "GPUComputePassDescriptor",
            [
                {
                    "target": "GPUComputePassDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>timestampWrites</dfn>",
                        "    ::",
                        "        Defines which timestamp values will be written for this pass, and where to write them to."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassEncoder",
            [
                {
                    "target": "GPURenderPassEncoder",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_encoder]]</dfn>, of type {{GPUCommandEncoder}}, readonly",
                        "    ::",
                        "        The {{GPUCommandEncoder}} that created this render pass encoder.",
                        "",
                        "    : <dfn>\\[[attachment_size]]</dfn>, readonly",
                        "    ::",
                        "        Set to the following extents:",
                        "",
                        "        - `width, height` = the dimensions of the pass's render attachments",
                        "",
                        "    : <dfn>\\[[occlusion_query_set]]</dfn>, of type {{GPUQuerySet}}, readonly",
                        "    ::",
                        "        The {{GPUQuerySet}} to store occlusion query results for the pass, which is initialized with",
                        "        {{GPURenderPassDescriptor}}.{{GPURenderPassDescriptor/occlusionQuerySet}} at pass creation time.",
                        "",
                        "    : <dfn>\\[[occlusion_query_active]]</dfn>, of type {{boolean}}",
                        "    ::",
                        "        Whether the pass's {{GPURenderPassEncoder/[[occlusion_query_set]]}} is being written.",
                        "",
                        "    : <dfn>\\[[endTimestampWrite]]</dfn>, of type [=GPU command=]?, readonly, defaulting to `null`",
                        "    ::",
                        "        [=GPU command=], if any, writing a timestamp when the pass ends.",
                        "",
                        "    : <dfn>\\[[maxDrawCount]]</dfn> of type {{GPUSize64}}, readonly",
                        "    ::",
                        "        The maximum number of draws allowed in this pass."
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>end()</dfn>",
                        "    ::",
                        "        Completes recording of the render pass commands sequence.",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.end>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Let |parentEncoder| be |this|.{{GPURenderPassEncoder/[[command_encoder]]}}.",
                        "                1. If any of the following requirements are unmet,",
                        "                    [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".",
                        "                        - |parentEncoder|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/locked=]\".",
                        "                    </div>",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".",
                        "                1. Set |parentEncoder|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".",
                        "                1. If any of the following requirements are unmet, make",
                        "                    |parentEncoder| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| must be [=valid=].",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} must be `false`.",
                        "                        - |this|.{{GPURenderCommandsMixin/[[drawCount]]}} must be &le; |this|.{{GPURenderPassEncoder/[[maxDrawCount]]}}.",
                        "                    </div>",
                        "                1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}",
                        "                    with |this|.{{GPUCommandsMixin/[[commands]]}}.",
                        "                1. If |this|.{{GPURenderPassEncoder/[[endTimestampWrite]]}} is not `null`:",
                        "                    1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}",
                        "                        with |this|.{{GPURenderPassEncoder/[[endTimestampWrite]]}}.",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Issue: Perform the attachment stores/discards.",
                        "                1. Let |renderState| be `null`.",
                        "            </div>",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setViewport(x, y, width, height, minDepth, maxDepth)</dfn>",
                        "    ::",
                        "        Sets the viewport used during the rasterization stage to linearly map from",
                        "          [=NDC|normalized device coordinates=] to [=viewport coordinates=].",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.setViewport>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setViewport(x, y, width, height, minDepth, maxDepth)\">",
                        "                    |x|: Minimum X value of the viewport in pixels.",
                        "                    |y|: Minimum Y value of the viewport in pixels.",
                        "                    |width|: Width of the viewport in pixels.",
                        "                    |height|: Height of the viewport in pixels.",
                        "                    |minDepth|: Minimum depth value of the viewport.",
                        "                    |maxDepth|: Maximum depth value of the viewport.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]",
                        "                    and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |x| &ge; `0`",
                        "                        - |y| &ge; `0`",
                        "                        - |width| &ge; `0`",
                        "                        - |height| &ge; `0`",
                        "                        - |x| + |width| &le; |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.width",
                        "                        - |y| + |height| &le; |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.height",
                        "                        - 0.0 &le; |minDepth| &le; 1.0",
                        "                        - 0.0 &le; |maxDepth| &le; 1.0",
                        "                        - |minDepth| &lt; |maxDepth|",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Round |x|, |y|, |width|, and |height| to some uniform precision, no less precise than integer rounding.",
                        "                1. Set |renderState|.{{RenderState/[[viewport]]}} to the extents |x|, |y|, |width|, |height|, |minDepth|, and |maxDepth|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>setScissorRect(x, y, width, height)</dfn>",
                        "    ::",
                        "        Sets the scissor rectangle used during the rasterization stage.",
                        "        After transformation into [=viewport coordinates=] any fragments which fall outside the scissor",
                        "        rectangle will be discarded.",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.setScissorRect>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setScissorRect(x, y, width, height)\">",
                        "                    |x|: Minimum X value of the scissor rectangle in pixels.",
                        "                    |y|: Minimum Y value of the scissor rectangle in pixels.",
                        "                    |width|: Width of the scissor rectangle in pixels.",
                        "                    |height|: Height of the scissor rectangle in pixels.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]",
                        "                    and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |x|+|width| &le;",
                        "                            |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.width.",
                        "                        - |y|+|height| &le;",
                        "                            |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.height.",
                        "                    </div>",
                        "",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Set |renderState|.{{RenderState/[[scissorRect]]}} to the extents |x|, |y|, |width|, and |height|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>setBlendConstant(color)</dfn>",
                        "    ::",
                        "        Sets the constant blend color and alpha values used with {{GPUBlendFactor/\"constant\"}}",
                        "        and {{GPUBlendFactor/\"one-minus-constant\"}} {{GPUBlendFactor}}s.",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.setBlendConstant>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setBlendConstant(color)\">",
                        "                    |color|: The color to use when blending.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUColor shape$](|color|).",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Set |renderState|.{{RenderState/[[blendConstant]]}} to |color|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>setStencilReference(reference)</dfn>",
                        "    ::",
                        "        Sets the {{RenderState/[[stencilReference]]}} value used during stencil tests with",
                        "        the {{GPUStencilOperation/\"replace\"}} {{GPUStencilOperation}}.",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.setStencilReference>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setStencilReference(reference)\">",
                        "                    |reference|: The new stencil reference value.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Set |renderState|.{{RenderState/[[stencilReference]]}} to |reference|.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>beginOcclusionQuery(queryIndex)</dfn>",
                        "    ::",
                        "        <div algorithm=GPURenderPassEncoder.beginOcclusionQuery>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/beginOcclusionQuery(queryIndex)\">",
                        "                    |queryIndex|: The index of the query in the query set.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}} is not `null`.",
                        "                        - |queryIndex| &lt; |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}}.{{GPUQuerySet/count}}.",
                        "                        - The query at same |queryIndex| must not have been previously written to in this pass.",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} is `false`.",
                        "                    </div>",
                        "                1. Set |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} to `true`.",
                        "",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Set |renderState|.{{RenderState/[[occlusionQueryIndex]]}} to |queryIndex|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>endOcclusionQuery()</dfn>",
                        "    ::",
                        "        <div algorithm=GPURenderPassEncoder.endOcclusionQuery>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} this.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} is `true`.",
                        "                    </div>",
                        "                1. Set |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} to `false`.",
                        "",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Let |passingFragments| be non-zero if any fragment samples passed all per-fragment",
                        "                    tests since the corresponding {{GPURenderPassEncoder/beginOcclusionQuery()}}",
                        "                    command was executed, and zero otherwise.",
                        "",
                        "                    Note: If no draw calls occurred, |passingFragments| is zero.",
                        "                1. Write |passingFragments| into",
                        "                    |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}} at index",
                        "                    |renderState|.{{RenderState/[[occlusionQueryIndex]]}}.",
                        "            </div>",
                        "        </div>"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>executeBundles(bundles)</dfn>",
                        "    ::",
                        "        Executes the commands previously recorded into the given {{GPURenderBundle}}s as part of",
                        "        this render pass.",
                        "",
                        "        When a {{GPURenderBundle}} is executed, it does not inherit the render pass's pipeline, bind",
                        "        groups, or vertex and index buffers. After a {{GPURenderBundle}} has executed, the render",
                        "        pass's pipeline, bind group, and vertex/index buffer state is cleared",
                        "        (to the initial, empty values).",
                        "",
                        "        Note: The state is cleared, not restored to the previous state.",
                        "        This occurs even if zero {{GPURenderBundle|GPURenderBundles}} are executed.",
                        "",
                        "        <div algorithm=GPURenderPassEncoder.executeBundles>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderPassEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/executeBundles(bundles)\">",
                        "                    |bundles|: List of render bundles to execute.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]",
                        "                    and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - For each |bundle| in |bundles|:",
                        "                            - |bundle| must be [$valid to use with$] |this|.",
                        "                            - |this|.{{GPURenderCommandsMixin/[[layout]]}} must equal |bundle|.{{GPURenderBundle/[[layout]]}}.",
                        "                            - If |this|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} is true, |bundle|.{{GPURenderBundle/[[depthReadOnly]]}} must be true.",
                        "                            - If |this|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} is true, |bundle|.{{GPURenderBundle/[[stencilReadOnly]]}} must be true.",
                        "                    </div>",
                        "",
                        "                1. For each |bundle| in |bundles|:",
                        "                    1. Increment |this|.{{GPURenderCommandsMixin/[[drawCount]]}} by |bundle|.{{GPURenderBundle/[[drawCount]]}}.",
                        "",
                        "                1. [=map/Clear=] |this|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[pipeline]]}} to `null`.",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer]]}} to `null`.",
                        "                1. [=map/Clear=] |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}.",
                        "",
                        "                1. Let |passState| be a snapshot of |this|'s current state.",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the",
                        "                    [=Queue timeline=] with |renderState| when executed.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. For each |bundle| in |bundles|:",
                        "                    1. Execute each command in |bundle|.{{GPURenderBundle/[[command_list]]}}",
                        "                        with |passState| and |renderState|.",
                        "",
                        "                        Note: |renderState| cannot be changed by executing render bundles.",
                        "                        Also note, no mutable |passState| state is visible to render bundles.",
                        "            </div>",
                        "",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "RenderState",
            [
                {
                    "target": "RenderState",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[occlusionQueryIndex]]</dfn>, of type {{GPUSize32}}",
                        "    ::",
                        "        The index into {{GPURenderPassEncoder/[[occlusion_query_set]]}} at which to store the",
                        "        occlusion query results.",
                        "",
                        "    : <dfn>\\[[viewport]]</dfn>",
                        "    ::  Current viewport rectangle and depth range. Initially set to the following values:",
                        "        - `x, y` = `0.0, 0.0`",
                        "        - `width, height` = the dimensions of the pass's render targets",
                        "        - `minDepth, maxDepth` = `0.0, 1.0`",
                        "",
                        "    : <dfn>\\[[scissorRect]]</dfn>",
                        "    ::  Current scissor rectangle. Initially set to the following values:",
                        "        - `x, y` = `0, 0`",
                        "        - `width, height` = the dimensions of the pass's render targets",
                        "",
                        "    : <dfn>\\[[blendConstant]]</dfn>, of type {{GPUColor}}",
                        "    ::  Current blend constant value, initially `[0, 0, 0, 0]`.",
                        "",
                        "    : <dfn>\\[[stencilReference]]</dfn>, of type {{GPUStencilValue}}",
                        "    ::  Current stencil reference value, initially `0`."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassTimestampWrites",
            [
                {
                    "target": "GPURenderPassTimestampWrites",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>querySet</dfn>",
                        "    ::",
                        "        The {{GPUQuerySet}}, of type {{GPUQueryType/\"timestamp\"}}, that the query results will be",
                        "        written to.",
                        "",
                        "    : <dfn>beginningOfPassWriteIndex</dfn>",
                        "    ::",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into",
                        "        which the timestamp at the beginning of the render pass will be written.",
                        "",
                        "    : <dfn>endOfPassWriteIndex</dfn>",
                        "    ::",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into",
                        "        which the timestamp at the end of the render pass will be written."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassDescriptor",
            [
                {
                    "target": "GPURenderPassDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>colorAttachments</dfn>",
                        "    ::",
                        "        The set of {{GPURenderPassColorAttachment}} values in this sequence defines which",
                        "        color attachments will be output to when executing this render pass.",
                        "",
                        "        Due to [=compatible usage list|usage compatibility=], no color attachment",
                        "        may alias another attachment or any resource used inside the render pass.",
                        "",
                        "    : <dfn>depthStencilAttachment</dfn>",
                        "    ::",
                        "        The {{GPURenderPassDepthStencilAttachment}} value that defines the depth/stencil",
                        "        attachment that will be output to and tested against when executing this render pass.",
                        "",
                        "        Due to [=compatible usage list|usage compatibility=], no writable depth/stencil attachment",
                        "        may alias another attachment or any resource used inside the render pass.",
                        "",
                        "    : <dfn>occlusionQuerySet</dfn>",
                        "    ::",
                        "        The {{GPUQuerySet}} value defines where the occlusion query results will be stored for this pass.",
                        "",
                        "    : <dfn>timestampWrites</dfn>",
                        "    ::",
                        "        Defines which timestamp values will be written for this pass, and where to write them to.",
                        "",
                        "    : <dfn>maxDrawCount</dfn>",
                        "    ::",
                        "        The maximum number of draw calls that will be done in the render pass. Used by some",
                        "        implementations to size work injected before the render pass. Keeping the default value",
                        "        is a good default, unless it is known that more draw calls will be done."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassColorAttachment",
            [
                {
                    "target": "GPURenderPassColorAttachment",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>view</dfn>",
                        "    ::",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will be output to for this",
                        "        color attachment.",
                        "",
                        "    : <dfn>depthSlice</dfn>",
                        "    ::",
                        "        Indicates the depth slice index of {{GPUTextureViewDimension/\"3d\"}} {{GPURenderPassColorAttachment/view}}",
                        "        that will be output to for this color attachment.",
                        "",
                        "    : <dfn>resolveTarget</dfn>",
                        "    ::",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will receive the resolved",
                        "        output for this color attachment if {{GPURenderPassColorAttachment/view}} is",
                        "        multisampled.",
                        "",
                        "    : <dfn>clearValue</dfn>",
                        "    ::",
                        "        Indicates the value to clear {{GPURenderPassColorAttachment/view}} to prior to executing the",
                        "        render pass. If not [=map/exist|provided=], defaults to `{r: 0, g: 0, b: 0, a: 0}`. Ignored",
                        "        if {{GPURenderPassColorAttachment/loadOp}} is not {{GPULoadOp/\"clear\"}}.",
                        "",
                        "        The components of {{GPURenderPassColorAttachment/clearValue}} are all double values.",
                        "        They are converted [$to a texel value of texture format$] matching the render attachment.",
                        "        If conversion fails, a validation error is generated.",
                        "",
                        "    : <dfn>loadOp</dfn>",
                        "    ::",
                        "        Indicates the load operation to perform on {{GPURenderPassColorAttachment/view}} prior to",
                        "        executing the render pass.",
                        "",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.",
                        "",
                        "    : <dfn>storeOp</dfn>",
                        "    ::",
                        "        The store operation to perform on {{GPURenderPassColorAttachment/view}}",
                        "        after executing the render pass."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassDepthStencilAttachment",
            [
                {
                    "target": "GPURenderPassDepthStencilAttachment",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>view</dfn>",
                        "    ::",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will be output to",
                        "        and read from for this depth/stencil attachment.",
                        "",
                        "    : <dfn>depthClearValue</dfn>",
                        "    ::",
                        "        Indicates the value to clear {{GPURenderPassDepthStencilAttachment/view}}'s depth component",
                        "        to prior to executing the render pass. Ignored if {{GPURenderPassDepthStencilAttachment/depthLoadOp}}",
                        "        is not {{GPULoadOp/\"clear\"}}. Must be between 0.0 and 1.0, inclusive.",
                        "        <!-- POSTV1(unrestricted-depth): unless unrestricted depth is enabled -->",
                        "",
                        "    : <dfn>depthLoadOp</dfn>",
                        "    ::",
                        "        Indicates the load operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s",
                        "        depth component prior to executing the render pass.",
                        "",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.",
                        "",
                        "    : <dfn>depthStoreOp</dfn>",
                        "    ::",
                        "        The store operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s",
                        "        depth component after executing the render pass.",
                        "",
                        "    : <dfn>depthReadOnly</dfn>",
                        "    ::",
                        "        Indicates that the depth component of {{GPURenderPassDepthStencilAttachment/view}}",
                        "        is read only.",
                        "",
                        "    : <dfn>stencilClearValue</dfn>",
                        "    ::",
                        "        Indicates the value to clear {{GPURenderPassDepthStencilAttachment/view}}'s stencil component",
                        "        to prior to executing the render pass. Ignored if {{GPURenderPassDepthStencilAttachment/stencilLoadOp}}",
                        "        is not {{GPULoadOp/\"clear\"}}.",
                        "",
                        "        The value will be converted to the type of the stencil aspect of |view| by taking the same",
                        "        number of LSBs as the number of bits in the stencil aspect of one texel block of |view|.",
                        "",
                        "    : <dfn>stencilLoadOp</dfn>",
                        "    ::",
                        "        Indicates the load operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s",
                        "        stencil component prior to executing the render pass.",
                        "",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.",
                        "",
                        "    : <dfn>stencilStoreOp</dfn>",
                        "    ::",
                        "        The store operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s",
                        "        stencil component after executing the render pass.",
                        "",
                        "    : <dfn>stencilReadOnly</dfn>",
                        "    ::",
                        "        Indicates that the stencil component of {{GPURenderPassDepthStencilAttachment/view}}",
                        "        is read only."
                    ]
                }
            ]
        ],
        [
            "GPULoadOp",
            [
                {
                    "target": "GPULoadOp",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"load\"</dfn>",
                        "    ::",
                        "        Loads the existing value for this attachment into the render pass.",
                        "",
                        "    : <dfn>\"clear\"</dfn>",
                        "    ::",
                        "        Loads a clear value for this attachment into the render pass.",
                        "",
                        "        Note:",
                        "        On some GPU hardware (primarily mobile), {{GPULoadOp/\"clear\"}} is significantly cheaper",
                        "        because it avoids loading data from main memory into tile-local memory.",
                        "        On other GPU hardware, there isn't a significant difference. As a result, it is",
                        "        recommended to use {{GPULoadOp/\"clear\"}} rather than {{GPULoadOp/\"load\"}} in cases where the",
                        "        initial value doesn't matter (e.g. the render target will be cleared using a skybox)."
                    ]
                }
            ]
        ],
        [
            "GPUStoreOp",
            [
                {
                    "target": "GPUStoreOp",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"store\"</dfn>",
                        "    ::",
                        "        Stores the resulting value of the render pass for this attachment.",
                        "",
                        "    : <dfn>\"discard\"</dfn>",
                        "    ::",
                        "        Discards the resulting value of the render pass for this attachment."
                    ]
                }
            ]
        ],
        [
            "GPURenderPassLayout",
            [
                {
                    "target": "GPURenderPassLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>colorFormats</dfn>",
                        "    ::",
                        "        A list of the {{GPUTextureFormat}}s of the color attachments for this pass or bundle.",
                        "",
                        "    : <dfn>depthStencilFormat</dfn>",
                        "    ::",
                        "        The {{GPUTextureFormat}} of the depth/stencil attachment for this pass or bundle.",
                        "",
                        "    : <dfn>sampleCount</dfn>",
                        "    ::",
                        "        Number of samples per pixel in the attachments for this pass or bundle."
                    ]
                }
            ]
        ],
        [
            "GPURenderCommandsMixin",
            [
                {
                    "target": "GPURenderCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPURenderPassLayout}}, readonly",
                        "    ::",
                        "        The layout of the render pass.",
                        "",
                        "    : <dfn>\\[[depthReadOnly]]</dfn>, of type boolean, readonly",
                        "    ::",
                        "        If `true`, indicates that the depth component is not modified.",
                        "",
                        "    : <dfn>\\[[stencilReadOnly]]</dfn>, of type boolean, readonly",
                        "    ::",
                        "        If `true`, indicates that the stencil component is not modified.",
                        "",
                        "    : <dfn>\\[[pipeline]]</dfn>, of type {{GPURenderPipeline}}",
                        "    ::",
                        "        The current {{GPURenderPipeline}}, initially `null`.",
                        "",
                        "    : <dfn>\\[[index_buffer]]</dfn>, of type {{GPUBuffer}}",
                        "    ::",
                        "        The current buffer to read index data from, initially `null`.",
                        "",
                        "    : <dfn>\\[[index_format]]</dfn>, of type {{GPUIndexFormat}}",
                        "    ::",
                        "        The format of the index data in {{GPURenderCommandsMixin/[[index_buffer]]}}.",
                        "",
                        "    : <dfn>\\[[index_buffer_offset]]</dfn>, of type {{GPUSize64}}",
                        "    ::",
                        "        The offset in bytes of the section of {{GPURenderCommandsMixin/[[index_buffer]]}} currently set.",
                        "",
                        "    : <dfn>\\[[index_buffer_size]]</dfn>, of type {{GPUSize64}}",
                        "    ::",
                        "        The size in bytes of the section of {{GPURenderCommandsMixin/[[index_buffer]]}} currently set,",
                        "        initially `0`.",
                        "",
                        "    : <dfn>\\[[vertex_buffers]]</dfn>, of type [=ordered map=]&lt;slot, {{GPUBuffer}}&gt;",
                        "    ::",
                        "        The current {{GPUBuffer}}s to read vertex data from for each slot, initially empty.",
                        "",
                        "    : <dfn>\\[[vertex_buffer_sizes]]</dfn>, of type [=ordered map=]&lt;slot, {{GPUSize64}}&gt;",
                        "    ::",
                        "        The size in bytes of the section of {{GPUBuffer}} currently set for each slot, initially",
                        "        empty.",
                        "",
                        "    : <dfn>\\[[drawCount]]</dfn>, of type {{GPUSize64}}",
                        "    ::",
                        "        The number of draw commands recorded in this encoder."
                    ]
                },
                {
                    "target": "GPURenderCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setPipeline(pipeline)</dfn>",
                        "    ::",
                        "        Sets the current {{GPURenderPipeline}}.",
                        "",
                        "        <div algorithm=GPURenderCommandsMixin.setPipeline>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderCommandsMixin}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderCommandsMixin/setPipeline(pipeline)\">",
                        "                    |pipeline|: The render pipeline to use for subsequent drawing commands.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. Let |pipelineTargetsLayout| be [$derive render targets layout from pipeline$](|pipeline|.{{GPURenderPipeline/[[descriptor]]}}).",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |pipeline| is [$valid to use with$] |this|.",
                        "                        - |this|.{{GPURenderCommandsMixin/[[layout]]}} [=render pass layout/equals=] |pipelineTargetsLayout|.",
                        "                        - If |pipeline|.{{GPURenderPipeline/[[writesDepth]]}}:",
                        "                            |this|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} must be `false`.",
                        "                        - If |pipeline|.{{GPURenderPipeline/[[writesStencil]]}}:",
                        "                            |this|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} must be `false`.",
                        "                    </div>",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[pipeline]]}} to be |pipeline|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>setIndexBuffer(buffer, indexFormat, offset, size)</dfn>",
                        "    ::",
                        "        Sets the current index buffer.",
                        "",
                        "        <div algorithm=GPURenderCommandsMixin.setIndexBuffer>",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.",
                        "",
                        "            **Arguments:**",
                        "",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/setIndexBuffer(buffer, indexFormat, offset, size)\">",
                        "                |buffer|: Buffer containing index data to use for subsequent drawing commands.",
                        "                |indexFormat|: Format of the index data contained in |buffer|.",
                        "                |offset|: Offset in bytes into |buffer| where the index data begins. Defaults to `0`.",
                        "                |size|: Size in bytes of the index data in |buffer|.",
                        "                    Defaults to the size of the buffer minus the offset.",
                        "            </pre>",
                        "",
                        "            **Returns:** {{undefined}}",
                        "",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "",
                        "            <div class=device-timeline>",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If |size| is missing, set |size| to max(0, |buffer|.{{GPUBuffer/size}} - |offset|).",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |buffer| is [$valid to use with$] |this|.",
                        "                        - |buffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/INDEX}}.",
                        "                        - |offset| is a multiple of |indexFormat|'s byte size.",
                        "                        - |offset| + |size| &le; |buffer|.{{GPUBuffer/size}}.",
                        "                    </div>",
                        "                1. Add |buffer| to the [=usage scope=] as [=internal usage/input=].",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer]]}} to be |buffer|.",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_format]]}} to be |indexFormat|.",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer_offset]]}} to be |offset|.",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer_size]]}} to be |size|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>setVertexBuffer(slot, buffer, offset, size)</dfn>",
                        "    ::",
                        "        Sets the current vertex buffer for the given slot.",
                        "",
                        "        <div algorithm=GPURenderCommandsMixin.setVertexBuffer>",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.",
                        "",
                        "            **Arguments:**",
                        "",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/setVertexBuffer(slot, buffer, offset, size)\">",
                        "                |slot|: The vertex buffer slot to set the vertex buffer for.",
                        "                |buffer|: Buffer containing vertex data to use for subsequent drawing commands.",
                        "                |offset|: Offset in bytes into |buffer| where the vertex data begins. Defaults to `0`.",
                        "                |size|: Size in bytes of the vertex data in |buffer|.",
                        "                    Defaults to the size of the buffer minus the offset.",
                        "            </pre>",
                        "",
                        "            **Returns:** {{undefined}}",
                        "",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "",
                        "            <div class=device-timeline>",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. Let |bufferSize| be 0 if |buffer| is `null`, or |buffer|.{{GPUBuffer/size}} if not.",
                        "                1. If |size| is missing, set |size| to max(0, |bufferSize| - |offset|).",
                        "                1. If any of the following requirements are unmet, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |slot| must be &lt;",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxVertexBuffers}}.",
                        "                        - |offset| must be a multiple of 4.",
                        "                        - |offset| + |size| must be &le; |bufferSize|.",
                        "                    </div>",
                        "                1. If |buffer| is `null`:",
                        "                    1. [=map/Remove=] |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}[|slot|].",
                        "                    1. [=map/Remove=] |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|].",
                        "",
                        "                    Otherwise:",
                        "",
                        "                    1. If any of the following requirements are unmet, make |this| [=invalid=] and stop.",
                        "",
                        "                        <div class=validusage>",
                        "                            - |buffer| must be [$valid to use with$] |this|.",
                        "                            - |buffer|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/VERTEX}}.",
                        "                        </div>",
                        "                    1. Add |buffer| to the [=usage scope=] as [=internal usage/input=].",
                        "                    1. Set |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}[|slot|] to be |buffer|.",
                        "                    1. Set |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|] to be |size|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>draw(vertexCount, instanceCount, firstVertex, firstInstance)</dfn>",
                        "    ::",
                        "        Draws primitives.",
                        "        See [[#rendering-operations]] for the detailed specification.",
                        "",
                        "        <div algorithm=GPURenderCommandsMixin.draw>",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.",
                        "",
                        "            **Arguments:**",
                        "",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/draw(vertexCount, instanceCount, firstVertex, firstInstance)\">",
                        "                |vertexCount|: The number of vertices to draw.",
                        "                |instanceCount|: The number of instances to draw.",
                        "                |firstVertex|: Offset into the vertex buffers, in vertices, to begin drawing from.",
                        "                |firstInstance|: First instance to draw.",
                        "            </pre>",
                        "",
                        "            **Returns:** {{undefined}}",
                        "",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:",
                        "",
                        "            <div class=device-timeline>",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - It is [$valid to draw$] with |this|.",
                        "                        - Let |buffers| be |this|.{{GPURenderCommandsMixin/[[pipeline]]}}.{{GPURenderPipeline/[[descriptor]]}}.{{GPURenderPipelineDescriptor/vertex}}.{{GPUVertexState/buffers}}.",
                        "                        - For each {{GPUIndex32}} |slot| from `0` to |buffers|.length (non-inclusive):",
                        "                            - If |buffers|[|slot|] is `null`, [=iteration/continue=].",
                        "                            - Let |bufferSize| be |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|].",
                        "                            - Let |stride| be |buffers|[|slot|].{{GPUVertexBufferLayout/arrayStride}}.",
                        "                            - Let |lastStride| be max(|attribute|.{{GPUVertexAttribute/offset}} &plus; sizeof(|attribute|.{{GPUVertexAttribute/format}}))",
                        "                                for each |attribute| in |buffers|[|slot|].{{GPUVertexBufferLayout/attributes}}.",
                        "                            - Let |strideCount| be computed based on |buffers|[|slot|].{{GPUVertexBufferLayout/stepMode}}:",
                        "",
                        "                                <dl class=switch>",
                        "                                    : {{GPUVertexStepMode/\"vertex\"}}",
                        "                                    :: |firstVertex| &plus; |vertexCount|",
                        "                                    : {{GPUVertexStepMode/\"instance\"}}",
                        "                                    :: |firstInstance| &plus; |instanceCount|"
                    ]
                }
            ]
        ],
        [
            "GPURenderBundle",
            [
                {
                    "target": "GPURenderBundle",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_list]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;",
                        "    ::",
                        "        A [=list=] of [=GPU commands=] to be submitted to the {{GPURenderPassEncoder}} when the",
                        "        {{GPURenderBundle}} is executed.",
                        "",
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPURenderPassLayout}}",
                        "    ::",
                        "        The layout of the render bundle.",
                        "",
                        "    : <dfn>\\[[depthReadOnly]]</dfn>, of type boolean",
                        "    ::",
                        "        If `true`, indicates that the depth component is not modified by executing this render bundle.",
                        "",
                        "    : <dfn>\\[[stencilReadOnly]]</dfn>, of type boolean",
                        "    ::",
                        "        If `true`, indicates that the stencil component is not modified by executing this render bundle.",
                        "",
                        "    : <dfn>\\[[drawCount]]</dfn>, of type {{GPUSize64}}",
                        "    ::",
                        "        The number of draw commands in this {{GPURenderBundle}}."
                    ]
                }
            ]
        ],
        [
            "GPURenderBundleEncoderDescriptor",
            [
                {
                    "target": "GPURenderBundleEncoderDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>depthReadOnly</dfn>",
                        "    ::",
                        "        If `true`, indicates that the render bundle does not modify the depth component of the",
                        "        {{GPURenderPassDepthStencilAttachment}} of any render pass the render bundle is executed",
                        "        in.",
                        "",
                        "    : <dfn>stencilReadOnly</dfn>",
                        "    ::",
                        "        If `true`, indicates that the render bundle does not modify the stencil component of the",
                        "        {{GPURenderPassDepthStencilAttachment}} of any render pass the render bundle is executed",
                        "        in."
                    ]
                }
            ]
        ],
        [
            "GPURenderBundleEncoder",
            [
                {
                    "target": "GPURenderBundleEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>finish(descriptor)</dfn>",
                        "    ::",
                        "        Completes recording of the render bundle commands sequence.",
                        "",
                        "        <div algorithm=GPURenderBundleEncoder.finish>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPURenderBundleEncoder}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPURenderBundleEncoder/finish(descriptor)\">",
                        "                    descriptor:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{GPURenderBundle}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |renderBundle| be a new {{GPURenderBundle}}.",
                        "                1. Issue the |finish steps| on the [=Device timeline=] of",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Return |renderBundle|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] |finish steps|:",
                        "",
                        "                1. Let |validationSucceeded| be `true` if all of the following requirements are met, and `false` otherwise.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |this| must be [=valid=].",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].",
                        "                        - Every [=usage scope=] contained in |this| must satisfy the [=usage scope validation=].",
                        "                    </div>",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".",
                        "                1. If |validationSucceeded| is `false`, then:",
                        "                    1. [$Generate a validation error$].",
                        "                    1. Return a new [=invalid=] {{GPURenderBundle}}.",
                        "                1. Set |renderBundle|.{{GPURenderBundle/[[command_list]]}} to",
                        "                    |this|.{{GPUCommandsMixin/[[commands]]}}.",
                        "                1. Set |renderBundle|.{{GPURenderBundle/[[drawCount]]}} to",
                        "                    |this|.{{GPURenderCommandsMixin/[[drawCount]]}}.",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUQueue",
            [
                {
                    "target": "GPUQueue",
                    "type": "method",
                    "lines": [
                        "    : <dfn>writeBuffer(buffer, bufferOffset, data, dataOffset, size)</dfn>",
                        "    ::",
                        "        Issues a write operation of the provided data into a {{GPUBuffer}}.",
                        "",
                        "        <div algorithm=GPUQueue.writeBuffer>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUQueue}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUQueue/writeBuffer(buffer, bufferOffset, data, dataOffset, size)\">",
                        "                    |buffer|: The buffer to write to.",
                        "                    |bufferOffset|: Offset in bytes into |buffer| to begin writing at.",
                        "                    |data|: Data to write into |buffer|.",
                        "                    |dataOffset|: Offset in into |data| to begin writing from. Given in elements if",
                        "                        |data| is a `TypedArray` and bytes otherwise.",
                        "                    |size|: Size of content to write from |data| to |buffer|. Given in elements if",
                        "                        |data| is a `TypedArray` and bytes otherwise.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |data| is an {{ArrayBuffer}} or {{DataView}}, let the element type be \"byte\".",
                        "                    Otherwise, |data| is a TypedArray; let the element type be the type of the TypedArray.",
                        "                1. Let |dataSize| be the size of |data|, in elements.",
                        "                1. If |size| is missing,",
                        "                    let |contentsSize| be |dataSize| &minus; |dataOffset|.",
                        "                    Otherwise, let |contentsSize| be |size|.",
                        "                1. If any of the following conditions are unsatisfied,",
                        "                    throw {{OperationError}} and stop.",
                        "",
                        "                    <!-- Note: it's easiest to write the valid usage rules inline",
                        "                        here, because they depend on contentsSize above. -->",
                        "",
                        "                    <div class=validusage>",
                        "                        - |contentsSize| &ge; 0.",
                        "                        - |dataOffset| + |contentsSize| &le; |dataSize|.",
                        "                        - |contentsSize|, converted to bytes, is a multiple of 4 bytes.",
                        "                    </div>",
                        "                1. Let |dataContents| be [=get a copy of the buffer source|a copy of the bytes held by the buffer source=] |data|.",
                        "                1. Let |contents| be the |contentsSize| elements of |dataContents| starting at",
                        "                    an offset of |dataOffset| elements.",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. If any of the following conditions are unsatisfied,",
                        "                    [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |buffer| is [$valid to use with$] |this|.",
                        "                        - |buffer|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] is \"[=buffer internals/state/available=]\".",
                        "                        - |buffer|.{{GPUBuffer/usage}} includes {{GPUBufferUsage/COPY_DST}}.",
                        "                        - |bufferOffset|, converted to bytes, is a multiple of 4 bytes.",
                        "                        - |bufferOffset| + |contentsSize|, converted to bytes, &le; |buffer|.{{GPUBuffer/size}} bytes.",
                        "                    </div>",
                        "                1. Write |contents| into |buffer| starting at |bufferOffset|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>writeTexture(destination, data, dataLayout, size)</dfn>",
                        "    ::",
                        "        Issues a write operation of the provided data into a {{GPUTexture}}.",
                        "",
                        "        <div algorithm=GPUQueue.writeTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUQueue}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUQueue/writeTexture(destination, data, dataLayout, size)\">",
                        "                    |destination|: The [=texture subresource=] and origin to write to.",
                        "                    |data|: Data to write into |destination|.",
                        "                    |dataLayout|: Layout of the content in |data|.",
                        "                    |size|: Extents of the content to write from |data| to |destination|.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|size|).",
                        "                1. Let |dataBytes| be [=get a copy of the buffer source|a copy of the bytes held by the buffer source=] |data|.",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Let |texture| be |destination|.{{GPUImageCopyTexture/texture}}.",
                        "                1. If any of the following conditions are unsatisfied,",
                        "                    [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |texture|.{{GPUTexture/[[destroyed]]}} is `false`.",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |size|) returns `true`.",
                        "                        - |texture|.{{GPUTexture/usage}} includes {{GPUTextureUsage/COPY_DST}}.",
                        "                        - |texture|.{{GPUTexture/sampleCount}} is 1.",
                        "                        - [=validating texture copy range=](|destination|, |size|) return `true`.",
                        "                        - |destination|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of",
                        "                            |texture|.{{GPUTexture/format}}.",
                        "                        - That aspect must be a valid image copy destination according to [[#depth-formats]].",
                        "                        - Let |aspectSpecificFormat| = |texture|.{{GPUTexture/format}}.",
                        "                        - If |texture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] of |texture|.{{GPUTexture/format}} according to [[#depth-formats]].",
                        "                        - [$validating linear texture data$](|dataLayout|,",
                        "                            |dataBytes|.[=byte sequence/length=],",
                        "                            |aspectSpecificFormat|,",
                        "                            |size|) succeeds.",
                        "",
                        "                        Note: unlike",
                        "                        {{GPUCommandEncoder}}.{{GPUCommandEncoder/copyBufferToTexture()}},",
                        "                        there is no alignment requirement on either",
                        "                        |dataLayout|.{{GPUImageDataLayout/bytesPerRow}} or |dataLayout|.{{GPUImageDataLayout/offset}}.",
                        "                    </div>",
                        "                1. Let |contents| be the contents of the [=images=] seen by",
                        "                    viewing |dataBytes| with |dataLayout| and |size|.",
                        "",
                        "                    Issue: Specify more formally.",
                        "",
                        "                    Note: This is described as copying all of |data| to the device timeline,",
                        "                    but in practice |data| could be much larger than necessary.",
                        "                    Implementations should optimize by copying only the necessary bytes.",
                        "                1. Issue the subsequent steps on the [=Queue timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=queue>",
                        "                [=Queue timeline=] steps:",
                        "",
                        "                1. Write |contents| into |destination|.",
                        "",
                        "                    Issue: Define copy, including provision for snorm.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>copyExternalImageToTexture(source, destination, copySize)</dfn>",
                        "    ::",
                        "        Issues a copy operation of the contents of a platform image/canvas",
                        "        into the destination texture.",
                        "",
                        "        This operation performs [[#color-space-conversions|color encoding]] into the destination",
                        "        encoding according to the parameters of {{GPUImageCopyTextureTagged}}.",
                        "",
                        "        Copying into a `-srgb` texture results in the same texture bytes, not the same decoded",
                        "        values, as copying into the corresponding non-`-srgb` format.",
                        "        Thus, after a copy operation, sampling the destination texture has",
                        "        different results depending on whether its format is `-srgb`, all else unchanged.",
                        "",
                        "        <!-- POSTV1(srgb-linear): If added, explain here how it interacts. -->",
                        "",
                        "        <div class=note heading>",
                        "            When copying from a `\"webgl\"`/`\"webgl2\"` context canvas, the",
                        "            [=WebGL Drawing Buffer=] may be not exist during certain points in the",
                        "            frame presentation cycle (after the image has been moved to the compositor",
                        "            for display). To avoid this, either:",
                        "",
                        "            - Issue {{GPUQueue/copyExternalImageToTexture()}} in the same [=task=] with",
                        "                WebGL rendering operation, to ensure the copy occurs before the WebGL",
                        "                canvas is presented.",
                        "            - If not possible, set the `preserveDrawingBuffer` option in",
                        "                {{WebGLContextAttributes}} to `true`, so that the drawing buffer will",
                        "                still contain a copy of the frame contents after they've been presented.",
                        "                Note, this extra copy may have a performance cost.",
                        "        </div>",
                        "",
                        "        <div algorithm=GPUQueue.copyExternalImageToTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUQueue}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUQueue/copyExternalImageToTexture(source, destination, copySize)\">",
                        "                    |source|: source image and origin to copy to |destination|.",
                        "                    |destination|: The [=texture subresource=] and origin to write to, and its encoding metadata.",
                        "                    |copySize|: Extents of the content to write from |source| to |destination|.",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. [=?=] [$validate GPUOrigin2D shape$](|source|.{{GPUImageCopyExternalImage/origin}}).",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).",
                        "                1. Let |sourceImage| be |source|.{{GPUImageCopyExternalImage/source}}",
                        "                1. If |sourceImage| <l spec=html>[=is not origin-clean=]</l>,",
                        "                    throw a {{SecurityError}} and stop.",
                        "                1. If any of the following requirements are unmet, throw an {{OperationError}} and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |source|.|origin|.[=GPUOrigin3D/x=] + |copySize|.[=GPUExtent3D/width=]",
                        "                            must be &le; the width of |sourceImage|.",
                        "                        - |source|.|origin|.[=GPUOrigin3D/y=] + |copySize|.[=GPUExtent3D/height=]",
                        "                            must be &le; the height of |sourceImage|.",
                        "                        - |source|.|origin|.[=GPUOrigin3D/z=] + |copySize|.[=GPUExtent3D/depthOrArrayLayers=]",
                        "                            must be &le; 1.",
                        "                    </div>",
                        "                1. Let |usability| be [=?=] [=check the usability of the image argument=](|source|).",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. Let |texture| be |destination|.{{GPUImageCopyTexture/texture}}.",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - |usability| must be `good`.",
                        "                        - |destination|.{{GPUImageCopyTexture/texture}} must be [$valid to use with$] |this|.",
                        "                        - [$validating GPUImageCopyTexture$](destination, copySize) must return `true`.",
                        "                        - [=validating texture copy range=](destination, copySize) must return `true`.",
                        "                        - |texture|.{{GPUTexture/usage}} must include both",
                        "                            {{GPUTextureUsage/RENDER_ATTACHMENT}} and {{GPUTextureUsage/COPY_DST}}.",
                        "                        - |texture|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.",
                        "                        - |texture|.{{GPUTexture/sampleCount}} must be 1.",
                        "                        - |texture|.{{GPUTexture/format}} must be one of the following",
                        "                            formats (which all support {{GPUTextureUsage/RENDER_ATTACHMENT}} usage):",
                        "                            - {{GPUTextureFormat/\"r8unorm\"}}",
                        "                            - {{GPUTextureFormat/\"r16float\"}}",
                        "                            - {{GPUTextureFormat/\"r32float\"}}",
                        "                            - {{GPUTextureFormat/\"rg8unorm\"}}",
                        "                            - {{GPUTextureFormat/\"rg16float\"}}",
                        "                            - {{GPUTextureFormat/\"rg32float\"}}",
                        "                            - {{GPUTextureFormat/\"rgba8unorm\"}}",
                        "                            - {{GPUTextureFormat/\"rgba8unorm-srgb\"}}",
                        "                            - {{GPUTextureFormat/\"bgra8unorm\"}}",
                        "                            - {{GPUTextureFormat/\"bgra8unorm-srgb\"}}",
                        "                            - {{GPUTextureFormat/\"rgb10a2unorm\"}}",
                        "                            - {{GPUTextureFormat/\"rgba16float\"}}",
                        "                            - {{GPUTextureFormat/\"rgba32float\"}}",
                        "                    </div>",
                        "                1. Issue: Do the actual copy.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>submit(commandBuffers)</dfn>",
                        "    ::",
                        "        Schedules the execution of the command buffers by the GPU on this queue.",
                        "",
                        "        Submitted command buffers cannot be used again.",
                        "",
                        "        <div algorithm=GPUQueue.submit>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUQueue}} this.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUQueue/submit(commandBuffers)\">",
                        "                    |commandBuffers|:",
                        "                </pre>",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|:",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - Every {{GPUCommandBuffer}} in |commandBuffers| must be [$valid to use with$] |this|.",
                        "                        - For each of the following types of resources used by any command in any",
                        "                            element of |commandBuffers|:",
                        "",
                        "                            <dl class=switch>",
                        "                                : {{GPUBuffer}} |b|",
                        "                                :: |b|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] must",
                        "                                    be \"[=buffer internals/state/available=]\".",
                        "                                : {{GPUTexture}} |t|",
                        "                                :: |t|.{{GPUTexture/[[destroyed]]}} must be `false`.",
                        "                                : {{GPUExternalTexture}} |et|",
                        "                                :: |et|.{{GPUExternalTexture/[[expired]]}} must be `false`.",
                        "                                : {{GPUQuerySet}} |qs|",
                        "                                :: |qs| must be in the [=query set state/available=] state.",
                        "                                    For occlusion queries, the {{GPURenderPassDescriptor/occlusionQuerySet}}",
                        "                                    in {{GPUCommandEncoder/beginRenderPass()}} is not \"used\" unless",
                        "                                    it is also used by {{GPURenderPassEncoder/beginOcclusionQuery()}}."
                    ]
                }
            ]
        ],
        [
            "GPUQuerySet",
            [
                {
                    "target": "GPUQuerySet",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>type</dfn>",
                        "    ::",
                        "        The type of the queries managed by this {{GPUQuerySet}}.",
                        "",
                        "    : <dfn>count</dfn>",
                        "    ::",
                        "        The number of queries managed by this {{GPUQuerySet}}."
                    ]
                },
                {
                    "target": "GPUQuerySet",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[state]]</dfn>, of type [=query set state=]",
                        "    ::",
                        "        The current state of the {{GPUQuerySet}}."
                    ]
                },
                {
                    "target": "GPUQuerySet",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>",
                        "    ::",
                        "        Destroys the {{GPUQuerySet}}.",
                        "",
                        "        <div algorithm=GPUQuerySet.destroy>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUQuerySet}} |this|.",
                        "",
                        "                **Returns:** {{undefined}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Set |this|.{{GPUQuerySet/[[state]]}} to [=query set state/destroyed=].",
                        "            </div>",
                        "        </div>"
                    ]
                }
            ]
        ],
        [
            "GPUQuerySetDescriptor",
            [
                {
                    "target": "GPUQuerySetDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>",
                        "    ::",
                        "        The type of queries managed by {{GPUQuerySet}}.",
                        "",
                        "    : <dfn>count</dfn>",
                        "    ::",
                        "        The number of queries managed by {{GPUQuerySet}}."
                    ]
                }
            ]
        ],
        [
            "GPUCanvasContext",
            [
                {
                    "target": "GPUCanvasContext",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>canvas</dfn>",
                        "    ::",
                        "        The canvas this context was created from."
                    ]
                },
                {
                    "target": "GPUCanvasContext",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[configuration]]</dfn>, of type {{GPUCanvasConfiguration}}?, initially `null`",
                        "    ::",
                        "        The options this context is currently configured with.",
                        "",
                        "        `null` if the context has not been configured or has been",
                        "        {{GPUCanvasContext/unconfigure()|unconfigured}}.",
                        "",
                        "    : <dfn>\\[[textureDescriptor]]</dfn>, of type {{GPUTextureDescriptor}}?, initially `null`",
                        "    ::",
                        "        The currently configured texture descriptor, derived from the",
                        "        {{GPUCanvasContext/[[configuration]]}} and canvas.",
                        "",
                        "        `null` if the context has not been configured or has been",
                        "        {{GPUCanvasContext/unconfigure()|unconfigured}}.",
                        "",
                        "    : <dfn>\\[[drawingBuffer]]</dfn>, an image, initially",
                        "        a transparent black image with the same size as the canvas",
                        "    ::",
                        "        The drawing buffer is the working-copy image data of the canvas.",
                        "        It is exposed as writable by {{GPUCanvasContext/[[currentTexture]]}}",
                        "        (returned by {{GPUCanvasContext/getCurrentTexture()}}).",
                        "",
                        "        The drawing buffer is used to [$get a copy of the image contents of a context$], which",
                        "        occurs when the canvas is displayed or otherwise read. It may be transparent, even if",
                        "        {{GPUCanvasContext/[[configuration]]}}.{{GPUCanvasConfiguration/alphaMode}} is",
                        "        {{GPUCanvasAlphaMode/\"opaque\"}}. The {{GPUCanvasConfiguration/alphaMode}} only affects the",
                        "        result of the \"[$get a copy of the image contents of a context$]\" algorithm.",
                        "",
                        "        The drawing buffer outlives the {{GPUCanvasContext/[[currentTexture]]}} and contains the",
                        "        previously-rendered contents even after the canvas has been presented.",
                        "        It is only cleared in [$Replace the drawing buffer$].",
                        "",
                        "        Any time the drawing buffer is read, implementations must ensure that all previously",
                        "        submitted work (e.g. queue submissions) have completed writing to it via",
                        "        {{GPUCanvasContext/[[currentTexture]]}}.",
                        "",
                        "    : <dfn>\\[[currentTexture]]</dfn>, of type {{GPUTexture}}?, initially `null`",
                        "    ::",
                        "        The {{GPUTexture}} to draw into for the current frame.",
                        "        It exposes a writable view onto the underlying {{GPUCanvasContext/[[drawingBuffer]]}}.",
                        "        {{GPUCanvasContext/getCurrentTexture()}} populates this slot if `null`, then returns it.",
                        "",
                        "        In the steady-state of a visible canvas, any changes to the drawing buffer made through the",
                        "        currentTexture get presented when [$updating the rendering of a WebGPU canvas$].",
                        "        At or before that point, the texture is also destroyed",
                        "        and {{GPUCanvasContext/[[currentTexture]]}} is set to to `null`, signalling that",
                        "        a new one is to be created by the next call to {{GPUCanvasContext/getCurrentTexture()}}.",
                        "",
                        "        {{GPUTexture/destroy()|Destroying}} the currentTexture has no effect on the drawing buffer",
                        "        contents; it only terminates write-access to the drawing buffer early.",
                        "        During the same frame, {{GPUCanvasContext/getCurrentTexture()}} continues returning the",
                        "        same destroyed texture.",
                        "",
                        "        [$Expire the current texture$] sets the currentTexture to `null`.",
                        "        It is called by {{GPUCanvasContext/configure()}}, resizing the canvas,",
                        "        presentation, {{OffscreenCanvas/transferToImageBitmap()}}, and others."
                    ]
                },
                {
                    "target": "GPUCanvasContext",
                    "type": "method",
                    "lines": [
                        "    : <dfn>configure(configuration)</dfn>",
                        "    ::",
                        "        Configures the context for this canvas.",
                        "        This clears the drawing buffer to transparent black (in [$Replace the drawing buffer$]).",
                        "",
                        "        <div algorithm=GPUCanvasContext.configure>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCanvasContext}} |this|.",
                        "",
                        "                **Arguments:**",
                        "",
                        "                <pre class=argumentdef for=\"GPUCanvasContext/configure(configuration)\">",
                        "                    |configuration|: Desired configuration for the context.",
                        "                </pre>",
                        "",
                        "                **Returns:** undefined",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Let |device| be |configuration|.{{GPUCanvasConfiguration/device}}.",
                        "                1. [=?=] [$Validate texture format required features$] of",
                        "                    |configuration|.{{GPUCanvasConfiguration/format}} with |device|.{{GPUObjectBase/[[device]]}}.",
                        "                1. [=?=] [$Validate texture format required features$] of each element of",
                        "                    |configuration|.{{GPUTextureDescriptor/viewFormats}} with |device|.{{GPUObjectBase/[[device]]}}.",
                        "                1. Let |descriptor| be the",
                        "                    [$GPUTextureDescriptor for the canvas and configuration$](|this|.{{GPUCanvasContext/canvas}}, |configuration|).",
                        "                1. Set |this|.{{GPUCanvasContext/[[configuration]]}} to |configuration|.",
                        "                1. Set |this|.{{GPUCanvasContext/[[textureDescriptor]]}} to |descriptor|.",
                        "                1. [$Replace the drawing buffer$] of |this|, which resets",
                        "                    |this|.{{GPUCanvasContext/[[drawingBuffer]]}} with a bitmap with the new format and tags.",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |device|.",
                        "            </div>",
                        "            <div data-timeline=device>",
                        "                [=Device timeline=] steps:",
                        "",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.",
                        "",
                        "                    <div class=validusage>",
                        "                        - [$validating GPUTextureDescriptor$](|device|, |descriptor|)",
                        "                            must return true.",
                        "                        - [=Supported context formats=] must [=set/contain=]",
                        "                            |configuration|.{{GPUCanvasConfiguration/format}}.",
                        "                    </div>",
                        "",
                        "                    Note: This early validation remains valid until the next",
                        "                    {{GPUCanvasContext/configure()}} call, **except** for",
                        "                    validation of the {{GPUTextureDescriptor/size}}, which changes when",
                        "                    the canvas is resized.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>unconfigure()</dfn>",
                        "    ::",
                        "        Removes the context configuration. Destroys any textures produced while configured.",
                        "",
                        "        <div algorithm=GPUCanvasContext.unconfigure>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCanvasContext}} |this|.",
                        "",
                        "                **Returns:** undefined",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. Set |this|.{{GPUCanvasContext/[[configuration]]}} to `null`.",
                        "                1. Set |this|.{{GPUCanvasContext/[[textureDescriptor]]}} to `null`.",
                        "                1. [$Replace the drawing buffer$] of |this|.",
                        "            </div>",
                        "        </div>",
                        "",
                        "    : <dfn>getCurrentTexture()</dfn>",
                        "    ::",
                        "        Get the {{GPUTexture}} that will be composited to the document by the {{GPUCanvasContext}}",
                        "        next.",
                        "",
                        "        <div class=note heading>",
                        "            An application **should** call {{GPUCanvasContext/getCurrentTexture()}}",
                        "            in the same task that renders to the canvas texture.",
                        "            Otherwise, the texture could get destroyed by these steps before the",
                        "            application is finished rendering to it.",
                        "",
                        "            The expiry task (defined below) is optional to implement.",
                        "            Even if implemented, task source priority is not normatively defined, so may happen as",
                        "            early as the next task, or as late as after all other task sources are empty",
                        "            (see [=automatic expiry task source=]).",
                        "            Expiry is only guaranteed when a visible canvas is displayed",
                        "            ([$updating the rendering of a WebGPU canvas$]) and in other",
                        "            callers of [$Replace the drawing buffer$].",
                        "        </div>",
                        "",
                        "        <div algorithm=GPUCanvasContext.getCurrentTexture>",
                        "            <div data-timeline=content>",
                        "                **Called on:** {{GPUCanvasContext}} |this|.",
                        "",
                        "                **Returns:** {{GPUTexture}}",
                        "",
                        "                [=Content timeline=] steps:",
                        "",
                        "                1. If |this|.{{GPUCanvasContext/[[configuration]]}} is `null`:",
                        "                    1. Throw an {{InvalidStateError}} and stop.",
                        "                1. [=Assert=] |this|.{{GPUCanvasContext/[[textureDescriptor]]}} is not `null`.",
                        "                1. Let |device| be |this|.{{GPUCanvasContext/[[configuration]]}}.{{GPUCanvasConfiguration/device}}.",
                        "                1. If |this|.{{GPUCanvasContext/[[currentTexture]]}} is `null`:",
                        "                    1. [$Replace the drawing buffer$] of |this|.",
                        "                    1. Set |this|.{{GPUCanvasContext/[[currentTexture]]}} to the result of calling",
                        "                        |device|.{{GPUDevice/createTexture()}} with |this|.{{GPUCanvasContext/[[textureDescriptor]]}},",
                        "                        except with the {{GPUTexture}}'s underlying storage pointing to",
                        "                        |this|.{{GPUCanvasContext/[[drawingBuffer]]}}.",
                        "",
                        "                        Note:",
                        "                        If the texture can't be created (e.g. due to validation failure or out-of-memory),",
                        "                        this generates and error and returns an [=invalid=] {{GPUTexture}}.",
                        "                        Some validation here is redundant with that done in {{GPUCanvasContext/configure()}}.",
                        "                        Implementations **must not** skip this redundant validation.",
                        "                1. **Optionally**, [$queue an automatic expiry task$] with device |device| and the following steps:",
                        "",
                        "                    <div data-timeline=content>",
                        "                        1. [$Expire the current texture$] of |this|.",
                        "",
                        "                            Note: If this already happened when",
                        "                            [$updating the rendering of a WebGPU canvas$], it has no effect.",
                        "                    </div>",
                        "                1. Return |this|.{{GPUCanvasContext/[[currentTexture]]}}.",
                        "            </div>",
                        "        </div>",
                        "",
                        "        Note: The same {{GPUTexture}} object will be returned by every",
                        "        call to {{GPUCanvasContext/getCurrentTexture()}} until \"[$Expire the current texture$]\"",
                        "        runs, even if that {{GPUTexture}} is destroyed, failed validation, or failed to allocate."
                    ]
                }
            ]
        ],
        [
            "GPUCanvasConfiguration",
            [
                {
                    "target": "GPUCanvasConfiguration",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>device</dfn>",
                        "    ::",
                        "        The {{GPUDevice}} that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will be",
                        "        compatible with.",
                        "",
                        "    : <dfn>format</dfn>",
                        "    ::",
                        "        The format that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will have.",
                        "        Must be one of the [=Supported context formats=].",
                        "",
                        "    : <dfn>usage</dfn>",
                        "    ::",
                        "        The usage that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will have.",
                        "        {{GPUTextureUsage/RENDER_ATTACHMENT}} is the default, but is not automatically included",
                        "        if the usage is explicitly set. Be sure to include {{GPUTextureUsage/RENDER_ATTACHMENT}}",
                        "        when setting a custom usage if you wish to use textures returned by",
                        "        {{GPUCanvasContext/getCurrentTexture()}} as color targets for a render pass.",
                        "",
                        "    : <dfn>viewFormats</dfn>",
                        "    ::",
                        "        The formats that views created from textures returned by",
                        "        {{GPUCanvasContext/getCurrentTexture()}} may use.",
                        "",
                        "    : <dfn>colorSpace</dfn>",
                        "    ::",
                        "        The color space that values written into textures returned by",
                        "        {{GPUCanvasContext/getCurrentTexture()}} should be displayed with.",
                        "",
                        "    : <dfn>alphaMode</dfn>",
                        "    ::",
                        "        Determines the effect that alpha values will have on the content of textures returned by",
                        "        {{GPUCanvasContext/getCurrentTexture()}} when read, displayed, or used as an image source."
                    ]
                }
            ]
        ],
        [
            "GPUCanvasAlphaMode",
            [
                {
                    "target": "GPUCanvasAlphaMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"opaque\"</dfn>",
                        "    ::",
                        "        Read RGB as opaque and ignore alpha values.",
                        "        If the content is not already opaque, the alpha channel is cleared to 1.0",
                        "        in \"[$get a copy of the image contents of a context$]\".",
                        "",
                        "    : <dfn>\"premultiplied\"</dfn>",
                        "    ::",
                        "        Read RGBA as premultiplied: color values are premultiplied by their alpha value.",
                        "        100% red at 50% alpha is `[0.5, 0, 0, 0.5]`.",
                        "",
                        "        If the canvas texture contains [=out-of-gamut premultiplied RGBA values=] at the time the",
                        "        canvas contents are read, the behavior depends on whether the canvas is:",
                        "",
                        "        <dl class=switch>",
                        "            : [$get a copy of the image contents of a context|used as an image source$]",
                        "            :: Values are preserved, as described in [[#color-space-conversions|color space conversion]].",
                        "",
                        "            : displayed to the screen",
                        "            :: Compositing results are undefined.",
                        "",
                        "                Note:",
                        "                This is true even if color space conversion would produce in-gamut values before",
                        "                compositing, because the intermediate format for compositing is not specified."
                    ]
                }
            ]
        ],
        [
            "GPUError",
            [
                {
                    "target": "GPUError",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>message</dfn>",
                        "    ::",
                        "        A human-readable, [=localizable text=] message providing information about the error that",
                        "        occurred.",
                        "",
                        "        Note: This message is generally intended for application developers to debug their",
                        "        applications and capture information for debug reports, not to be surfaced to end-users.",
                        "",
                        "        Note: User agents should not include potentially machine-parsable details in this message,",
                        "        such as free system memory on {{GPUErrorFilter/\"out-of-memory\"}} or other details about the",
                        "        conditions under which memory was exhausted.",
                        "",
                        "        Note: The {{GPUError/message}} should follow the [=best practices for language and",
                        "        direction information=]. This includes making use of any future standards which may emerge",
                        "        regarding the reporting of string language and direction metadata.",
                        "",
                        "        <p class=\"note editorial\"><span class=marker>Editorial note:</span>",
                        "        At the time of this writing, no language/direction recommendation is available that provides",
                        "        compatibility and consistency with legacy APIs, but when there is, adopt it formally."
                    ]
                }
            ]
        ],
        [
            "GPUErrorFilter",
            [
                {
                    "target": "GPUErrorFilter",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"validation\"</dfn>",
                        "    ::",
                        "        Indicates that the error scope will catch a {{GPUValidationError}}.",
                        "",
                        "    : <dfn>\"out-of-memory\"</dfn>",
                        "    ::",
                        "        Indicates that the error scope will catch a {{GPUOutOfMemoryError}}.",
                        "",
                        "    : <dfn>\"internal\"</dfn>",
                        "    ::",
                        "        Indicates that the error scope will catch a {{GPUInternalError}}."
                    ]
                }
            ]
        ],
        [
            "GPUUncapturedErrorEvent",
            [
                {
                    "target": "GPUUncapturedErrorEvent",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>error</dfn>",
                        "    ::",
                        "        A [=slot-backed attribute=] holding an object representing the error that was uncaptured.",
                        "        This has the same type as errors returned by {{GPUDevice/popErrorScope()}}."
                    ]
                }
            ]
        ],
        [
            "GPUColorDict",
            [
                {
                    "target": "GPUColorDict",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>r</dfn>",
                        "    ::",
                        "        The red channel value.",
                        "",
                        "    : <dfn>g</dfn>",
                        "    ::",
                        "        The green channel value.",
                        "",
                        "    : <dfn>b</dfn>",
                        "    ::",
                        "        The blue channel value.",
                        "",
                        "    : <dfn>a</dfn>",
                        "    ::",
                        "        The alpha channel value."
                    ]
                }
            ]
        ],
        [
            "GPUExtent3DDict",
            [
                {
                    "target": "GPUExtent3DDict",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>width</dfn>",
                        "    ::",
                        "        The width of the extent.",
                        "",
                        "    : <dfn>height</dfn>",
                        "    ::",
                        "        The height of the extent.",
                        "",
                        "    : <dfn>depthOrArrayLayers</dfn>",
                        "    ::",
                        "        The depth of the extent or the number of array layers it contains.",
                        "        If used with a {{GPUTexture}} with a {{GPUTextureDimension}} of {{GPUTextureDimension/\"3d\"}}",
                        "        defines the depth of the texture. If used with a {{GPUTexture}} with a {{GPUTextureDimension}}",
                        "        of {{GPUTextureDimension/\"2d\"}} defines the number of array layers in the texture."
                    ]
                }
            ]
        ]
    ],
    "exposed": [
        "GPUSupportedLimits",
        "GPUSupportedFeatures",
        "WGSLLanguageFeatures",
        "GPUAdapterInfo",
        "GPU",
        "GPUAdapter",
        "GPUDevice",
        "GPUBuffer",
        "GPUBufferUsage",
        "GPUMapMode",
        "GPUTexture",
        "GPUTextureUsage",
        "GPUTextureView",
        "GPUExternalTexture",
        "GPUSampler",
        "GPUBindGroupLayout",
        "GPUShaderStage",
        "GPUBindGroup",
        "GPUPipelineLayout",
        "GPUShaderModule",
        "GPUCompilationMessage",
        "GPUCompilationInfo",
        "GPUPipelineError",
        "GPUComputePipeline",
        "GPURenderPipeline",
        "GPUColorWrite",
        "GPUCommandBuffer",
        "GPUCommandEncoder",
        "GPUComputePassEncoder",
        "GPURenderPassEncoder",
        "GPURenderBundle",
        "GPURenderBundleEncoder",
        "GPUQueue",
        "GPUQuerySet",
        "GPUCanvasContext",
        "GPUDeviceLostInfo",
        "GPUError",
        "GPUValidationError",
        "GPUOutOfMemoryError",
        "GPUInternalError",
        "GPUUncapturedErrorEvent"
    ]
}