// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct WGPUPrimitiveState {
 *     const WGPUChainedStruct *nextInChain;
 *     WGPUPrimitiveTopology topology;
 *     WGPUIndexFormat stripIndexFormat;
 *     WGPUFrontFace frontFace;
 *     WGPUCullMode cullMode;
 * }
 * }
 */
public class WGPUPrimitiveState {

    WGPUPrimitiveState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_INT.withName("topology"),
        wgpu_h.C_INT.withName("stripIndexFormat"),
        wgpu_h.C_INT.withName("frontFace"),
        wgpu_h.C_INT.withName("cullMode")
    ).withName("WGPUPrimitiveState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final OfInt topology$LAYOUT = (OfInt)$LAYOUT.select(groupElement("topology"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUPrimitiveTopology topology
     * }
     */
    public static final OfInt topology$layout() {
        return topology$LAYOUT;
    }

    private static final long topology$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUPrimitiveTopology topology
     * }
     */
    public static final long topology$offset() {
        return topology$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUPrimitiveTopology topology
     * }
     */
    public static int topology(MemorySegment struct) {
        return struct.get(topology$LAYOUT, topology$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUPrimitiveTopology topology
     * }
     */
    public static void topology(MemorySegment struct, int fieldValue) {
        struct.set(topology$LAYOUT, topology$OFFSET, fieldValue);
    }

    private static final OfInt stripIndexFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stripIndexFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUIndexFormat stripIndexFormat
     * }
     */
    public static final OfInt stripIndexFormat$layout() {
        return stripIndexFormat$LAYOUT;
    }

    private static final long stripIndexFormat$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUIndexFormat stripIndexFormat
     * }
     */
    public static final long stripIndexFormat$offset() {
        return stripIndexFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUIndexFormat stripIndexFormat
     * }
     */
    public static int stripIndexFormat(MemorySegment struct) {
        return struct.get(stripIndexFormat$LAYOUT, stripIndexFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUIndexFormat stripIndexFormat
     * }
     */
    public static void stripIndexFormat(MemorySegment struct, int fieldValue) {
        struct.set(stripIndexFormat$LAYOUT, stripIndexFormat$OFFSET, fieldValue);
    }

    private static final OfInt frontFace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frontFace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUFrontFace frontFace
     * }
     */
    public static final OfInt frontFace$layout() {
        return frontFace$LAYOUT;
    }

    private static final long frontFace$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUFrontFace frontFace
     * }
     */
    public static final long frontFace$offset() {
        return frontFace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUFrontFace frontFace
     * }
     */
    public static int frontFace(MemorySegment struct) {
        return struct.get(frontFace$LAYOUT, frontFace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUFrontFace frontFace
     * }
     */
    public static void frontFace(MemorySegment struct, int fieldValue) {
        struct.set(frontFace$LAYOUT, frontFace$OFFSET, fieldValue);
    }

    private static final OfInt cullMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cullMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUCullMode cullMode
     * }
     */
    public static final OfInt cullMode$layout() {
        return cullMode$LAYOUT;
    }

    private static final long cullMode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUCullMode cullMode
     * }
     */
    public static final long cullMode$offset() {
        return cullMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUCullMode cullMode
     * }
     */
    public static int cullMode(MemorySegment struct) {
        return struct.get(cullMode$LAYOUT, cullMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUCullMode cullMode
     * }
     */
    public static void cullMode(MemorySegment struct, int fieldValue) {
        struct.set(cullMode$LAYOUT, cullMode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

