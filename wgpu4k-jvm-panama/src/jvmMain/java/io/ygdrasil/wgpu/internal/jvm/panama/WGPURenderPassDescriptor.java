// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPURenderPassDescriptor {
 *     const WGPUChainedStruct *nextInChain;
 *     const char *label;
 *     size_t colorAttachmentCount;
 *     const WGPURenderPassColorAttachment *colorAttachments;
 *     const WGPURenderPassDepthStencilAttachment *depthStencilAttachment;
 *     WGPUQuerySet occlusionQuerySet;
 *     const WGPURenderPassTimestampWrites *timestampWrites;
 * }
 * }
 */
public class WGPURenderPassDescriptor {

    WGPURenderPassDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("label"),
        wgpu_h.C_LONG.withName("colorAttachmentCount"),
        wgpu_h.C_POINTER.withName("colorAttachments"),
        wgpu_h.C_POINTER.withName("depthStencilAttachment"),
        wgpu_h.C_POINTER.withName("occlusionQuerySet"),
        wgpu_h.C_POINTER.withName("timestampWrites")
    ).withName("WGPURenderPassDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final AddressLayout label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final AddressLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.get(label$LAYOUT, label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(label$LAYOUT, label$OFFSET, fieldValue);
    }

    private static final OfLong colorAttachmentCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("colorAttachmentCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t colorAttachmentCount
     * }
     */
    public static final OfLong colorAttachmentCount$layout() {
        return colorAttachmentCount$LAYOUT;
    }

    private static final long colorAttachmentCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t colorAttachmentCount
     * }
     */
    public static final long colorAttachmentCount$offset() {
        return colorAttachmentCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t colorAttachmentCount
     * }
     */
    public static long colorAttachmentCount(MemorySegment struct) {
        return struct.get(colorAttachmentCount$LAYOUT, colorAttachmentCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t colorAttachmentCount
     * }
     */
    public static void colorAttachmentCount(MemorySegment struct, long fieldValue) {
        struct.set(colorAttachmentCount$LAYOUT, colorAttachmentCount$OFFSET, fieldValue);
    }

    private static final AddressLayout colorAttachments$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("colorAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPURenderPassColorAttachment *colorAttachments
     * }
     */
    public static final AddressLayout colorAttachments$layout() {
        return colorAttachments$LAYOUT;
    }

    private static final long colorAttachments$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPURenderPassColorAttachment *colorAttachments
     * }
     */
    public static final long colorAttachments$offset() {
        return colorAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPURenderPassColorAttachment *colorAttachments
     * }
     */
    public static MemorySegment colorAttachments(MemorySegment struct) {
        return struct.get(colorAttachments$LAYOUT, colorAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPURenderPassColorAttachment *colorAttachments
     * }
     */
    public static void colorAttachments(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(colorAttachments$LAYOUT, colorAttachments$OFFSET, fieldValue);
    }

    private static final AddressLayout depthStencilAttachment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("depthStencilAttachment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPURenderPassDepthStencilAttachment *depthStencilAttachment
     * }
     */
    public static final AddressLayout depthStencilAttachment$layout() {
        return depthStencilAttachment$LAYOUT;
    }

    private static final long depthStencilAttachment$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPURenderPassDepthStencilAttachment *depthStencilAttachment
     * }
     */
    public static final long depthStencilAttachment$offset() {
        return depthStencilAttachment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPURenderPassDepthStencilAttachment *depthStencilAttachment
     * }
     */
    public static MemorySegment depthStencilAttachment(MemorySegment struct) {
        return struct.get(depthStencilAttachment$LAYOUT, depthStencilAttachment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPURenderPassDepthStencilAttachment *depthStencilAttachment
     * }
     */
    public static void depthStencilAttachment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(depthStencilAttachment$LAYOUT, depthStencilAttachment$OFFSET, fieldValue);
    }

    private static final AddressLayout occlusionQuerySet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("occlusionQuerySet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUQuerySet occlusionQuerySet
     * }
     */
    public static final AddressLayout occlusionQuerySet$layout() {
        return occlusionQuerySet$LAYOUT;
    }

    private static final long occlusionQuerySet$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUQuerySet occlusionQuerySet
     * }
     */
    public static final long occlusionQuerySet$offset() {
        return occlusionQuerySet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUQuerySet occlusionQuerySet
     * }
     */
    public static MemorySegment occlusionQuerySet(MemorySegment struct) {
        return struct.get(occlusionQuerySet$LAYOUT, occlusionQuerySet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUQuerySet occlusionQuerySet
     * }
     */
    public static void occlusionQuerySet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(occlusionQuerySet$LAYOUT, occlusionQuerySet$OFFSET, fieldValue);
    }

    private static final AddressLayout timestampWrites$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("timestampWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPURenderPassTimestampWrites *timestampWrites
     * }
     */
    public static final AddressLayout timestampWrites$layout() {
        return timestampWrites$LAYOUT;
    }

    private static final long timestampWrites$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPURenderPassTimestampWrites *timestampWrites
     * }
     */
    public static final long timestampWrites$offset() {
        return timestampWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPURenderPassTimestampWrites *timestampWrites
     * }
     */
    public static MemorySegment timestampWrites(MemorySegment struct) {
        return struct.get(timestampWrites$LAYOUT, timestampWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPURenderPassTimestampWrites *timestampWrites
     * }
     */
    public static void timestampWrites(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timestampWrites$LAYOUT, timestampWrites$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

