// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPURegistryReport {
 *     size_t numAllocated;
 *     size_t numKeptFromUser;
 *     size_t numReleasedFromUser;
 *     size_t numError;
 *     size_t elementSize;
 * }
 * }
 */
public class WGPURegistryReport {

    WGPURegistryReport() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_LONG.withName("numAllocated"),
        wgpu_h.C_LONG.withName("numKeptFromUser"),
        wgpu_h.C_LONG.withName("numReleasedFromUser"),
        wgpu_h.C_LONG.withName("numError"),
        wgpu_h.C_LONG.withName("elementSize")
    ).withName("WGPURegistryReport");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong numAllocated$LAYOUT = (OfLong)$LAYOUT.select(groupElement("numAllocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t numAllocated
     * }
     */
    public static final OfLong numAllocated$layout() {
        return numAllocated$LAYOUT;
    }

    private static final long numAllocated$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t numAllocated
     * }
     */
    public static final long numAllocated$offset() {
        return numAllocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t numAllocated
     * }
     */
    public static long numAllocated(MemorySegment struct) {
        return struct.get(numAllocated$LAYOUT, numAllocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t numAllocated
     * }
     */
    public static void numAllocated(MemorySegment struct, long fieldValue) {
        struct.set(numAllocated$LAYOUT, numAllocated$OFFSET, fieldValue);
    }

    private static final OfLong numKeptFromUser$LAYOUT = (OfLong)$LAYOUT.select(groupElement("numKeptFromUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t numKeptFromUser
     * }
     */
    public static final OfLong numKeptFromUser$layout() {
        return numKeptFromUser$LAYOUT;
    }

    private static final long numKeptFromUser$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t numKeptFromUser
     * }
     */
    public static final long numKeptFromUser$offset() {
        return numKeptFromUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t numKeptFromUser
     * }
     */
    public static long numKeptFromUser(MemorySegment struct) {
        return struct.get(numKeptFromUser$LAYOUT, numKeptFromUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t numKeptFromUser
     * }
     */
    public static void numKeptFromUser(MemorySegment struct, long fieldValue) {
        struct.set(numKeptFromUser$LAYOUT, numKeptFromUser$OFFSET, fieldValue);
    }

    private static final OfLong numReleasedFromUser$LAYOUT = (OfLong)$LAYOUT.select(groupElement("numReleasedFromUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t numReleasedFromUser
     * }
     */
    public static final OfLong numReleasedFromUser$layout() {
        return numReleasedFromUser$LAYOUT;
    }

    private static final long numReleasedFromUser$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t numReleasedFromUser
     * }
     */
    public static final long numReleasedFromUser$offset() {
        return numReleasedFromUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t numReleasedFromUser
     * }
     */
    public static long numReleasedFromUser(MemorySegment struct) {
        return struct.get(numReleasedFromUser$LAYOUT, numReleasedFromUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t numReleasedFromUser
     * }
     */
    public static void numReleasedFromUser(MemorySegment struct, long fieldValue) {
        struct.set(numReleasedFromUser$LAYOUT, numReleasedFromUser$OFFSET, fieldValue);
    }

    private static final OfLong numError$LAYOUT = (OfLong)$LAYOUT.select(groupElement("numError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t numError
     * }
     */
    public static final OfLong numError$layout() {
        return numError$LAYOUT;
    }

    private static final long numError$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t numError
     * }
     */
    public static final long numError$offset() {
        return numError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t numError
     * }
     */
    public static long numError(MemorySegment struct) {
        return struct.get(numError$LAYOUT, numError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t numError
     * }
     */
    public static void numError(MemorySegment struct, long fieldValue) {
        struct.set(numError$LAYOUT, numError$OFFSET, fieldValue);
    }

    private static final OfLong elementSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elementSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t elementSize
     * }
     */
    public static final OfLong elementSize$layout() {
        return elementSize$LAYOUT;
    }

    private static final long elementSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t elementSize
     * }
     */
    public static final long elementSize$offset() {
        return elementSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t elementSize
     * }
     */
    public static long elementSize(MemorySegment struct) {
        return struct.get(elementSize$LAYOUT, elementSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t elementSize
     * }
     */
    public static void elementSize(MemorySegment struct, long fieldValue) {
        struct.set(elementSize$LAYOUT, elementSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

