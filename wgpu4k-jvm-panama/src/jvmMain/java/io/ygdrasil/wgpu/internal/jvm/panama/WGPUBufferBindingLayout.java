// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct WGPUBufferBindingLayout {
 *     const WGPUChainedStruct *nextInChain;
 *     WGPUBufferBindingType type;
 *     WGPUBool hasDynamicOffset;
 *     uint64_t minBindingSize;
 * }
 * }
 */
public class WGPUBufferBindingLayout {

    WGPUBufferBindingLayout() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_INT.withName("type"),
        wgpu_h.C_INT.withName("hasDynamicOffset"),
        wgpu_h.C_LONG_LONG.withName("minBindingSize")
    ).withName("WGPUBufferBindingLayout");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBufferBindingType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBufferBindingType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBufferBindingType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBufferBindingType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt hasDynamicOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hasDynamicOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBool hasDynamicOffset
     * }
     */
    public static final OfInt hasDynamicOffset$layout() {
        return hasDynamicOffset$LAYOUT;
    }

    private static final long hasDynamicOffset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBool hasDynamicOffset
     * }
     */
    public static final long hasDynamicOffset$offset() {
        return hasDynamicOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBool hasDynamicOffset
     * }
     */
    public static int hasDynamicOffset(MemorySegment struct) {
        return struct.get(hasDynamicOffset$LAYOUT, hasDynamicOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBool hasDynamicOffset
     * }
     */
    public static void hasDynamicOffset(MemorySegment struct, int fieldValue) {
        struct.set(hasDynamicOffset$LAYOUT, hasDynamicOffset$OFFSET, fieldValue);
    }

    private static final OfLong minBindingSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minBindingSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t minBindingSize
     * }
     */
    public static final OfLong minBindingSize$layout() {
        return minBindingSize$LAYOUT;
    }

    private static final long minBindingSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t minBindingSize
     * }
     */
    public static final long minBindingSize$offset() {
        return minBindingSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t minBindingSize
     * }
     */
    public static long minBindingSize(MemorySegment struct) {
        return struct.get(minBindingSize$LAYOUT, minBindingSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t minBindingSize
     * }
     */
    public static void minBindingSize(MemorySegment struct, long fieldValue) {
        struct.set(minBindingSize$LAYOUT, minBindingSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

