// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct WGPUNativeLimits {
 *     uint32_t maxPushConstantSize;
 *     uint32_t maxNonSamplerBindings;
 * }
 * }
 */
public class WGPUNativeLimits {

    WGPUNativeLimits() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_INT.withName("maxPushConstantSize"),
        wgpu_h.C_INT.withName("maxNonSamplerBindings")
    ).withName("WGPUNativeLimits");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt maxPushConstantSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPushConstantSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantSize
     * }
     */
    public static final OfInt maxPushConstantSize$layout() {
        return maxPushConstantSize$LAYOUT;
    }

    private static final long maxPushConstantSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantSize
     * }
     */
    public static final long maxPushConstantSize$offset() {
        return maxPushConstantSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantSize
     * }
     */
    public static int maxPushConstantSize(MemorySegment struct) {
        return struct.get(maxPushConstantSize$LAYOUT, maxPushConstantSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantSize
     * }
     */
    public static void maxPushConstantSize(MemorySegment struct, int fieldValue) {
        struct.set(maxPushConstantSize$LAYOUT, maxPushConstantSize$OFFSET, fieldValue);
    }

    private static final OfInt maxNonSamplerBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxNonSamplerBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxNonSamplerBindings
     * }
     */
    public static final OfInt maxNonSamplerBindings$layout() {
        return maxNonSamplerBindings$LAYOUT;
    }

    private static final long maxNonSamplerBindings$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxNonSamplerBindings
     * }
     */
    public static final long maxNonSamplerBindings$offset() {
        return maxNonSamplerBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxNonSamplerBindings
     * }
     */
    public static int maxNonSamplerBindings(MemorySegment struct) {
        return struct.get(maxNonSamplerBindings$LAYOUT, maxNonSamplerBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxNonSamplerBindings
     * }
     */
    public static void maxNonSamplerBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxNonSamplerBindings$LAYOUT, maxNonSamplerBindings$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

