// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct WGPUTextureDataLayout {
 *     const WGPUChainedStruct *nextInChain;
 *     uint64_t offset;
 *     uint32_t bytesPerRow;
 *     uint32_t rowsPerImage;
 * }
 * }
 */
public class WGPUTextureDataLayout {

    WGPUTextureDataLayout() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_LONG_LONG.withName("offset"),
        wgpu_h.C_INT.withName("bytesPerRow"),
        wgpu_h.C_INT.withName("rowsPerImage")
    ).withName("WGPUTextureDataLayout");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt bytesPerRow$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bytesPerRow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bytesPerRow
     * }
     */
    public static final OfInt bytesPerRow$layout() {
        return bytesPerRow$LAYOUT;
    }

    private static final long bytesPerRow$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bytesPerRow
     * }
     */
    public static final long bytesPerRow$offset() {
        return bytesPerRow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bytesPerRow
     * }
     */
    public static int bytesPerRow(MemorySegment struct) {
        return struct.get(bytesPerRow$LAYOUT, bytesPerRow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bytesPerRow
     * }
     */
    public static void bytesPerRow(MemorySegment struct, int fieldValue) {
        struct.set(bytesPerRow$LAYOUT, bytesPerRow$OFFSET, fieldValue);
    }

    private static final OfInt rowsPerImage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rowsPerImage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t rowsPerImage
     * }
     */
    public static final OfInt rowsPerImage$layout() {
        return rowsPerImage$LAYOUT;
    }

    private static final long rowsPerImage$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t rowsPerImage
     * }
     */
    public static final long rowsPerImage$offset() {
        return rowsPerImage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t rowsPerImage
     * }
     */
    public static int rowsPerImage(MemorySegment struct) {
        return struct.get(rowsPerImage$LAYOUT, rowsPerImage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t rowsPerImage
     * }
     */
    public static void rowsPerImage(MemorySegment struct, int fieldValue) {
        struct.set(rowsPerImage$LAYOUT, rowsPerImage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

