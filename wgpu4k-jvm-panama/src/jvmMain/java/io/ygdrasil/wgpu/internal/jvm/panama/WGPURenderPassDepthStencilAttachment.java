// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPURenderPassDepthStencilAttachment {
 *     WGPUTextureView view;
 *     WGPULoadOp depthLoadOp;
 *     WGPUStoreOp depthStoreOp;
 *     float depthClearValue;
 *     WGPUBool depthReadOnly;
 *     WGPULoadOp stencilLoadOp;
 *     WGPUStoreOp stencilStoreOp;
 *     uint32_t stencilClearValue;
 *     WGPUBool stencilReadOnly;
 * }
 * }
 */
public class WGPURenderPassDepthStencilAttachment {

    WGPURenderPassDepthStencilAttachment() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("view"),
        wgpu_h.C_INT.withName("depthLoadOp"),
        wgpu_h.C_INT.withName("depthStoreOp"),
        wgpu_h.C_FLOAT.withName("depthClearValue"),
        wgpu_h.C_INT.withName("depthReadOnly"),
        wgpu_h.C_INT.withName("stencilLoadOp"),
        wgpu_h.C_INT.withName("stencilStoreOp"),
        wgpu_h.C_INT.withName("stencilClearValue"),
        wgpu_h.C_INT.withName("stencilReadOnly")
    ).withName("WGPURenderPassDepthStencilAttachment");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout view$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("view"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUTextureView view
     * }
     */
    public static final AddressLayout view$layout() {
        return view$LAYOUT;
    }

    private static final long view$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUTextureView view
     * }
     */
    public static final long view$offset() {
        return view$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUTextureView view
     * }
     */
    public static MemorySegment view(MemorySegment struct) {
        return struct.get(view$LAYOUT, view$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUTextureView view
     * }
     */
    public static void view(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(view$LAYOUT, view$OFFSET, fieldValue);
    }

    private static final OfInt depthLoadOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthLoadOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPULoadOp depthLoadOp
     * }
     */
    public static final OfInt depthLoadOp$layout() {
        return depthLoadOp$LAYOUT;
    }

    private static final long depthLoadOp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPULoadOp depthLoadOp
     * }
     */
    public static final long depthLoadOp$offset() {
        return depthLoadOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPULoadOp depthLoadOp
     * }
     */
    public static int depthLoadOp(MemorySegment struct) {
        return struct.get(depthLoadOp$LAYOUT, depthLoadOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPULoadOp depthLoadOp
     * }
     */
    public static void depthLoadOp(MemorySegment struct, int fieldValue) {
        struct.set(depthLoadOp$LAYOUT, depthLoadOp$OFFSET, fieldValue);
    }

    private static final OfInt depthStoreOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthStoreOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStoreOp depthStoreOp
     * }
     */
    public static final OfInt depthStoreOp$layout() {
        return depthStoreOp$LAYOUT;
    }

    private static final long depthStoreOp$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStoreOp depthStoreOp
     * }
     */
    public static final long depthStoreOp$offset() {
        return depthStoreOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStoreOp depthStoreOp
     * }
     */
    public static int depthStoreOp(MemorySegment struct) {
        return struct.get(depthStoreOp$LAYOUT, depthStoreOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStoreOp depthStoreOp
     * }
     */
    public static void depthStoreOp(MemorySegment struct, int fieldValue) {
        struct.set(depthStoreOp$LAYOUT, depthStoreOp$OFFSET, fieldValue);
    }

    private static final OfFloat depthClearValue$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthClearValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthClearValue
     * }
     */
    public static final OfFloat depthClearValue$layout() {
        return depthClearValue$LAYOUT;
    }

    private static final long depthClearValue$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthClearValue
     * }
     */
    public static final long depthClearValue$offset() {
        return depthClearValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthClearValue
     * }
     */
    public static float depthClearValue(MemorySegment struct) {
        return struct.get(depthClearValue$LAYOUT, depthClearValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthClearValue
     * }
     */
    public static void depthClearValue(MemorySegment struct, float fieldValue) {
        struct.set(depthClearValue$LAYOUT, depthClearValue$OFFSET, fieldValue);
    }

    private static final OfInt depthReadOnly$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthReadOnly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBool depthReadOnly
     * }
     */
    public static final OfInt depthReadOnly$layout() {
        return depthReadOnly$LAYOUT;
    }

    private static final long depthReadOnly$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBool depthReadOnly
     * }
     */
    public static final long depthReadOnly$offset() {
        return depthReadOnly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBool depthReadOnly
     * }
     */
    public static int depthReadOnly(MemorySegment struct) {
        return struct.get(depthReadOnly$LAYOUT, depthReadOnly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBool depthReadOnly
     * }
     */
    public static void depthReadOnly(MemorySegment struct, int fieldValue) {
        struct.set(depthReadOnly$LAYOUT, depthReadOnly$OFFSET, fieldValue);
    }

    private static final OfInt stencilLoadOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilLoadOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPULoadOp stencilLoadOp
     * }
     */
    public static final OfInt stencilLoadOp$layout() {
        return stencilLoadOp$LAYOUT;
    }

    private static final long stencilLoadOp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPULoadOp stencilLoadOp
     * }
     */
    public static final long stencilLoadOp$offset() {
        return stencilLoadOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPULoadOp stencilLoadOp
     * }
     */
    public static int stencilLoadOp(MemorySegment struct) {
        return struct.get(stencilLoadOp$LAYOUT, stencilLoadOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPULoadOp stencilLoadOp
     * }
     */
    public static void stencilLoadOp(MemorySegment struct, int fieldValue) {
        struct.set(stencilLoadOp$LAYOUT, stencilLoadOp$OFFSET, fieldValue);
    }

    private static final OfInt stencilStoreOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilStoreOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStoreOp stencilStoreOp
     * }
     */
    public static final OfInt stencilStoreOp$layout() {
        return stencilStoreOp$LAYOUT;
    }

    private static final long stencilStoreOp$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStoreOp stencilStoreOp
     * }
     */
    public static final long stencilStoreOp$offset() {
        return stencilStoreOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStoreOp stencilStoreOp
     * }
     */
    public static int stencilStoreOp(MemorySegment struct) {
        return struct.get(stencilStoreOp$LAYOUT, stencilStoreOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStoreOp stencilStoreOp
     * }
     */
    public static void stencilStoreOp(MemorySegment struct, int fieldValue) {
        struct.set(stencilStoreOp$LAYOUT, stencilStoreOp$OFFSET, fieldValue);
    }

    private static final OfInt stencilClearValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilClearValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stencilClearValue
     * }
     */
    public static final OfInt stencilClearValue$layout() {
        return stencilClearValue$LAYOUT;
    }

    private static final long stencilClearValue$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stencilClearValue
     * }
     */
    public static final long stencilClearValue$offset() {
        return stencilClearValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stencilClearValue
     * }
     */
    public static int stencilClearValue(MemorySegment struct) {
        return struct.get(stencilClearValue$LAYOUT, stencilClearValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stencilClearValue
     * }
     */
    public static void stencilClearValue(MemorySegment struct, int fieldValue) {
        struct.set(stencilClearValue$LAYOUT, stencilClearValue$OFFSET, fieldValue);
    }

    private static final OfInt stencilReadOnly$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilReadOnly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBool stencilReadOnly
     * }
     */
    public static final OfInt stencilReadOnly$layout() {
        return stencilReadOnly$LAYOUT;
    }

    private static final long stencilReadOnly$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBool stencilReadOnly
     * }
     */
    public static final long stencilReadOnly$offset() {
        return stencilReadOnly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBool stencilReadOnly
     * }
     */
    public static int stencilReadOnly(MemorySegment struct) {
        return struct.get(stencilReadOnly$LAYOUT, stencilReadOnly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBool stencilReadOnly
     * }
     */
    public static void stencilReadOnly(MemorySegment struct, int fieldValue) {
        struct.set(stencilReadOnly$LAYOUT, stencilReadOnly$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

