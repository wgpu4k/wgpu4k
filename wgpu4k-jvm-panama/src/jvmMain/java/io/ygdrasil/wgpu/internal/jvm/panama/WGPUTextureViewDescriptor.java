// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct WGPUTextureViewDescriptor {
 *     const WGPUChainedStruct *nextInChain;
 *     const char *label;
 *     WGPUTextureFormat format;
 *     WGPUTextureViewDimension dimension;
 *     uint32_t baseMipLevel;
 *     uint32_t mipLevelCount;
 *     uint32_t baseArrayLayer;
 *     uint32_t arrayLayerCount;
 *     WGPUTextureAspect aspect;
 * }
 * }
 */
public class WGPUTextureViewDescriptor {

    WGPUTextureViewDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("label"),
        wgpu_h.C_INT.withName("format"),
        wgpu_h.C_INT.withName("dimension"),
        wgpu_h.C_INT.withName("baseMipLevel"),
        wgpu_h.C_INT.withName("mipLevelCount"),
        wgpu_h.C_INT.withName("baseArrayLayer"),
        wgpu_h.C_INT.withName("arrayLayerCount"),
        wgpu_h.C_INT.withName("aspect"),
        MemoryLayout.paddingLayout(4)
    ).withName("WGPUTextureViewDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final AddressLayout label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final AddressLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.get(label$LAYOUT, label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(label$LAYOUT, label$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfInt dimension$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dimension"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUTextureViewDimension dimension
     * }
     */
    public static final OfInt dimension$layout() {
        return dimension$LAYOUT;
    }

    private static final long dimension$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUTextureViewDimension dimension
     * }
     */
    public static final long dimension$offset() {
        return dimension$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUTextureViewDimension dimension
     * }
     */
    public static int dimension(MemorySegment struct) {
        return struct.get(dimension$LAYOUT, dimension$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUTextureViewDimension dimension
     * }
     */
    public static void dimension(MemorySegment struct, int fieldValue) {
        struct.set(dimension$LAYOUT, dimension$OFFSET, fieldValue);
    }

    private static final OfInt baseMipLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("baseMipLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t baseMipLevel
     * }
     */
    public static final OfInt baseMipLevel$layout() {
        return baseMipLevel$LAYOUT;
    }

    private static final long baseMipLevel$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t baseMipLevel
     * }
     */
    public static final long baseMipLevel$offset() {
        return baseMipLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t baseMipLevel
     * }
     */
    public static int baseMipLevel(MemorySegment struct) {
        return struct.get(baseMipLevel$LAYOUT, baseMipLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t baseMipLevel
     * }
     */
    public static void baseMipLevel(MemorySegment struct, int fieldValue) {
        struct.set(baseMipLevel$LAYOUT, baseMipLevel$OFFSET, fieldValue);
    }

    private static final OfInt mipLevelCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mipLevelCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t mipLevelCount
     * }
     */
    public static final OfInt mipLevelCount$layout() {
        return mipLevelCount$LAYOUT;
    }

    private static final long mipLevelCount$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t mipLevelCount
     * }
     */
    public static final long mipLevelCount$offset() {
        return mipLevelCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t mipLevelCount
     * }
     */
    public static int mipLevelCount(MemorySegment struct) {
        return struct.get(mipLevelCount$LAYOUT, mipLevelCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t mipLevelCount
     * }
     */
    public static void mipLevelCount(MemorySegment struct, int fieldValue) {
        struct.set(mipLevelCount$LAYOUT, mipLevelCount$OFFSET, fieldValue);
    }

    private static final OfInt baseArrayLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("baseArrayLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t baseArrayLayer
     * }
     */
    public static final OfInt baseArrayLayer$layout() {
        return baseArrayLayer$LAYOUT;
    }

    private static final long baseArrayLayer$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t baseArrayLayer
     * }
     */
    public static final long baseArrayLayer$offset() {
        return baseArrayLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t baseArrayLayer
     * }
     */
    public static int baseArrayLayer(MemorySegment struct) {
        return struct.get(baseArrayLayer$LAYOUT, baseArrayLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t baseArrayLayer
     * }
     */
    public static void baseArrayLayer(MemorySegment struct, int fieldValue) {
        struct.set(baseArrayLayer$LAYOUT, baseArrayLayer$OFFSET, fieldValue);
    }

    private static final OfInt arrayLayerCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("arrayLayerCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t arrayLayerCount
     * }
     */
    public static final OfInt arrayLayerCount$layout() {
        return arrayLayerCount$LAYOUT;
    }

    private static final long arrayLayerCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t arrayLayerCount
     * }
     */
    public static final long arrayLayerCount$offset() {
        return arrayLayerCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t arrayLayerCount
     * }
     */
    public static int arrayLayerCount(MemorySegment struct) {
        return struct.get(arrayLayerCount$LAYOUT, arrayLayerCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t arrayLayerCount
     * }
     */
    public static void arrayLayerCount(MemorySegment struct, int fieldValue) {
        struct.set(arrayLayerCount$LAYOUT, arrayLayerCount$OFFSET, fieldValue);
    }

    private static final OfInt aspect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("aspect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUTextureAspect aspect
     * }
     */
    public static final OfInt aspect$layout() {
        return aspect$LAYOUT;
    }

    private static final long aspect$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUTextureAspect aspect
     * }
     */
    public static final long aspect$offset() {
        return aspect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUTextureAspect aspect
     * }
     */
    public static int aspect(MemorySegment struct) {
        return struct.get(aspect$LAYOUT, aspect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUTextureAspect aspect
     * }
     */
    public static void aspect(MemorySegment struct, int fieldValue) {
        struct.set(aspect$LAYOUT, aspect$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

