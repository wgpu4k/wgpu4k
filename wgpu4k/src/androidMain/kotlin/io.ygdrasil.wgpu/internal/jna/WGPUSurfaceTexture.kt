// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUSurfaceTexture {
 * *     WGPUTexture texture;
 * *     WGPUBool suboptimal;
 * *     WGPUSurfaceGetCurrentTextureStatus status;
 * * }
 * * }
 */
object WGPUSurfaceTexture {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("texture"),
        wgpu_h.C_INT.withName("suboptimal"),
        wgpu_h.C_INT.withName("status")
    ).withName("WGPUSurfaceTexture")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `texture$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("texture")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun `texture$layout`(): AddressLayout {
        return `texture$LAYOUT`
    }

    private const val `texture$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun `texture$offset`(): Long {
        return `texture$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun texture(struct: MemorySegment): MemorySegment {
        return struct.get(`texture$LAYOUT`, `texture$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun texture(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `texture$LAYOUT`, `texture$OFFSET`,
            fieldValue!!
        )
    }

    private val `suboptimal$LAYOUT` = `$LAYOUT`.select(groupElement("suboptimal")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUBool suboptimal
     * * }
     */
    fun `suboptimal$layout`(): ValueLayout.OfInt {
        return `suboptimal$LAYOUT`
    }

    private const val `suboptimal$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUBool suboptimal
     * * }
     */
    fun `suboptimal$offset`(): Long {
        return `suboptimal$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUBool suboptimal
     * * }
     */
    fun suboptimal(struct: MemorySegment): Int {
        return struct.get(`suboptimal$LAYOUT`, `suboptimal$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUBool suboptimal
     * * }
     */
    fun suboptimal(struct: MemorySegment, fieldValue: Int) {
        struct.set(`suboptimal$LAYOUT`, `suboptimal$OFFSET`, fieldValue)
    }

    private val `status$LAYOUT` = `$LAYOUT`.select(groupElement("status")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUSurfaceGetCurrentTextureStatus status
     * * }
     */
    fun `status$layout`(): ValueLayout.OfInt {
        return `status$LAYOUT`
    }

    private const val `status$OFFSET`: Long = 12

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUSurfaceGetCurrentTextureStatus status
     * * }
     */
    fun `status$offset`(): Long {
        return `status$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUSurfaceGetCurrentTextureStatus status
     * * }
     */
    fun status(struct: MemorySegment): Int {
        return struct.get(`status$LAYOUT`, `status$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUSurfaceGetCurrentTextureStatus status
     * * }
     */
    fun status(struct: MemorySegment, fieldValue: Int) {
        struct.set(`status$LAYOUT`, `status$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

