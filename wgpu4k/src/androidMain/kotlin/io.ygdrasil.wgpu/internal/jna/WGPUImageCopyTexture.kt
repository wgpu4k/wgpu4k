// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.paddingLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUImageCopyTexture {
 * *     const WGPUChainedStruct *nextInChain;
 * *     WGPUTexture texture;
 * *     uint32_t mipLevel;
 * *     WGPUOrigin3D origin;
 * *     WGPUTextureAspect aspect;
 * * }
 * * }
 */
object WGPUImageCopyTexture {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("texture"),
        wgpu_h.C_INT.withName("mipLevel"),
        WGPUOrigin3D.layout().withName("origin"),
        wgpu_h.C_INT.withName("aspect"),
        paddingLayout(4)
    ).withName("WGPUImageCopyTexture")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `nextInChain$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("nextInChain")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$layout`(): AddressLayout {
        return `nextInChain$LAYOUT`
    }

    private const val `nextInChain$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$offset`(): Long {
        return `nextInChain$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment): MemorySegment {
        return struct.get(`nextInChain$LAYOUT`, `nextInChain$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `nextInChain$LAYOUT`, `nextInChain$OFFSET`,
            fieldValue!!
        )
    }

    private val `texture$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("texture")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun `texture$layout`(): AddressLayout {
        return `texture$LAYOUT`
    }

    private const val `texture$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun `texture$offset`(): Long {
        return `texture$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun texture(struct: MemorySegment): MemorySegment {
        return struct.get(`texture$LAYOUT`, `texture$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTexture texture
     * * }
     */
    fun texture(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `texture$LAYOUT`, `texture$OFFSET`,
            fieldValue!!
        )
    }

    private val `mipLevel$LAYOUT` = `$LAYOUT`.select(groupElement("mipLevel")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t mipLevel
     * * }
     */
    fun `mipLevel$layout`(): ValueLayout.OfInt {
        return `mipLevel$LAYOUT`
    }

    private const val `mipLevel$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t mipLevel
     * * }
     */
    fun `mipLevel$offset`(): Long {
        return `mipLevel$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t mipLevel
     * * }
     */
    fun mipLevel(struct: MemorySegment): Int {
        return struct.get(`mipLevel$LAYOUT`, `mipLevel$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t mipLevel
     * * }
     */
    fun mipLevel(struct: MemorySegment, fieldValue: Int) {
        struct.set(`mipLevel$LAYOUT`, `mipLevel$OFFSET`, fieldValue)
    }

    private val `origin$LAYOUT` = `$LAYOUT`.select(groupElement("origin")) as GroupLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUOrigin3D origin
     * * }
     */
    fun `origin$layout`(): GroupLayout {
        return `origin$LAYOUT`
    }

    private const val `origin$OFFSET`: Long = 20

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUOrigin3D origin
     * * }
     */
    fun `origin$offset`(): Long {
        return `origin$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUOrigin3D origin
     * * }
     */
    fun origin(struct: MemorySegment): MemorySegment {
        return struct.asSlice(`origin$OFFSET`, `origin$LAYOUT`.byteSize())
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUOrigin3D origin
     * * }
     */
    fun origin(struct: MemorySegment?, fieldValue: MemorySegment?) {
        MemorySegment.copy(
            fieldValue!!, 0L,
            struct!!, `origin$OFFSET`, `origin$LAYOUT`.byteSize()
        )
    }

    private val `aspect$LAYOUT` = `$LAYOUT`.select(groupElement("aspect")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureAspect aspect
     * * }
     */
    fun `aspect$layout`(): ValueLayout.OfInt {
        return `aspect$LAYOUT`
    }

    private const val `aspect$OFFSET`: Long = 32

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureAspect aspect
     * * }
     */
    fun `aspect$offset`(): Long {
        return `aspect$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureAspect aspect
     * * }
     */
    fun aspect(struct: MemorySegment): Int {
        return struct.get(`aspect$LAYOUT`, `aspect$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureAspect aspect
     * * }
     */
    fun aspect(struct: MemorySegment, fieldValue: Int) {
        struct.set(`aspect$LAYOUT`, `aspect$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

