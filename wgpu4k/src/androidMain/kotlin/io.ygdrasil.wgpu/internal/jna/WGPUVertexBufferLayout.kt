// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.paddingLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUVertexBufferLayout {
 * *     uint64_t arrayStride;
 * *     WGPUVertexStepMode stepMode;
 * *     size_t attributeCount;
 * *     const WGPUVertexAttribute *attributes;
 * * }
 * * }
 */
object WGPUVertexBufferLayout {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_LONG_LONG.withName("arrayStride"),
        wgpu_h.C_INT.withName("stepMode"),
        paddingLayout(4),
        wgpu_h.C_LONG.withName("attributeCount"),
        wgpu_h.C_POINTER.withName("attributes")
    ).withName("WGPUVertexBufferLayout")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `arrayStride$LAYOUT` = `$LAYOUT`.select(groupElement("arrayStride")) as ValueLayout.OfLong

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint64_t arrayStride
     * * }
     */
    fun `arrayStride$layout`(): ValueLayout.OfLong {
        return `arrayStride$LAYOUT`
    }

    private const val `arrayStride$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint64_t arrayStride
     * * }
     */
    fun `arrayStride$offset`(): Long {
        return `arrayStride$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint64_t arrayStride
     * * }
     */
    fun arrayStride(struct: MemorySegment): Long {
        return struct.get(`arrayStride$LAYOUT`, `arrayStride$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint64_t arrayStride
     * * }
     */
    fun arrayStride(struct: MemorySegment, fieldValue: Long) {
        struct.set(`arrayStride$LAYOUT`, `arrayStride$OFFSET`, fieldValue)
    }

    private val `stepMode$LAYOUT` = `$LAYOUT`.select(groupElement("stepMode")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUVertexStepMode stepMode
     * * }
     */
    fun `stepMode$layout`(): ValueLayout.OfInt {
        return `stepMode$LAYOUT`
    }

    private const val `stepMode$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUVertexStepMode stepMode
     * * }
     */
    fun `stepMode$offset`(): Long {
        return `stepMode$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUVertexStepMode stepMode
     * * }
     */
    fun stepMode(struct: MemorySegment): Int {
        return struct.get(`stepMode$LAYOUT`, `stepMode$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUVertexStepMode stepMode
     * * }
     */
    fun stepMode(struct: MemorySegment, fieldValue: Int) {
        struct.set(`stepMode$LAYOUT`, `stepMode$OFFSET`, fieldValue)
    }

    private val `attributeCount$LAYOUT` = `$LAYOUT`.select(groupElement("attributeCount")) as ValueLayout.OfLong

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * size_t attributeCount
     * * }
     */
    fun `attributeCount$layout`(): ValueLayout.OfLong {
        return `attributeCount$LAYOUT`
    }

    private const val `attributeCount$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * size_t attributeCount
     * * }
     */
    fun `attributeCount$offset`(): Long {
        return `attributeCount$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * size_t attributeCount
     * * }
     */
    fun attributeCount(struct: MemorySegment): Long {
        return struct.get(`attributeCount$LAYOUT`, `attributeCount$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * size_t attributeCount
     * * }
     */
    fun attributeCount(struct: MemorySegment, fieldValue: Long) {
        struct.set(`attributeCount$LAYOUT`, `attributeCount$OFFSET`, fieldValue)
    }

    private val `attributes$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("attributes")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUVertexAttribute *attributes
     * * }
     */
    fun `attributes$layout`(): AddressLayout {
        return `attributes$LAYOUT`
    }

    private const val `attributes$OFFSET`: Long = 24

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUVertexAttribute *attributes
     * * }
     */
    fun `attributes$offset`(): Long {
        return `attributes$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUVertexAttribute *attributes
     * * }
     */
    fun attributes(struct: MemorySegment): MemorySegment {
        return struct.get(`attributes$LAYOUT`, `attributes$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUVertexAttribute *attributes
     * * }
     */
    fun attributes(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `attributes$LAYOUT`, `attributes$OFFSET`,
            fieldValue!!
        )
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

