// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.paddingLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPURenderPassColorAttachment {
 * *     const WGPUChainedStruct *nextInChain;
 * *     WGPUTextureView view;
 * *     uint32_t depthSlice;
 * *     WGPUTextureView resolveTarget;
 * *     WGPULoadOp loadOp;
 * *     WGPUStoreOp storeOp;
 * *     WGPUColor clearValue;
 * * }
 * * }
 */
object WGPURenderPassColorAttachment {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("view"),
        wgpu_h.C_INT.withName("depthSlice"),
        paddingLayout(4),
        wgpu_h.C_POINTER.withName("resolveTarget"),
        wgpu_h.C_INT.withName("loadOp"),
        wgpu_h.C_INT.withName("storeOp"),
        WGPUColor.layout().withName("clearValue")
    ).withName("WGPURenderPassColorAttachment")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `nextInChain$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("nextInChain")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$layout`(): AddressLayout {
        return `nextInChain$LAYOUT`
    }

    private const val `nextInChain$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$offset`(): Long {
        return `nextInChain$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment): MemorySegment {
        return struct.get(`nextInChain$LAYOUT`, `nextInChain$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `nextInChain$LAYOUT`, `nextInChain$OFFSET`,
            fieldValue!!
        )
    }

    private val `view$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("view")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureView view
     * * }
     */
    fun `view$layout`(): AddressLayout {
        return `view$LAYOUT`
    }

    private const val `view$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureView view
     * * }
     */
    fun `view$offset`(): Long {
        return `view$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureView view
     * * }
     */
    fun view(struct: MemorySegment): MemorySegment {
        return struct.get(`view$LAYOUT`, `view$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureView view
     * * }
     */
    fun view(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `view$LAYOUT`, `view$OFFSET`,
            fieldValue!!
        )
    }

    private val `depthSlice$LAYOUT` = `$LAYOUT`.select(groupElement("depthSlice")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t depthSlice
     * * }
     */
    fun `depthSlice$layout`(): ValueLayout.OfInt {
        return `depthSlice$LAYOUT`
    }

    private const val `depthSlice$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t depthSlice
     * * }
     */
    fun `depthSlice$offset`(): Long {
        return `depthSlice$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t depthSlice
     * * }
     */
    fun depthSlice(struct: MemorySegment): Int {
        return struct.get(`depthSlice$LAYOUT`, `depthSlice$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t depthSlice
     * * }
     */
    fun depthSlice(struct: MemorySegment, fieldValue: Int) {
        struct.set(`depthSlice$LAYOUT`, `depthSlice$OFFSET`, fieldValue)
    }

    private val `resolveTarget$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("resolveTarget")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureView resolveTarget
     * * }
     */
    fun `resolveTarget$layout`(): AddressLayout {
        return `resolveTarget$LAYOUT`
    }

    private const val `resolveTarget$OFFSET`: Long = 24

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureView resolveTarget
     * * }
     */
    fun `resolveTarget$offset`(): Long {
        return `resolveTarget$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureView resolveTarget
     * * }
     */
    fun resolveTarget(struct: MemorySegment): MemorySegment {
        return struct.get(`resolveTarget$LAYOUT`, `resolveTarget$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureView resolveTarget
     * * }
     */
    fun resolveTarget(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `resolveTarget$LAYOUT`, `resolveTarget$OFFSET`,
            fieldValue!!
        )
    }

    private val `loadOp$LAYOUT` = `$LAYOUT`.select(groupElement("loadOp")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPULoadOp loadOp
     * * }
     */
    fun `loadOp$layout`(): ValueLayout.OfInt {
        return `loadOp$LAYOUT`
    }

    private const val `loadOp$OFFSET`: Long = 32

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPULoadOp loadOp
     * * }
     */
    fun `loadOp$offset`(): Long {
        return `loadOp$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPULoadOp loadOp
     * * }
     */
    fun loadOp(struct: MemorySegment): Int {
        return struct.get(`loadOp$LAYOUT`, `loadOp$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPULoadOp loadOp
     * * }
     */
    fun loadOp(struct: MemorySegment, fieldValue: Int) {
        struct.set(`loadOp$LAYOUT`, `loadOp$OFFSET`, fieldValue)
    }

    private val `storeOp$LAYOUT` = `$LAYOUT`.select(groupElement("storeOp")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUStoreOp storeOp
     * * }
     */
    fun `storeOp$layout`(): ValueLayout.OfInt {
        return `storeOp$LAYOUT`
    }

    private const val `storeOp$OFFSET`: Long = 36

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUStoreOp storeOp
     * * }
     */
    fun `storeOp$offset`(): Long {
        return `storeOp$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUStoreOp storeOp
     * * }
     */
    fun storeOp(struct: MemorySegment): Int {
        return struct.get(`storeOp$LAYOUT`, `storeOp$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUStoreOp storeOp
     * * }
     */
    fun storeOp(struct: MemorySegment, fieldValue: Int) {
        struct.set(`storeOp$LAYOUT`, `storeOp$OFFSET`, fieldValue)
    }

    private val `clearValue$LAYOUT` = `$LAYOUT`.select(groupElement("clearValue")) as GroupLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUColor clearValue
     * * }
     */
    fun `clearValue$layout`(): GroupLayout {
        return `clearValue$LAYOUT`
    }

    private const val `clearValue$OFFSET`: Long = 40

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUColor clearValue
     * * }
     */
    fun `clearValue$offset`(): Long {
        return `clearValue$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUColor clearValue
     * * }
     */
    fun clearValue(struct: MemorySegment): MemorySegment {
        return struct.asSlice(`clearValue$OFFSET`, `clearValue$LAYOUT`.byteSize())
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUColor clearValue
     * * }
     */
    fun clearValue(struct: MemorySegment?, fieldValue: MemorySegment?) {
        MemorySegment.copy(
            fieldValue!!, 0L,
            struct!!, `clearValue$OFFSET`, `clearValue$LAYOUT`.byteSize()
        )
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

