// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUColor {
 * *     double r;
 * *     double g;
 * *     double b;
 * *     double a;
 * * }
 * * }
 */
object WGPUColor {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_DOUBLE.withName("r"),
        wgpu_h.C_DOUBLE.withName("g"),
        wgpu_h.C_DOUBLE.withName("b"),
        wgpu_h.C_DOUBLE.withName("a")
    ).withName("WGPUColor")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `r$LAYOUT` = `$LAYOUT`.select(groupElement("r")) as ValueLayout.OfDouble?

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * double r
     * * }
     */
    fun `r$layout`(): ValueLayout.OfDouble? {
        return `r$LAYOUT`
    }

    private const val `r$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * double r
     * * }
     */
    fun `r$offset`(): Long {
        return `r$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * double r
     * * }
     */
    fun r(struct: MemorySegment): Double {
        return struct.get(`r$LAYOUT`, `r$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * double r
     * * }
     */
    fun r(struct: MemorySegment, fieldValue: Double) {
        struct.set(`r$LAYOUT`, `r$OFFSET`, fieldValue)
    }

    private val `g$LAYOUT` = `$LAYOUT`.select(groupElement("g")) as ValueLayout.OfDouble?

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * double g
     * * }
     */
    fun `g$layout`(): ValueLayout.OfDouble? {
        return `g$LAYOUT`
    }

    private const val `g$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * double g
     * * }
     */
    fun `g$offset`(): Long {
        return `g$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * double g
     * * }
     */
    fun g(struct: MemorySegment): Double {
        return struct.get(`g$LAYOUT`, `g$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * double g
     * * }
     */
    fun g(struct: MemorySegment, fieldValue: Double) {
        struct.set(`g$LAYOUT`, `g$OFFSET`, fieldValue)
    }

    private val `b$LAYOUT` = `$LAYOUT`.select(groupElement("b")) as ValueLayout.OfDouble?

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * double b
     * * }
     */
    fun `b$layout`(): ValueLayout.OfDouble? {
        return `b$LAYOUT`
    }

    private const val `b$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * double b
     * * }
     */
    fun `b$offset`(): Long {
        return `b$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * double b
     * * }
     */
    fun b(struct: MemorySegment): Double {
        return struct.get(`b$LAYOUT`, `b$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * double b
     * * }
     */
    fun b(struct: MemorySegment, fieldValue: Double) {
        struct.set(`b$LAYOUT`, `b$OFFSET`, fieldValue)
    }

    private val `a$LAYOUT` = `$LAYOUT`.select(groupElement("a")) as ValueLayout.OfDouble?

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * double a
     * * }
     */
    fun `a$layout`(): ValueLayout.OfDouble? {
        return `a$LAYOUT`
    }

    private const val `a$OFFSET`: Long = 24

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * double a
     * * }
     */
    fun `a$offset`(): Long {
        return `a$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * double a
     * * }
     */
    fun a(struct: MemorySegment): Double {
        return struct.get(`a$LAYOUT`, `a$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * double a
     * * }
     */
    fun a(struct: MemorySegment, fieldValue: Double) {
        struct.set(`a$LAYOUT`, `a$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

