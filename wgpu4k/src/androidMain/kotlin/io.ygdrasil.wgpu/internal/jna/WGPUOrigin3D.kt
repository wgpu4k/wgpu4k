// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUOrigin3D {
 * *     uint32_t x;
 * *     uint32_t y;
 * *     uint32_t z;
 * * }
 * * }
 */
object WGPUOrigin3D {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_INT.withName("x"),
        wgpu_h.C_INT.withName("y"),
        wgpu_h.C_INT.withName("z")
    ).withName("WGPUOrigin3D")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `x$LAYOUT` = `$LAYOUT`.select(groupElement("x")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t x
     * * }
     */
    fun `x$layout`(): ValueLayout.OfInt {
        return `x$LAYOUT`
    }

    private const val `x$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t x
     * * }
     */
    fun `x$offset`(): Long {
        return `x$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t x
     * * }
     */
    fun x(struct: MemorySegment): Int {
        return struct.get(`x$LAYOUT`, `x$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t x
     * * }
     */
    fun x(struct: MemorySegment, fieldValue: Int) {
        struct.set(`x$LAYOUT`, `x$OFFSET`, fieldValue)
    }

    private val `y$LAYOUT` = `$LAYOUT`.select(groupElement("y")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t y
     * * }
     */
    fun `y$layout`(): ValueLayout.OfInt {
        return `y$LAYOUT`
    }

    private const val `y$OFFSET`: Long = 4

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t y
     * * }
     */
    fun `y$offset`(): Long {
        return `y$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t y
     * * }
     */
    fun y(struct: MemorySegment): Int {
        return struct.get(`y$LAYOUT`, `y$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t y
     * * }
     */
    fun y(struct: MemorySegment, fieldValue: Int) {
        struct.set(`y$LAYOUT`, `y$OFFSET`, fieldValue)
    }

    private val `z$LAYOUT` = `$LAYOUT`.select(groupElement("z")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t z
     * * }
     */
    fun `z$layout`(): ValueLayout.OfInt {
        return `z$LAYOUT`
    }

    private const val `z$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t z
     * * }
     */
    fun `z$offset`(): Long {
        return `z$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t z
     * * }
     */
    fun z(struct: MemorySegment): Int {
        return struct.get(`z$LAYOUT`, `z$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t z
     * * }
     */
    fun z(struct: MemorySegment, fieldValue: Int) {
        struct.set(`z$LAYOUT`, `z$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

