// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUExtent3D {
 * *     uint32_t width;
 * *     uint32_t height;
 * *     uint32_t depthOrArrayLayers;
 * * }
 * * }
 */
object WGPUExtent3D {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_INT.withName("width"),
        wgpu_h.C_INT.withName("height"),
        wgpu_h.C_INT.withName("depthOrArrayLayers")
    ).withName("WGPUExtent3D")

    /**
     * The layout of this struct
     */
    @JvmStatic
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `width$LAYOUT` = `$LAYOUT`.select(groupElement("width")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t width
     * * }
     */
    fun `width$layout`(): ValueLayout.OfInt {
        return `width$LAYOUT`
    }

    private const val `width$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t width
     * * }
     */
    fun `width$offset`(): Long {
        return `width$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t width
     * * }
     */
    fun width(struct: MemorySegment): Int {
        return struct.get(`width$LAYOUT`, `width$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t width
     * * }
     */
    fun width(struct: MemorySegment, fieldValue: Int) {
        struct.set(`width$LAYOUT`, `width$OFFSET`, fieldValue)
    }

    private val `height$LAYOUT` = `$LAYOUT`.select(groupElement("height")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t height
     * * }
     */
    fun `height$layout`(): ValueLayout.OfInt {
        return `height$LAYOUT`
    }

    private const val `height$OFFSET`: Long = 4

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t height
     * * }
     */
    fun `height$offset`(): Long {
        return `height$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t height
     * * }
     */
    fun height(struct: MemorySegment): Int {
        return struct.get(`height$LAYOUT`, `height$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t height
     * * }
     */
    fun height(struct: MemorySegment, fieldValue: Int) {
        struct.set(`height$LAYOUT`, `height$OFFSET`, fieldValue)
    }

    private val `depthOrArrayLayers$LAYOUT` = `$LAYOUT`.select(groupElement("depthOrArrayLayers")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t depthOrArrayLayers
     * * }
     */
    fun `depthOrArrayLayers$layout`(): ValueLayout.OfInt {
        return `depthOrArrayLayers$LAYOUT`
    }

    private const val `depthOrArrayLayers$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t depthOrArrayLayers
     * * }
     */
    fun `depthOrArrayLayers$offset`(): Long {
        return `depthOrArrayLayers$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t depthOrArrayLayers
     * * }
     */
    fun depthOrArrayLayers(struct: MemorySegment): Int {
        return struct.get(`depthOrArrayLayers$LAYOUT`, `depthOrArrayLayers$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t depthOrArrayLayers
     * * }
     */
    fun depthOrArrayLayers(struct: MemorySegment, fieldValue: Int) {
        struct.set(`depthOrArrayLayers$LAYOUT`, `depthOrArrayLayers$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

