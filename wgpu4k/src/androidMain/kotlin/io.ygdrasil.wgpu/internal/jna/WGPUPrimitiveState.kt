// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUPrimitiveState {
 * *     const WGPUChainedStruct *nextInChain;
 * *     WGPUPrimitiveTopology topology;
 * *     WGPUIndexFormat stripIndexFormat;
 * *     WGPUFrontFace frontFace;
 * *     WGPUCullMode cullMode;
 * * }
 * * }
 */
object WGPUPrimitiveState {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_INT.withName("topology"),
        wgpu_h.C_INT.withName("stripIndexFormat"),
        wgpu_h.C_INT.withName("frontFace"),
        wgpu_h.C_INT.withName("cullMode")
    ).withName("WGPUPrimitiveState")

    /**
     * The layout of this struct
     */
    @JvmStatic
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `nextInChain$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("nextInChain")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$layout`(): AddressLayout {
        return `nextInChain$LAYOUT`
    }

    private const val `nextInChain$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$offset`(): Long {
        return `nextInChain$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment): MemorySegment {
        return struct.get(`nextInChain$LAYOUT`, `nextInChain$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `nextInChain$LAYOUT`, `nextInChain$OFFSET`,
            fieldValue!!
        )
    }

    private val `topology$LAYOUT` = `$LAYOUT`.select(groupElement("topology")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUPrimitiveTopology topology
     * * }
     */
    fun `topology$layout`(): ValueLayout.OfInt {
        return `topology$LAYOUT`
    }

    private const val `topology$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUPrimitiveTopology topology
     * * }
     */
    fun `topology$offset`(): Long {
        return `topology$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUPrimitiveTopology topology
     * * }
     */
    fun topology(struct: MemorySegment): Int {
        return struct.get(`topology$LAYOUT`, `topology$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUPrimitiveTopology topology
     * * }
     */
    fun topology(struct: MemorySegment, fieldValue: Int) {
        struct.set(`topology$LAYOUT`, `topology$OFFSET`, fieldValue)
    }

    private val `stripIndexFormat$LAYOUT` = `$LAYOUT`.select(groupElement("stripIndexFormat")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUIndexFormat stripIndexFormat
     * * }
     */
    fun `stripIndexFormat$layout`(): ValueLayout.OfInt {
        return `stripIndexFormat$LAYOUT`
    }

    private const val `stripIndexFormat$OFFSET`: Long = 12

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUIndexFormat stripIndexFormat
     * * }
     */
    fun `stripIndexFormat$offset`(): Long {
        return `stripIndexFormat$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUIndexFormat stripIndexFormat
     * * }
     */
    fun stripIndexFormat(struct: MemorySegment): Int {
        return struct.get(`stripIndexFormat$LAYOUT`, `stripIndexFormat$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUIndexFormat stripIndexFormat
     * * }
     */
    fun stripIndexFormat(struct: MemorySegment, fieldValue: Int) {
        struct.set(`stripIndexFormat$LAYOUT`, `stripIndexFormat$OFFSET`, fieldValue)
    }

    private val `frontFace$LAYOUT` = `$LAYOUT`.select(groupElement("frontFace")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUFrontFace frontFace
     * * }
     */
    fun `frontFace$layout`(): ValueLayout.OfInt {
        return `frontFace$LAYOUT`
    }

    private const val `frontFace$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUFrontFace frontFace
     * * }
     */
    fun `frontFace$offset`(): Long {
        return `frontFace$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUFrontFace frontFace
     * * }
     */
    fun frontFace(struct: MemorySegment): Int {
        return struct.get(`frontFace$LAYOUT`, `frontFace$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUFrontFace frontFace
     * * }
     */
    fun frontFace(struct: MemorySegment, fieldValue: Int) {
        struct.set(`frontFace$LAYOUT`, `frontFace$OFFSET`, fieldValue)
    }

    private val `cullMode$LAYOUT` = `$LAYOUT`.select(groupElement("cullMode")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUCullMode cullMode
     * * }
     */
    fun `cullMode$layout`(): ValueLayout.OfInt {
        return `cullMode$LAYOUT`
    }

    private const val `cullMode$OFFSET`: Long = 20

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUCullMode cullMode
     * * }
     */
    fun `cullMode$offset`(): Long {
        return `cullMode$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUCullMode cullMode
     * * }
     */
    fun cullMode(struct: MemorySegment): Int {
        return struct.get(`cullMode$LAYOUT`, `cullMode$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUCullMode cullMode
     * * }
     */
    fun cullMode(struct: MemorySegment, fieldValue: Int) {
        struct.set(`cullMode$LAYOUT`, `cullMode$OFFSET`, fieldValue)
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

