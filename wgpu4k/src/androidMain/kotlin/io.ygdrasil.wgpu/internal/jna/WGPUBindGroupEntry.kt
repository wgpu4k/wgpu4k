// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.paddingLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUBindGroupEntry {
 * *     const WGPUChainedStruct *nextInChain;
 * *     uint32_t binding;
 * *     WGPUBuffer buffer;
 * *     uint64_t offset;
 * *     uint64_t size;
 * *     WGPUSampler sampler;
 * *     WGPUTextureView textureView;
 * * }
 * * }
 */
object WGPUBindGroupEntry {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_INT.withName("binding"),
        paddingLayout(4),
        wgpu_h.C_POINTER.withName("buffer"),
        wgpu_h.C_LONG_LONG.withName("offset"),
        wgpu_h.C_LONG_LONG.withName("size"),
        wgpu_h.C_POINTER.withName("sampler"),
        wgpu_h.C_POINTER.withName("textureView")
    ).withName("WGPUBindGroupEntry")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `nextInChain$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("nextInChain")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$layout`(): AddressLayout {
        return `nextInChain$LAYOUT`
    }

    private const val `nextInChain$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$offset`(): Long {
        return `nextInChain$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment): MemorySegment {
        return struct.get(`nextInChain$LAYOUT`, `nextInChain$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `nextInChain$LAYOUT`, `nextInChain$OFFSET`,
            fieldValue!!
        )
    }

    private val `binding$LAYOUT` = `$LAYOUT`.select(groupElement("binding")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t binding
     * * }
     */
    fun `binding$layout`(): ValueLayout.OfInt {
        return `binding$LAYOUT`
    }

    private const val `binding$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t binding
     * * }
     */
    fun `binding$offset`(): Long {
        return `binding$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t binding
     * * }
     */
    fun binding(struct: MemorySegment): Int {
        return struct.get(`binding$LAYOUT`, `binding$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t binding
     * * }
     */
    fun binding(struct: MemorySegment, fieldValue: Int) {
        struct.set(`binding$LAYOUT`, `binding$OFFSET`, fieldValue)
    }

    private val `buffer$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("buffer")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUBuffer buffer
     * * }
     */
    fun `buffer$layout`(): AddressLayout {
        return `buffer$LAYOUT`
    }

    private const val `buffer$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUBuffer buffer
     * * }
     */
    fun `buffer$offset`(): Long {
        return `buffer$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUBuffer buffer
     * * }
     */
    fun buffer(struct: MemorySegment): MemorySegment {
        return struct.get(`buffer$LAYOUT`, `buffer$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUBuffer buffer
     * * }
     */
    fun buffer(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `buffer$LAYOUT`, `buffer$OFFSET`,
            fieldValue!!
        )
    }

    private val `offset$LAYOUT` = `$LAYOUT`.select(groupElement("offset")) as ValueLayout.OfLong

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint64_t offset
     * * }
     */
    fun `offset$layout`(): ValueLayout.OfLong {
        return `offset$LAYOUT`
    }

    private const val `offset$OFFSET`: Long = 24

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint64_t offset
     * * }
     */
    fun `offset$offset`(): Long {
        return `offset$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint64_t offset
     * * }
     */
    fun offset(struct: MemorySegment): Long {
        return struct.get(`offset$LAYOUT`, `offset$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint64_t offset
     * * }
     */
    fun offset(struct: MemorySegment, fieldValue: Long) {
        struct.set(`offset$LAYOUT`, `offset$OFFSET`, fieldValue)
    }

    private val `size$LAYOUT` = `$LAYOUT`.select(groupElement("size")) as ValueLayout.OfLong

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint64_t size
     * * }
     */
    fun `size$layout`(): ValueLayout.OfLong {
        return `size$LAYOUT`
    }

    private const val `size$OFFSET`: Long = 32

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint64_t size
     * * }
     */
    fun `size$offset`(): Long {
        return `size$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint64_t size
     * * }
     */
    fun size(struct: MemorySegment): Long {
        return struct.get(`size$LAYOUT`, `size$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint64_t size
     * * }
     */
    fun size(struct: MemorySegment, fieldValue: Long) {
        struct.set(`size$LAYOUT`, `size$OFFSET`, fieldValue)
    }

    private val `sampler$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("sampler")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUSampler sampler
     * * }
     */
    fun `sampler$layout`(): AddressLayout {
        return `sampler$LAYOUT`
    }

    private const val `sampler$OFFSET`: Long = 40

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUSampler sampler
     * * }
     */
    fun `sampler$offset`(): Long {
        return `sampler$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUSampler sampler
     * * }
     */
    fun sampler(struct: MemorySegment): MemorySegment {
        return struct.get(`sampler$LAYOUT`, `sampler$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUSampler sampler
     * * }
     */
    fun sampler(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `sampler$LAYOUT`, `sampler$OFFSET`,
            fieldValue!!
        )
    }

    private val `textureView$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("textureView")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureView textureView
     * * }
     */
    fun `textureView$layout`(): AddressLayout {
        return `textureView$LAYOUT`
    }

    private const val `textureView$OFFSET`: Long = 48

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureView textureView
     * * }
     */
    fun `textureView$offset`(): Long {
        return `textureView$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureView textureView
     * * }
     */
    fun textureView(struct: MemorySegment): MemorySegment {
        return struct.get(`textureView$LAYOUT`, `textureView$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureView textureView
     * * }
     */
    fun textureView(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `textureView$LAYOUT`, `textureView$OFFSET`,
            fieldValue!!
        )
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

