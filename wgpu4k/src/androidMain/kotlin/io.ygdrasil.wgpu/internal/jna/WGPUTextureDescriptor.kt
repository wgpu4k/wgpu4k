// Generated by jextract
package io.ygdrasil.wgpu.internal.jna

import java.lang.foreign.AddressLayout
import java.lang.foreign.Arena
import java.lang.foreign.GroupLayout
import java.lang.foreign.MemoryLayout.Companion.sequenceLayout
import java.lang.foreign.MemoryLayout.Companion.structLayout
import java.lang.foreign.MemoryLayout.PathElement.groupElement
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.ValueLayout
import java.util.function.Consumer

/**
 * {@snippet lang=c :
 * * struct WGPUTextureDescriptor {
 * *     const WGPUChainedStruct *nextInChain;
 * *     const char *label;
 * *     WGPUTextureUsageFlags usage;
 * *     WGPUTextureDimension dimension;
 * *     WGPUExtent3D size;
 * *     WGPUTextureFormat format;
 * *     uint32_t mipLevelCount;
 * *     uint32_t sampleCount;
 * *     size_t viewFormatCount;
 * *     const WGPUTextureFormat *viewFormats;
 * * }
 * * }
 */
object WGPUTextureDescriptor {
    private val `$LAYOUT` = structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("label"),
        wgpu_h.C_INT.withName("usage"),
        wgpu_h.C_INT.withName("dimension"),
        WGPUExtent3D.layout().withName("size"),
        wgpu_h.C_INT.withName("format"),
        wgpu_h.C_INT.withName("mipLevelCount"),
        wgpu_h.C_INT.withName("sampleCount"),
        wgpu_h.C_LONG.withName("viewFormatCount"),
        wgpu_h.C_POINTER.withName("viewFormats")
    ).withName("WGPUTextureDescriptor")

    /**
     * The layout of this struct
     */
    fun layout(): GroupLayout {
        return `$LAYOUT`
    }

    private val `nextInChain$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("nextInChain")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$layout`(): AddressLayout {
        return `nextInChain$LAYOUT`
    }

    private const val `nextInChain$OFFSET`: Long = 0

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun `nextInChain$offset`(): Long {
        return `nextInChain$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment): MemorySegment {
        return struct.get(`nextInChain$LAYOUT`, `nextInChain$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUChainedStruct *nextInChain
     * * }
     */
    fun nextInChain(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `nextInChain$LAYOUT`, `nextInChain$OFFSET`,
            fieldValue!!
        )
    }

    private val `label$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("label")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const char *label
     * * }
     */
    fun `label$layout`(): AddressLayout {
        return `label$LAYOUT`
    }

    private const val `label$OFFSET`: Long = 8

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const char *label
     * * }
     */
    fun `label$offset`(): Long {
        return `label$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const char *label
     * * }
     */
    fun label(struct: MemorySegment): MemorySegment {
        return struct.get(`label$LAYOUT`, `label$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const char *label
     * * }
     */
    fun label(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `label$LAYOUT`, `label$OFFSET`,
            fieldValue!!
        )
    }

    private val `usage$LAYOUT` = `$LAYOUT`.select(groupElement("usage")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureUsageFlags usage
     * * }
     */
    fun `usage$layout`(): ValueLayout.OfInt {
        return `usage$LAYOUT`
    }

    private const val `usage$OFFSET`: Long = 16

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureUsageFlags usage
     * * }
     */
    fun `usage$offset`(): Long {
        return `usage$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureUsageFlags usage
     * * }
     */
    fun usage(struct: MemorySegment): Int {
        return struct.get(`usage$LAYOUT`, `usage$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureUsageFlags usage
     * * }
     */
    fun usage(struct: MemorySegment, fieldValue: Int) {
        struct.set(`usage$LAYOUT`, `usage$OFFSET`, fieldValue)
    }

    private val `dimension$LAYOUT` = `$LAYOUT`.select(groupElement("dimension")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureDimension dimension
     * * }
     */
    fun `dimension$layout`(): ValueLayout.OfInt {
        return `dimension$LAYOUT`
    }

    private const val `dimension$OFFSET`: Long = 20

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureDimension dimension
     * * }
     */
    fun `dimension$offset`(): Long {
        return `dimension$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureDimension dimension
     * * }
     */
    fun dimension(struct: MemorySegment): Int {
        return struct.get(`dimension$LAYOUT`, `dimension$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureDimension dimension
     * * }
     */
    fun dimension(struct: MemorySegment, fieldValue: Int) {
        struct.set(`dimension$LAYOUT`, `dimension$OFFSET`, fieldValue)
    }

    private val `size$LAYOUT` = `$LAYOUT`.select(groupElement("size")) as GroupLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUExtent3D size
     * * }
     */
    fun `size$layout`(): GroupLayout {
        return `size$LAYOUT`
    }

    private const val `size$OFFSET`: Long = 24

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUExtent3D size
     * * }
     */
    fun `size$offset`(): Long {
        return `size$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUExtent3D size
     * * }
     */
    fun size(struct: MemorySegment): MemorySegment {
        return struct.asSlice(`size$OFFSET`, `size$LAYOUT`.byteSize())
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUExtent3D size
     * * }
     */
    fun size(struct: MemorySegment?, fieldValue: MemorySegment?) {
        MemorySegment.copy(
            fieldValue!!, 0L,
            struct!!, `size$OFFSET`, `size$LAYOUT`.byteSize()
        )
    }

    private val `format$LAYOUT` = `$LAYOUT`.select(groupElement("format")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * WGPUTextureFormat format
     * * }
     */
    fun `format$layout`(): ValueLayout.OfInt {
        return `format$LAYOUT`
    }

    private const val `format$OFFSET`: Long = 36

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * WGPUTextureFormat format
     * * }
     */
    fun `format$offset`(): Long {
        return `format$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * WGPUTextureFormat format
     * * }
     */
    fun format(struct: MemorySegment): Int {
        return struct.get(`format$LAYOUT`, `format$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * WGPUTextureFormat format
     * * }
     */
    fun format(struct: MemorySegment, fieldValue: Int) {
        struct.set(`format$LAYOUT`, `format$OFFSET`, fieldValue)
    }

    private val `mipLevelCount$LAYOUT` = `$LAYOUT`.select(groupElement("mipLevelCount")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t mipLevelCount
     * * }
     */
    fun `mipLevelCount$layout`(): ValueLayout.OfInt {
        return `mipLevelCount$LAYOUT`
    }

    private const val `mipLevelCount$OFFSET`: Long = 40

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t mipLevelCount
     * * }
     */
    fun `mipLevelCount$offset`(): Long {
        return `mipLevelCount$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t mipLevelCount
     * * }
     */
    fun mipLevelCount(struct: MemorySegment): Int {
        return struct.get(`mipLevelCount$LAYOUT`, `mipLevelCount$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t mipLevelCount
     * * }
     */
    fun mipLevelCount(struct: MemorySegment, fieldValue: Int) {
        struct.set(`mipLevelCount$LAYOUT`, `mipLevelCount$OFFSET`, fieldValue)
    }

    private val `sampleCount$LAYOUT` = `$LAYOUT`.select(groupElement("sampleCount")) as ValueLayout.OfInt

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * uint32_t sampleCount
     * * }
     */
    fun `sampleCount$layout`(): ValueLayout.OfInt {
        return `sampleCount$LAYOUT`
    }

    private const val `sampleCount$OFFSET`: Long = 44

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * uint32_t sampleCount
     * * }
     */
    fun `sampleCount$offset`(): Long {
        return `sampleCount$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * uint32_t sampleCount
     * * }
     */
    fun sampleCount(struct: MemorySegment): Int {
        return struct.get(`sampleCount$LAYOUT`, `sampleCount$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * uint32_t sampleCount
     * * }
     */
    fun sampleCount(struct: MemorySegment, fieldValue: Int) {
        struct.set(`sampleCount$LAYOUT`, `sampleCount$OFFSET`, fieldValue)
    }

    private val `viewFormatCount$LAYOUT` = `$LAYOUT`.select(groupElement("viewFormatCount")) as ValueLayout.OfLong

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * size_t viewFormatCount
     * * }
     */
    fun `viewFormatCount$layout`(): ValueLayout.OfLong {
        return `viewFormatCount$LAYOUT`
    }

    private const val `viewFormatCount$OFFSET`: Long = 48

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * size_t viewFormatCount
     * * }
     */
    fun `viewFormatCount$offset`(): Long {
        return `viewFormatCount$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * size_t viewFormatCount
     * * }
     */
    fun viewFormatCount(struct: MemorySegment): Long {
        return struct.get(`viewFormatCount$LAYOUT`, `viewFormatCount$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * size_t viewFormatCount
     * * }
     */
    fun viewFormatCount(struct: MemorySegment, fieldValue: Long) {
        struct.set(`viewFormatCount$LAYOUT`, `viewFormatCount$OFFSET`, fieldValue)
    }

    private val `viewFormats$LAYOUT`: AddressLayout = `$LAYOUT`.select(groupElement("viewFormats")) as AddressLayout

    /**
     * Layout for field:
     * {@snippet lang=c :
     * * const WGPUTextureFormat *viewFormats
     * * }
     */
    fun `viewFormats$layout`(): AddressLayout {
        return `viewFormats$LAYOUT`
    }

    private const val `viewFormats$OFFSET`: Long = 56

    /**
     * Offset for field:
     * {@snippet lang=c :
     * * const WGPUTextureFormat *viewFormats
     * * }
     */
    fun `viewFormats$offset`(): Long {
        return `viewFormats$OFFSET`
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * * const WGPUTextureFormat *viewFormats
     * * }
     */
    fun viewFormats(struct: MemorySegment): MemorySegment {
        return struct.get(`viewFormats$LAYOUT`, `viewFormats$OFFSET`)
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * * const WGPUTextureFormat *viewFormats
     * * }
     */
    fun viewFormats(struct: MemorySegment, fieldValue: MemorySegment?) {
        struct.set(
            `viewFormats$LAYOUT`, `viewFormats$OFFSET`,
            fieldValue!!
        )
    }

    /**
     * Obtains a slice of `arrayParam` which selects the array element at `index`.
     * The returned segment has address `arrayParam.address() + index * layout().byteSize()`
     */
    fun asSlice(array: MemorySegment, index: Long): MemorySegment {
        return array.asSlice(layout().byteSize() * index)
    }

    /**
     * The size (in bytes) of this struct
     */
    fun sizeof(): Long {
        return layout().byteSize()
    }

    /**
     * Allocate a segment of size `layout().byteSize()` using `allocator`
     */
    fun allocate(allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(layout())
    }

    /**
     * Allocate an array of size `elementCount` using `allocator`.
     * The returned segment has size `elementCount * layout().byteSize()`.
     */
    fun allocateArray(elementCount: Long, allocator: SegmentAllocator): MemorySegment {
        return allocator.allocate(sequenceLayout(elementCount, layout()))
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `layout().byteSize()`
     */
    fun reinterpret(addr: MemorySegment, arena: Arena, cleanup: Consumer<MemorySegment?>): MemorySegment {
        return reinterpret(addr, 1, arena, cleanup)
    }

    /**
     * Reinterprets `addr` using target `arena` and `cleanupAction` (if any).
     * The returned segment has size `elementCount * layout().byteSize()`
     */
    fun reinterpret(
        addr: MemorySegment,
        elementCount: Long,
        arena: Arena,
        cleanup: Consumer<MemorySegment?>
    ): MemorySegment {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup)
    }
}

