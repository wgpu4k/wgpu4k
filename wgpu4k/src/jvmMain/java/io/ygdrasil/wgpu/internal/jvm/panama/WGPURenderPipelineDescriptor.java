// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPURenderPipelineDescriptor {
 *     const WGPUChainedStruct *nextInChain;
 *     const char *label;
 *     WGPUPipelineLayout layout;
 *     WGPUVertexState vertex;
 *     WGPUPrimitiveState primitive;
 *     const WGPUDepthStencilState *depthStencil;
 *     WGPUMultisampleState multisample;
 *     const WGPUFragmentState *fragment;
 * }
 * }
 */
public class WGPURenderPipelineDescriptor {

    WGPURenderPipelineDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_POINTER.withName("label"),
        wgpu_h.C_POINTER.withName("layout"),
        WGPUVertexState.layout().withName("vertex"),
        WGPUPrimitiveState.layout().withName("primitive"),
        wgpu_h.C_POINTER.withName("depthStencil"),
        WGPUMultisampleState.layout().withName("multisample"),
        wgpu_h.C_POINTER.withName("fragment")
    ).withName("WGPURenderPipelineDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final AddressLayout label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final AddressLayout label$layout() {
        return label$LAYOUT;
    }

    private static final long label$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static final long label$offset() {
        return label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static MemorySegment label(MemorySegment struct) {
        return struct.get(label$LAYOUT, label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *label
     * }
     */
    public static void label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(label$LAYOUT, label$OFFSET, fieldValue);
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUPipelineLayout layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUPipelineLayout layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUPipelineLayout layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUPipelineLayout layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final GroupLayout vertex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("vertex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUVertexState vertex
     * }
     */
    public static final GroupLayout vertex$layout() {
        return vertex$LAYOUT;
    }

    private static final long vertex$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUVertexState vertex
     * }
     */
    public static final long vertex$offset() {
        return vertex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUVertexState vertex
     * }
     */
    public static MemorySegment vertex(MemorySegment struct) {
        return struct.asSlice(vertex$OFFSET, vertex$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUVertexState vertex
     * }
     */
    public static void vertex(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vertex$OFFSET, vertex$LAYOUT.byteSize());
    }

    private static final GroupLayout primitive$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("primitive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUPrimitiveState primitive
     * }
     */
    public static final GroupLayout primitive$layout() {
        return primitive$LAYOUT;
    }

    private static final long primitive$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUPrimitiveState primitive
     * }
     */
    public static final long primitive$offset() {
        return primitive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUPrimitiveState primitive
     * }
     */
    public static MemorySegment primitive(MemorySegment struct) {
        return struct.asSlice(primitive$OFFSET, primitive$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUPrimitiveState primitive
     * }
     */
    public static void primitive(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, primitive$OFFSET, primitive$LAYOUT.byteSize());
    }

    private static final AddressLayout depthStencil$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("depthStencil"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUDepthStencilState *depthStencil
     * }
     */
    public static final AddressLayout depthStencil$layout() {
        return depthStencil$LAYOUT;
    }

    private static final long depthStencil$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUDepthStencilState *depthStencil
     * }
     */
    public static final long depthStencil$offset() {
        return depthStencil$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUDepthStencilState *depthStencil
     * }
     */
    public static MemorySegment depthStencil(MemorySegment struct) {
        return struct.get(depthStencil$LAYOUT, depthStencil$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUDepthStencilState *depthStencil
     * }
     */
    public static void depthStencil(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(depthStencil$LAYOUT, depthStencil$OFFSET, fieldValue);
    }

    private static final GroupLayout multisample$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("multisample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUMultisampleState multisample
     * }
     */
    public static final GroupLayout multisample$layout() {
        return multisample$LAYOUT;
    }

    private static final long multisample$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUMultisampleState multisample
     * }
     */
    public static final long multisample$offset() {
        return multisample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUMultisampleState multisample
     * }
     */
    public static MemorySegment multisample(MemorySegment struct) {
        return struct.asSlice(multisample$OFFSET, multisample$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUMultisampleState multisample
     * }
     */
    public static void multisample(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, multisample$OFFSET, multisample$LAYOUT.byteSize());
    }

    private static final AddressLayout fragment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUFragmentState *fragment
     * }
     */
    public static final AddressLayout fragment$layout() {
        return fragment$LAYOUT;
    }

    private static final long fragment$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUFragmentState *fragment
     * }
     */
    public static final long fragment$offset() {
        return fragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUFragmentState *fragment
     * }
     */
    public static MemorySegment fragment(MemorySegment struct) {
        return struct.get(fragment$LAYOUT, fragment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUFragmentState *fragment
     * }
     */
    public static void fragment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fragment$LAYOUT, fragment$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

