// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfFloat;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct WGPUDepthStencilState {
 *     const WGPUChainedStruct *nextInChain;
 *     WGPUTextureFormat format;
 *     WGPUBool depthWriteEnabled;
 *     WGPUCompareFunction depthCompare;
 *     WGPUStencilFaceState stencilFront;
 *     WGPUStencilFaceState stencilBack;
 *     uint32_t stencilReadMask;
 *     uint32_t stencilWriteMask;
 *     int32_t depthBias;
 *     float depthBiasSlopeScale;
 *     float depthBiasClamp;
 * }
 * }
 */
public class WGPUDepthStencilState {

    WGPUDepthStencilState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_POINTER.withName("nextInChain"),
        wgpu_h.C_INT.withName("format"),
        wgpu_h.C_INT.withName("depthWriteEnabled"),
        wgpu_h.C_INT.withName("depthCompare"),
        WGPUStencilFaceState.layout().withName("stencilFront"),
        WGPUStencilFaceState.layout().withName("stencilBack"),
        wgpu_h.C_INT.withName("stencilReadMask"),
        wgpu_h.C_INT.withName("stencilWriteMask"),
        wgpu_h.C_INT.withName("depthBias"),
        wgpu_h.C_FLOAT.withName("depthBiasSlopeScale"),
        wgpu_h.C_FLOAT.withName("depthBiasClamp")
    ).withName("WGPUDepthStencilState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nextInChain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextInChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final AddressLayout nextInChain$layout() {
        return nextInChain$LAYOUT;
    }

    private static final long nextInChain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static final long nextInChain$offset() {
        return nextInChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static MemorySegment nextInChain(MemorySegment struct) {
        return struct.get(nextInChain$LAYOUT, nextInChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const WGPUChainedStruct *nextInChain
     * }
     */
    public static void nextInChain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextInChain$LAYOUT, nextInChain$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUTextureFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfInt depthWriteEnabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthWriteEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBool depthWriteEnabled
     * }
     */
    public static final OfInt depthWriteEnabled$layout() {
        return depthWriteEnabled$LAYOUT;
    }

    private static final long depthWriteEnabled$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBool depthWriteEnabled
     * }
     */
    public static final long depthWriteEnabled$offset() {
        return depthWriteEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBool depthWriteEnabled
     * }
     */
    public static int depthWriteEnabled(MemorySegment struct) {
        return struct.get(depthWriteEnabled$LAYOUT, depthWriteEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBool depthWriteEnabled
     * }
     */
    public static void depthWriteEnabled(MemorySegment struct, int fieldValue) {
        struct.set(depthWriteEnabled$LAYOUT, depthWriteEnabled$OFFSET, fieldValue);
    }

    private static final OfInt depthCompare$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthCompare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUCompareFunction depthCompare
     * }
     */
    public static final OfInt depthCompare$layout() {
        return depthCompare$LAYOUT;
    }

    private static final long depthCompare$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUCompareFunction depthCompare
     * }
     */
    public static final long depthCompare$offset() {
        return depthCompare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUCompareFunction depthCompare
     * }
     */
    public static int depthCompare(MemorySegment struct) {
        return struct.get(depthCompare$LAYOUT, depthCompare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUCompareFunction depthCompare
     * }
     */
    public static void depthCompare(MemorySegment struct, int fieldValue) {
        struct.set(depthCompare$LAYOUT, depthCompare$OFFSET, fieldValue);
    }

    private static final GroupLayout stencilFront$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stencilFront"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilFront
     * }
     */
    public static final GroupLayout stencilFront$layout() {
        return stencilFront$LAYOUT;
    }

    private static final long stencilFront$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilFront
     * }
     */
    public static final long stencilFront$offset() {
        return stencilFront$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilFront
     * }
     */
    public static MemorySegment stencilFront(MemorySegment struct) {
        return struct.asSlice(stencilFront$OFFSET, stencilFront$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilFront
     * }
     */
    public static void stencilFront(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stencilFront$OFFSET, stencilFront$LAYOUT.byteSize());
    }

    private static final GroupLayout stencilBack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stencilBack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilBack
     * }
     */
    public static final GroupLayout stencilBack$layout() {
        return stencilBack$LAYOUT;
    }

    private static final long stencilBack$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilBack
     * }
     */
    public static final long stencilBack$offset() {
        return stencilBack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilBack
     * }
     */
    public static MemorySegment stencilBack(MemorySegment struct) {
        return struct.asSlice(stencilBack$OFFSET, stencilBack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUStencilFaceState stencilBack
     * }
     */
    public static void stencilBack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stencilBack$OFFSET, stencilBack$LAYOUT.byteSize());
    }

    private static final OfInt stencilReadMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilReadMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stencilReadMask
     * }
     */
    public static final OfInt stencilReadMask$layout() {
        return stencilReadMask$LAYOUT;
    }

    private static final long stencilReadMask$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stencilReadMask
     * }
     */
    public static final long stencilReadMask$offset() {
        return stencilReadMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stencilReadMask
     * }
     */
    public static int stencilReadMask(MemorySegment struct) {
        return struct.get(stencilReadMask$LAYOUT, stencilReadMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stencilReadMask
     * }
     */
    public static void stencilReadMask(MemorySegment struct, int fieldValue) {
        struct.set(stencilReadMask$LAYOUT, stencilReadMask$OFFSET, fieldValue);
    }

    private static final OfInt stencilWriteMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilWriteMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stencilWriteMask
     * }
     */
    public static final OfInt stencilWriteMask$layout() {
        return stencilWriteMask$LAYOUT;
    }

    private static final long stencilWriteMask$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stencilWriteMask
     * }
     */
    public static final long stencilWriteMask$offset() {
        return stencilWriteMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stencilWriteMask
     * }
     */
    public static int stencilWriteMask(MemorySegment struct) {
        return struct.get(stencilWriteMask$LAYOUT, stencilWriteMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stencilWriteMask
     * }
     */
    public static void stencilWriteMask(MemorySegment struct, int fieldValue) {
        struct.set(stencilWriteMask$LAYOUT, stencilWriteMask$OFFSET, fieldValue);
    }

    private static final OfInt depthBias$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthBias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t depthBias
     * }
     */
    public static final OfInt depthBias$layout() {
        return depthBias$LAYOUT;
    }

    private static final long depthBias$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t depthBias
     * }
     */
    public static final long depthBias$offset() {
        return depthBias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t depthBias
     * }
     */
    public static int depthBias(MemorySegment struct) {
        return struct.get(depthBias$LAYOUT, depthBias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t depthBias
     * }
     */
    public static void depthBias(MemorySegment struct, int fieldValue) {
        struct.set(depthBias$LAYOUT, depthBias$OFFSET, fieldValue);
    }

    private static final OfFloat depthBiasSlopeScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthBiasSlopeScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthBiasSlopeScale
     * }
     */
    public static final OfFloat depthBiasSlopeScale$layout() {
        return depthBiasSlopeScale$LAYOUT;
    }

    private static final long depthBiasSlopeScale$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthBiasSlopeScale
     * }
     */
    public static final long depthBiasSlopeScale$offset() {
        return depthBiasSlopeScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthBiasSlopeScale
     * }
     */
    public static float depthBiasSlopeScale(MemorySegment struct) {
        return struct.get(depthBiasSlopeScale$LAYOUT, depthBiasSlopeScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthBiasSlopeScale
     * }
     */
    public static void depthBiasSlopeScale(MemorySegment struct, float fieldValue) {
        struct.set(depthBiasSlopeScale$LAYOUT, depthBiasSlopeScale$OFFSET, fieldValue);
    }

    private static final OfFloat depthBiasClamp$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthBiasClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static final OfFloat depthBiasClamp$layout() {
        return depthBiasClamp$LAYOUT;
    }

    private static final long depthBiasClamp$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static final long depthBiasClamp$offset() {
        return depthBiasClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static float depthBiasClamp(MemorySegment struct) {
        return struct.get(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static void depthBiasClamp(MemorySegment struct, float fieldValue) {
        struct.set(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

