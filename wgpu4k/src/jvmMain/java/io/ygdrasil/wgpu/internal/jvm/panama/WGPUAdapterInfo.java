// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WGPUAdapterInfo {
 *     const char *vendor;
 *     const char *architecture;
 *     const char *device;
 *     const char *description;
 * }
 * }
 */
public class WGPUAdapterInfo {

    WGPUAdapterInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        webgpu_h.C_POINTER.withName("vendor"),
        webgpu_h.C_POINTER.withName("architecture"),
        webgpu_h.C_POINTER.withName("device"),
        webgpu_h.C_POINTER.withName("description")
    ).withName("WGPUAdapterInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout vendor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vendor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *vendor
     * }
     */
    public static final AddressLayout vendor$layout() {
        return vendor$LAYOUT;
    }

    private static final long vendor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *vendor
     * }
     */
    public static final long vendor$offset() {
        return vendor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *vendor
     * }
     */
    public static MemorySegment vendor(MemorySegment struct) {
        return struct.get(vendor$LAYOUT, vendor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *vendor
     * }
     */
    public static void vendor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vendor$LAYOUT, vendor$OFFSET, fieldValue);
    }

    private static final AddressLayout architecture$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("architecture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *architecture
     * }
     */
    public static final AddressLayout architecture$layout() {
        return architecture$LAYOUT;
    }

    private static final long architecture$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *architecture
     * }
     */
    public static final long architecture$offset() {
        return architecture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *architecture
     * }
     */
    public static MemorySegment architecture(MemorySegment struct) {
        return struct.get(architecture$LAYOUT, architecture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *architecture
     * }
     */
    public static void architecture(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(architecture$LAYOUT, architecture$OFFSET, fieldValue);
    }

    private static final AddressLayout device$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("device"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *device
     * }
     */
    public static final AddressLayout device$layout() {
        return device$LAYOUT;
    }

    private static final long device$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *device
     * }
     */
    public static final long device$offset() {
        return device$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *device
     * }
     */
    public static MemorySegment device(MemorySegment struct) {
        return struct.get(device$LAYOUT, device$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *device
     * }
     */
    public static void device(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(device$LAYOUT, device$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

