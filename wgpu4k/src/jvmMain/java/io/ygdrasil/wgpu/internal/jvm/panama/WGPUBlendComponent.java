// Generated by jextract

package io.ygdrasil.wgpu.internal.jvm.panama;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct WGPUBlendComponent {
 *     WGPUBlendOperation operation;
 *     WGPUBlendFactor srcFactor;
 *     WGPUBlendFactor dstFactor;
 * }
 * }
 */
public class WGPUBlendComponent {

    WGPUBlendComponent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgpu_h.C_INT.withName("operation"),
        wgpu_h.C_INT.withName("srcFactor"),
        wgpu_h.C_INT.withName("dstFactor")
    ).withName("WGPUBlendComponent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt operation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("operation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBlendOperation operation
     * }
     */
    public static final OfInt operation$layout() {
        return operation$LAYOUT;
    }

    private static final long operation$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBlendOperation operation
     * }
     */
    public static final long operation$offset() {
        return operation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBlendOperation operation
     * }
     */
    public static int operation(MemorySegment struct) {
        return struct.get(operation$LAYOUT, operation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBlendOperation operation
     * }
     */
    public static void operation(MemorySegment struct, int fieldValue) {
        struct.set(operation$LAYOUT, operation$OFFSET, fieldValue);
    }

    private static final OfInt srcFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBlendFactor srcFactor
     * }
     */
    public static final OfInt srcFactor$layout() {
        return srcFactor$LAYOUT;
    }

    private static final long srcFactor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBlendFactor srcFactor
     * }
     */
    public static final long srcFactor$offset() {
        return srcFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBlendFactor srcFactor
     * }
     */
    public static int srcFactor(MemorySegment struct) {
        return struct.get(srcFactor$LAYOUT, srcFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBlendFactor srcFactor
     * }
     */
    public static void srcFactor(MemorySegment struct, int fieldValue) {
        struct.set(srcFactor$LAYOUT, srcFactor$OFFSET, fieldValue);
    }

    private static final OfInt dstFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dstFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WGPUBlendFactor dstFactor
     * }
     */
    public static final OfInt dstFactor$layout() {
        return dstFactor$LAYOUT;
    }

    private static final long dstFactor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WGPUBlendFactor dstFactor
     * }
     */
    public static final long dstFactor$offset() {
        return dstFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WGPUBlendFactor dstFactor
     * }
     */
    public static int dstFactor(MemorySegment struct) {
        return struct.get(dstFactor$LAYOUT, dstFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WGPUBlendFactor dstFactor
     * }
     */
    public static void dstFactor(MemorySegment struct, int fieldValue) {
        struct.set(dstFactor$LAYOUT, dstFactor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

