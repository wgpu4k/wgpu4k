package darwin

import org.rococoa.ObjCClass
import org.rococoa.ObjCObject
import org.rococoa.cocoa.foundation.NSInteger

/**
 * This file was autogenerated by [JNAerator](http://jnaerator.googlecode.com/),<br></br>
 * a tool written by [Olivier Chafik](http://ochafik.free.fr/) that [uses a few opensource projects.](http://code.google.com/p/jnaerator/wiki/CreditsAndLicense).<br></br>
 * For help, please visit [NativeLibs4Java](http://nativelibs4java.googlecode.com/), [Rococoa](http://rococoa.dev.java.net/), or [JNA](http://jna.dev.java.net/).
 */
abstract class NSPrintPanel : NSObject(), ObjCObject {
	interface _Class : ObjCClass {
		/**
		 * Create a new NSPrintPanel.<br></br>
		 * Original signature : `+(NSPrintPanel*)printPanel`<br></br>
		 * *native declaration : NSPrintPanel.h:102*
		 */
		open fun printPanel(): NSPrintPanel?

		/// <i>native declaration : NSPrintPanel.h</i>
		open fun alloc(): NSPrintPanel?

		/// <i>native declaration : NSPrintPanel.h</i>
		open fun new_(): NSPrintPanel?
	}

	/**
	 * Original signature : `-(NSArray*)accessoryControllers`<br></br>
	 * *native declaration : NSPrintPanel.h:110*
	 */
	abstract fun accessoryControllers(): NSArray?

	/**
	 * The options described above. In Mac OS 10.5 an -options message sent to a freshly-created NSPrintPanel will return (NSPrintPanelShowsCopies | NSPrintPanelShowsPageRange) unless it was created by an NSPrintOperation, in which case it will also return NSPrintPanelShowsPreview. (See the release notes for backward binary compatibility information though.) To allow your application to take advantage of controls that may be added by default in future versions of Mac OS X, get the options from the print panel you've just created, turn on and off the flags you care about, and then set the options.<br></br>
	 * Original signature : `-(void)setOptions:(NSPrintPanelOptions)`<br></br>
	 * *native declaration : NSPrintPanel.h:114*<br></br>
	 *
	 * @param options @see AppKitLibrary#NSPrintPanelOptions
	 */
	abstract fun setOptions(options: Int)

	/**
	 * Original signature : `-(NSPrintPanelOptions)options`<br></br>
	 * *native declaration : NSPrintPanel.h:115*
	 */
	abstract fun options(): Int

	/**
	 * The title of the default button in the print panel. You can override the standard button title, "Print," when you're using an NSPrintPanel in such a way that printing isn't actually going to happen when the user presses that button.<br></br>
	 * Original signature : `-(void)setDefaultButtonTitle:(NSString*)`<br></br>
	 * *native declaration : NSPrintPanel.h:119*
	 */
	abstract fun setDefaultButtonTitle(defaultButtonTitle: NSString?)

	/**
	 * Original signature : `-(NSString*)defaultButtonTitle`<br></br>
	 * *native declaration : NSPrintPanel.h:120*
	 */
	abstract fun defaultButtonTitle(): NSString?

	/**
	 * The HTML help anchor for the print panel. You can override the standard anchor of the print panel's help button.<br></br>
	 * Original signature : `-(void)setHelpAnchor:(NSString*)`<br></br>
	 * *native declaration : NSPrintPanel.h:124*
	 */
	abstract fun setHelpAnchor(helpAnchor: NSString?)

	/**
	 * Original signature : `-(NSString*)helpAnchor`<br></br>
	 * *native declaration : NSPrintPanel.h:125*
	 */
	abstract fun helpAnchor(): NSString?

	/**
	 * Set or get a string that provides a hint about the type of print job in which this print panel is being used. This controls the set of items that appear in the Presets menu. The string must be one of the job style hint strings declared above, or nil to show general presets.<br></br>
	 * Original signature : `-(void)setJobStyleHint:(NSString*)`<br></br>
	 * *native declaration : NSPrintPanel.h:132*
	 */
	abstract fun setJobStyleHint(hint: NSString?)

	/**
	 * Original signature : `-(NSString*)jobStyleHint`<br></br>
	 * *native declaration : NSPrintPanel.h:133*
	 */
	abstract fun jobStyleHint(): NSString?

	/**
	 * Present a print panel to the user, document-modally. When the user has dismissed it, send the message selected by didEndSelector to the delegate, with the contextInfo as the last argument. The method selected by didEndSelector must have the same signature as:<br></br>
	 * - (void)printPanelDidEnd:(NSPrintPanel *)printPanel returnCode:(NSInteger)returnCode contextInfo:(void *)contextInfo;<br></br>
	 * Original signature : `-(void)beginSheetWithPrintInfo:(NSPrintInfo*) modalForWindow:(NSWindow*) delegate:(id) didEndSelector:(SEL) contextInfo:(void*)`<br></br>
	 * *native declaration : NSPrintPanel.h:141*
	 */
	abstract fun beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(
		printInfo: NSPrintInfo?,
		docWindow: NSWindow?,
		delegate: ObjCObject?,
		didEndSelector: org.rococoa.Selector?,
		contextInfo: com.sun.jna.Pointer?
	)

	/**
	 * Original signature : `-(NSInteger)runModalWithPrintInfo:(NSPrintInfo*)`<br></br>
	 * *native declaration : NSPrintPanel.h:146*
	 */
	abstract fun runModalWithPrintInfo(printInfo: NSPrintInfo?): NSInteger?

	/**
	 * Original signature : `-(NSInteger)runModal`<br></br>
	 * *native declaration : NSPrintPanel.h:148*
	 */
	abstract fun runModal(): NSInteger?

	/**
	 * A simple accessor. Your -beginSheetWithPrintInfo:... delegate can use this so it doesn't have to keep a pointer to the NSPrintInfo elsewhere while waiting for the user to dismiss the print panel.<br></br>
	 * Original signature : `-(NSPrintInfo*)printInfo`<br></br>
	 * *native declaration : NSPrintPanel.h:154*
	 */
	abstract fun printInfo(): NSPrintInfo?

	companion object {
		private val CLASS: _Class = org.rococoa.Rococoa.createClass("NSPrintPanel", _Class::class.java)


		/// Whether the print panel has separate controls (not in any accessory view) that allow the user to change the number of copies to print, which pages to print, paper size, orientation, and scaling, respectively.
		const val NSPrintPanelShowsCopies: Int = 1 shl 0
		const val NSPrintPanelShowsPageRange: Int = 1 shl 1
		const val NSPrintPanelShowsPaperSize: Int = 1 shl 2
		const val NSPrintPanelShowsOrientation: Int = 1 shl 3
		const val NSPrintPanelShowsScaling: Int = 1 shl 4

		/// Whether the print panel has an additional "Selection" option for the paper range.
		const val NSPrintPanelShowsPrintSelection: Int = 1 shl 5

		/// Whether the print panel has a page setup accessory view with controls that allow the user to change paper size, orientation, and scaling. Any control that appear in the main part of the panel because one of the previous options is used does not also appear in the page setup accessory view.
		const val NSPrintPanelShowsPageSetupAccessory: Int = 1 shl 8

		/**
		 * Whether the print panel has a built-in preview. Setting this option in a print panel that's not being presented by an NSPrintOperation is not useful. Two things you need to be aware of when this option is set:<br></br>
		 * 1) the NSPrintInfo passed into -beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo: or -runModalWithPrintInfo: will be retained instead of copied. This is so that the NSPrintOperation that is presenting the panel can respond to -printInfo messages by returning the NSPrintInfo that the user is actually looking at and manipulating, which is the most useful thing for it to return. The result is that the passed-in NSPrintInfo can be mutated even when the user cancels the print panel, but that's OK; the factory methods that you use to create NSPrintOperations do the copying that's appropriate in that case.<br></br>
		 * 2) The presenting NSPrintOperation will send the printing view more messages that it would otherwise, so that it can do pagination right away, draw the preview on screen, etc.
		 */
		const val NSPrintPanelShowsPreview: Int = 1 shl 17

		/**
		 * Create a new NSPrintPanel.<br></br>
		 * Original signature : `+(NSPrintPanel*)printPanel`<br></br>
		 * *native declaration : NSPrintPanel.h:102*
		 */
		fun printPanel(): NSPrintPanel? {
			return CLASS.printPanel()
		}
	}
}
