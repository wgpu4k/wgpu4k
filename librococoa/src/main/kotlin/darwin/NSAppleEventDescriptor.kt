package darwin 

import org.rococoa.ObjCClass
import org.rococoa.Rococoa
import org.rococoa.cocoa.foundation.NSInteger

/**
 * This file was autogenerated by [JNAerator](http://jnaerator.googlecode.com/),<br></br>
 * a tool written by [Olivier Chafik](http://ochafik.free.fr/) that [uses a few opensource projects.](http://code.google.com/p/jnaerator/wiki/CreditsAndLicense).<br></br>
 * For help, please visit [NativeLibs4Java](http://nativelibs4java.googlecode.com/), [Rococoa](http://rococoa.dev.java.net/), or [JNA](http://jna.dev.java.net/).
 */
abstract class NSAppleEventDescriptor : NSObject() {
	interface _Class : ObjCClass {
		/**
		 * Create an autoreleased NSAppleEventDescriptor whose AEDesc type is typeNull.<br></br>
		 * Original signature : `+(NSAppleEventDescriptor*)nullDescriptor`<br></br>
		 * *native declaration : line 18*
		 */
		open fun nullDescriptor(): NSAppleEventDescriptor?
		/**
		 * *native declaration : line 22*<br></br>
		 * Conversion Error : /// Original signature : `+(NSAppleEventDescriptor*)descriptorWithDescriptorType:() bytes:(const void*) length:(NSUInteger)`<br></br>
		 * + (NSAppleEventDescriptor*)descriptorWithDescriptorType:(null)descriptorType bytes:(const void*)bytes length:(NSUInteger)byteCount; (Argument descriptorType cannot be converted)
		 */
		/**
		 * *native declaration : line 24*<br></br>
		 * Conversion Error : /// Original signature : `+(NSAppleEventDescriptor*)descriptorWithDescriptorType:() data:(NSData*)`<br></br>
		 * + (NSAppleEventDescriptor*)descriptorWithDescriptorType:(null)descriptorType data:(NSData*)data; (Argument descriptorType cannot be converted)
		 */
		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithBoolean:(Boolean)`<br></br>
		 * *native declaration : line 28*
		 */
		open fun descriptorWithBoolean(boolean_: Boolean): NSAppleEventDescriptor?
		/**
		 * *native declaration : line 29*<br></br>
		 * Conversion Error : /// Original signature : `+(NSAppleEventDescriptor*)descriptorWithEnumCode:()`<br></br>
		 * + (NSAppleEventDescriptor*)descriptorWithEnumCode:(null)enumerator; (Argument enumerator cannot be converted)
		 */
		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithInt32:(SInt32)`<br></br>
		 * *native declaration : line 30*
		 */
		open fun descriptorWithInt32(signedInt: Int): NSAppleEventDescriptor?
		/**
		 * *native declaration : line 31*<br></br>
		 * Conversion Error : /// Original signature : `+(NSAppleEventDescriptor*)descriptorWithTypeCode:()`<br></br>
		 * + (NSAppleEventDescriptor*)descriptorWithTypeCode:(null)typeCode; (Argument typeCode cannot be converted)
		 */
		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithString:(NSString*)`<br></br>
		 * *native declaration : line 36*
		 */
		open fun descriptorWithString(string: String?): NSAppleEventDescriptor?
		/**
		 * *native declaration : line 40*<br></br>
		 * Conversion Error : / **<br></br>
		 * * Create and return an autoreleased event, list, or record NSAppleEventDescriptor, respectively.<br></br>
		 * * Original signature : `+(NSAppleEventDescriptor*)appleEventWithEventClass:() eventID:() targetDescriptor:(NSAppleEventDescriptor*) returnID:() transactionID:()`<br></br>
		 * * /<br></br>
		 * + (NSAppleEventDescriptor*)appleEventWithEventClass:(null)eventClass eventID:(null)eventID targetDescriptor:(NSAppleEventDescriptor*)targetDescriptor returnID:(null)returnID transactionID:(null)transactionID; (Argument eventClass cannot be converted)
		 */
		/**
		 * Original signature : `+(NSAppleEventDescriptor*)listDescriptor`<br></br>
		 * *native declaration : line 41*
		 */
		open fun listDescriptor(): NSAppleEventDescriptor?

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)recordDescriptor`<br></br>
		 * *native declaration : line 42*
		 */
		open fun recordDescriptor(): NSAppleEventDescriptor?

		open fun alloc(): NSAppleEventDescriptor
	}

	/**
	 * Original signature : `-(id)initWithAEDescNoCopy:(const AEDesc*)`<br></br>
	 * *native declaration : line 46*
	 */
	abstract fun initWithAEDescNoCopy(aeDesc: com.sun.jna.Pointer?): NSAppleEventDescriptor?

	/**
	 * *native declaration : line 50*<br></br>
	 * Conversion Error : / **<br></br>
	 * * Other initializers.<br></br>
	 * * Original signature : `-(id)initWithDescriptorType:() bytes:(const void*) length:(NSUInteger)`<br></br>
	 * * /<br></br>
	 * - (id)initWithDescriptorType:(null)descriptorType bytes:(const void*)bytes length:(NSUInteger)byteCount; (Argument descriptorType cannot be converted)
	 */
	/**
	 * *native declaration : line 51*<br></br>
	 * Conversion Error : /// Original signature : `-(id)initWithDescriptorType:() data:(NSData*)`<br></br>
	 * - (id)initWithDescriptorType:(null)descriptorType data:(NSData*)data; (Argument descriptorType cannot be converted)
	 */
	/**
	 * *native declaration : line 52*<br></br>
	 * Conversion Error : /// Original signature : `-(id)initWithEventClass:() eventID:() targetDescriptor:(NSAppleEventDescriptor*) returnID:() transactionID:()`<br></br>
	 * - (id)initWithEventClass:(null)eventClass eventID:(null)eventID targetDescriptor:(NSAppleEventDescriptor*)targetDescriptor returnID:(null)returnID transactionID:(null)transactionID; (Argument eventClass cannot be converted)
	 */
	/**
	 * Original signature : `-(id)initListDescriptor`<br></br>
	 * *native declaration : line 53*
	 */
	abstract fun initListDescriptor(): NSAppleEventDescriptor?

	/**
	 * Original signature : `-(id)initRecordDescriptor`<br></br>
	 * *native declaration : line 54*
	 */
	abstract fun initRecordDescriptor(): NSAppleEventDescriptor?

	/**
	 * Original signature : `-(const AEDesc*)aeDesc`<br></br>
	 * *native declaration : line 58*
	 */
	abstract fun aeDesc(): com.sun.jna.Pointer?

	/**
	 * Get the four-character type code or the data from a fully-initialized descriptor.<br></br>
	 * Original signature : `-(id)descriptorType`<br></br>
	 * *native declaration : line 62*
	 */
	abstract fun descriptorType(): NSObject?

	/**
	 * Original signature : `-(NSData*)data`<br></br>
	 * *native declaration : line 63*
	 */
	abstract fun data(): com.sun.jna.Pointer?

	/**
	 * Original signature : `-(Boolean)booleanValue`<br></br>
	 * *native declaration : line 67*
	 */
	abstract fun booleanValue(): Boolean

	/**
	 * Original signature : `-(id)enumCodeValue`<br></br>
	 * *native declaration : line 68*
	 */
	abstract fun enumCodeValue(): NSObject?

	/**
	 * Original signature : `-(SInt32)int32Value`<br></br>
	 * *native declaration : line 69*
	 */
	abstract fun int32Value(): Int

	/**
	 * Original signature : `-(id)typeCodeValue`<br></br>
	 * *native declaration : line 70*
	 */
	abstract fun typeCodeValue(): NSObject?

	/**
	 * Original signature : `-(NSString*)stringValue`<br></br>
	 * *native declaration : line 75*
	 */
	abstract fun stringValue(): String?

	/**
	 * Accessors for an event descriptor.<br></br>
	 * Original signature : `-(id)eventClass`<br></br>
	 * *native declaration : line 79*
	 */
	abstract fun eventClass(): NSObject?

	/**
	 * Original signature : `-(id)eventID`<br></br>
	 * *native declaration : line 80*
	 */
	abstract fun eventID(): NSObject?

	/**
	 * Original signature : `-(id)returnID`<br></br>
	 * *native declaration : line 81*
	 */
	abstract fun returnID(): NSObject?

	/**
	 * Original signature : `-(id)transactionID`<br></br>
	 * *native declaration : line 82*
	 */
	abstract fun transactionID(): NSObject?
	/**
	 * *native declaration : line 85*<br></br>
	 * Conversion Error : / **<br></br>
	 * * Set, retrieve, or remove parameter descriptors inside an event descriptor.<br></br>
	 * * Original signature : `-(void)setParamDescriptor:(NSAppleEventDescriptor*) forKeyword:()`<br></br>
	 * * /<br></br>
	 * - (void)setParamDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * *native declaration : line 86*<br></br>
	 * Conversion Error : /// Original signature : `-(NSAppleEventDescriptor*)paramDescriptorForKeyword:()`<br></br>
	 * - (NSAppleEventDescriptor*)paramDescriptorForKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	abstract fun paramDescriptorForKeyword(keyword: Int): NSAppleEventDescriptor?
	/**
	 * *native declaration : line 87*<br></br>
	 * Conversion Error : /// Original signature : `-(void)removeParamDescriptorWithKeyword:()`<br></br>
	 * - (void)removeParamDescriptorWithKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * *native declaration : line 90*<br></br>
	 * Conversion Error : / **<br></br>
	 * * Set or retrieve attribute descriptors inside an event descriptor.<br></br>
	 * * Original signature : `-(void)setAttributeDescriptor:(NSAppleEventDescriptor*) forKeyword:()`<br></br>
	 * * /<br></br>
	 * - (void)setAttributeDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * *native declaration : line 91*<br></br>
	 * Conversion Error : /// Original signature : `-(NSAppleEventDescriptor*)attributeDescriptorForKeyword:()`<br></br>
	 * - (NSAppleEventDescriptor*)attributeDescriptorForKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * Return the number of items inside a list or record descriptor.<br></br>
	 * Original signature : `-(NSInteger)numberOfItems`<br></br>
	 * *native declaration : line 94*
	 */
	abstract fun numberOfItems(): NSInteger?

	/**
	 * Set, retrieve, or remove indexed descriptors inside a list or record descriptor.<br></br>
	 * Original signature : `-(void)insertDescriptor:(NSAppleEventDescriptor*) atIndex:(NSInteger)`<br></br>
	 * *native declaration : line 97*
	 */
	abstract fun insertDescriptor_atIndex(descriptor: NSAppleEventDescriptor?, index: NSInteger?)

	/**
	 * Original signature : `-(NSAppleEventDescriptor*)descriptorAtIndex:(NSInteger)`<br></br>
	 * *native declaration : line 98*
	 */
	abstract fun descriptorAtIndex(index: NSInteger?): NSAppleEventDescriptor?

	/**
	 * Original signature : `-(void)removeDescriptorAtIndex:(NSInteger)`<br></br>
	 * *native declaration : line 100*
	 */
	abstract fun removeDescriptorAtIndex(index: NSInteger?)
	/**
	 * *native declaration : line 106*<br></br>
	 * Conversion Error : / **<br></br>
	 * * Set, retrieve, or remove keyed descriptors inside a record descriptor.<br></br>
	 * * Original signature : `-(void)setDescriptor:(NSAppleEventDescriptor*) forKeyword:()`<br></br>
	 * * /<br></br>
	 * - (void)setDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * *native declaration : line 107*<br></br>
	 * Conversion Error : /// Original signature : `-(NSAppleEventDescriptor*)descriptorForKeyword:()`<br></br>
	 * - (NSAppleEventDescriptor*)descriptorForKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * *native declaration : line 108*<br></br>
	 * Conversion Error : /// Original signature : `-(void)removeDescriptorWithKeyword:()`<br></br>
	 * - (void)removeDescriptorWithKeyword:(null)keyword; (Argument keyword cannot be converted)
	 */
	/**
	 * Return the keyword associated with an indexed descriptor inside a record descriptor.<br></br>
	 * Original signature : `-(id)keywordForDescriptorAtIndex:(NSInteger)`<br></br>
	 * *native declaration : line 111*
	 */
	abstract fun keywordForDescriptorAtIndex(index: NSInteger?): NSObject?

	companion object {
		private val CLASS: _Class = Rococoa.createClass("NSAppleEventDescriptor", _Class::class.java)

		/**
		 * Create an autoreleased NSAppleEventDescriptor whose AEDesc type is typeNull.<br></br>
		 * Original signature : `+(NSAppleEventDescriptor*)nullDescriptor`<br></br>
		 * *native declaration : line 18*
		 */
		fun nullDescriptor(): NSAppleEventDescriptor? {
			return CLASS.nullDescriptor()
		}

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithBoolean:(Boolean)`<br></br>
		 * *native declaration : line 28*
		 */
		fun descriptorWithBoolean(boolean_: Boolean): NSAppleEventDescriptor? {
			return CLASS.descriptorWithBoolean(boolean_)
		}

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithInt32:(SInt32)`<br></br>
		 * *native declaration : line 30*
		 */
		fun descriptorWithInt32(signedInt: Int): NSAppleEventDescriptor? {
			return CLASS.descriptorWithInt32(signedInt)
		}

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)descriptorWithString:(NSString*)`<br></br>
		 * *native declaration : line 36*
		 */
		fun descriptorWithString(string: String?): NSAppleEventDescriptor? {
			return CLASS.descriptorWithString(string)
		}

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)listDescriptor`<br></br>
		 * *native declaration : line 41*
		 */
		fun listDescriptor(): NSAppleEventDescriptor? {
			return CLASS.listDescriptor()
		}

		/**
		 * Original signature : `+(NSAppleEventDescriptor*)recordDescriptor`<br></br>
		 * *native declaration : line 42*
		 */
		fun recordDescriptor(): NSAppleEventDescriptor? {
			return CLASS.recordDescriptor()
		}

		/**
		 * Factory method<br></br>
		 *
		 * @see .initWithAEDescNoCopy
		 */
		fun createWithAEDescNoCopy(aeDesc: com.sun.jna.Pointer?): NSAppleEventDescriptor? {
			return CLASS.alloc().initWithAEDescNoCopy(aeDesc)
		}

		/**
		 * Factory method<br></br>
		 *
		 * @see .initListDescriptor
		 */
		fun createListDescriptor(): NSAppleEventDescriptor? {
			return CLASS.alloc().initListDescriptor()
		}

		/**
		 * Factory method<br></br>
		 *
		 * @see .initRecordDescriptor
		 */
		fun createRecordDescriptor(): NSAppleEventDescriptor? {
			return CLASS.alloc().initRecordDescriptor()
		}
	}
}
