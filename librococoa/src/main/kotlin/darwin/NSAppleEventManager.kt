package darwin 

import org.rococoa.ID
import org.rococoa.ObjCClass
import org.rococoa.Rococoa
import org.rococoa.Selector

/**
 * This file was autogenerated by [JNAerator](http://jnaerator.googlecode.com/),<br></br>
 * a tool written by [Olivier Chafik](http://ochafik.free.fr/) that [uses a few opensource projects.](http://code.google.com/p/jnaerator/wiki/CreditsAndLicense).<br></br>
 * For help, please visit [NativeLibs4Java](http://nativelibs4java.googlecode.com/), [Rococoa](http://rococoa.dev.java.net/), or [JNA](http://jna.dev.java.net/).
 */
abstract class NSAppleEventManager : NSObject() {
	interface _Class : ObjCClass {
		/**
		 * Get the pointer to the program's single NSAppleEventManager.<br></br>
		 * Original signature : `+(NSAppleEventManager*)sharedAppleEventManager`<br></br>
		 * *native declaration : line 30*
		 */
		open fun sharedAppleEventManager(): NSAppleEventManager?
	}

	/**
	 * *native declaration : line 35*<br></br>
	 * Conversion Error : / **<br></br>
	 * * When it is invoked, the value of the first parameter will be the event to be handled.  The value of the second parameter will be the reply event to fill in.  A reply event object will always be passed in (replyEvent will never be nil), but it should not be touched if the event sender has not requested a reply, which is indicated by [replyEvent descriptorType]==typeNull.<br></br>
	 * * Original signature : `-(void)setEventHandler:(id) andSelector:(SEL) forEventClass:() andEventID:()`<br></br>
	 * * /<br></br>
	 */
	abstract fun setEventHandler_andSelector_forEventClass_andEventID(
		handler: ID?,
		selector: Selector?,
		eventClass: Int,
		eventID: Int
	)
	/**
	 * *native declaration : line 36*<br></br>
	 * Conversion Error : /// Original signature : `-(void)removeEventHandlerForEventClass:() andEventID:()`<br></br>
	 * - (void)removeEventHandlerForEventClass:(null)eventClass andEventID:(null)eventID; (Argument eventClass cannot be converted)
	 */
	/**
	 * *native declaration : line 40*<br></br>
	 * Conversion Error : / **<br></br>
	 * * This method is primarily meant for Cocoa's internal use.  It does not send events to other applications!<br></br>
	 * * Original signature : `-(id)dispatchRawAppleEvent:(const AppleEvent*) withRawReply:(AppleEvent*) handlerRefCon:()`<br></br>
	 * * /<br></br>
	 * - dispatchRawAppleEvent:(const AppleEvent*)theAppleEvent withRawReply:(AppleEvent*)theReply handlerRefCon:(null)handlerRefCon; (Argument handlerRefCon cannot be converted)
	 */
	/**
	 * If an Apple event is being handled on the current thread (i.e., a handler that was registered with -setEventHandler:andSelector:forEventClass:andEventID: is being messaged at this instant or -setCurrentAppleEventAndReplyEventWithSuspensionID: has just been invoked), return the descriptor for the event.  Return nil otherwise.  The effects of mutating or retaining the returned descriptor are undefined, though it may be copied.<br></br>
	 * Original signature : `-(NSAppleEventDescriptor*)currentAppleEvent`<br></br>
	 * *native declaration : line 45*
	 */
	abstract fun currentAppleEvent(): NSAppleEventDescriptor?

	/**
	 * If an Apple event is being handled on the current thread (i.e., -currentAppleEvent would not return nil), return the corresponding reply event descriptor.  Return nil otherwise.  This descriptor, including any mutatations, will be returned to the sender of the current event when all handling of the event has been completed, if the sender has requested a reply.  The effects of retaining the descriptor are undefined; it may be copied, but mutations of the copy will not be returned to the sender of the current event.<br></br>
	 * Original signature : `-(NSAppleEventDescriptor*)currentReplyAppleEvent`<br></br>
	 * *native declaration : line 48*
	 */
	abstract fun currentReplyAppleEvent(): NSAppleEventDescriptor?

	/**
	 * If an Apple event is being handled on the current thread (i.e., -currentAppleEvent would not return nil), suspend the handling of the event, returning an ID that must be used to resume the handling of the event.  Return zero otherwise.  The suspended event will no longer be the current event after this method has returned.<br></br>
	 * Original signature : `-(NSAppleEventManagerSuspensionID)suspendCurrentAppleEvent`<br></br>
	 * *native declaration : line 51*
	 */
	abstract fun suspendCurrentAppleEvent(): com.sun.jna.Pointer?

	/**
	 * Given a nonzero suspension ID returned by an invocation of -suspendCurrentAppleEvent, return the descriptor for the event whose handling was suspended.  The effects of mutating or retaining the returned descriptor are undefined, though it may be copied.  This method may be invoked in any thread, not just the one in which the corresponding invocation of -suspendCurrentAppleEvent occurred.<br></br>
	 * Original signature : `-(NSAppleEventDescriptor*)appleEventForSuspensionID:(NSAppleEventManagerSuspensionID)`<br></br>
	 * *native declaration : line 54*
	 */
	abstract fun appleEventForSuspensionID(suspensionID: com.sun.jna.Pointer?): NSAppleEventDescriptor?

	/**
	 * Given a nonzero suspension ID returned by an invocation of -suspendCurrentAppleEvent, return the corresponding reply event descriptor.  This descriptor, including any mutatations, will be returned to the sender of the suspended event when handling of the event is resumed, if the sender has requested a reply.  The effects of retaining the descriptor are undefined; it may be copied, but mutations of the copy will not be returned to the sender of the suspended event.  This method may be invoked in any thread, not just the one in which the corresponding invocation of -suspendCurrentAppleEvent occurred.<br></br>
	 * Original signature : `-(NSAppleEventDescriptor*)replyAppleEventForSuspensionID:(NSAppleEventManagerSuspensionID)`<br></br>
	 * *native declaration : line 57*
	 */
	abstract fun replyAppleEventForSuspensionID(suspensionID: com.sun.jna.Pointer?): NSAppleEventDescriptor?

	/**
	 * Given a nonzero suspension ID returned by an invocation of -suspendCurrentAppleEvent, set the values that will be returned by subsequent invocations of -currentAppleEvent and -currentReplyAppleEvent to be the event whose handling was suspended and its corresponding reply event, respectively.  Redundant invocations of this method will be ignored.<br></br>
	 * Original signature : `-(void)setCurrentAppleEventAndReplyEventWithSuspensionID:(NSAppleEventManagerSuspensionID)`<br></br>
	 * *native declaration : line 60*
	 */
	abstract fun setCurrentAppleEventAndReplyEventWithSuspensionID(suspensionID: com.sun.jna.Pointer?)

	/**
	 * Given a nonzero suspension ID returned by an invocation of -suspendCurrentAppleEvent, signal that handling of the suspended event may now continue.  This may result in the immediate sending of the reply event to the sender of the suspended event, if the sender has requested a reply.  If the suspension ID has been used in a previous invocation of -setCurrentAppleEventAndReplyEventWithSuspensionID: the effects of that invocation will be completely undone.  Subsequent invocations of other NSAppleEventManager methods using the same suspension ID are invalid.  This method may be invoked in any thread, not just the one in which the corresponding invocation of -suspendCurrentAppleEvent occurred.<br></br>
	 * Original signature : `-(void)resumeWithSuspensionID:(NSAppleEventManagerSuspensionID)`<br></br>
	 * *native declaration : line 63*
	 */
	abstract fun resumeWithSuspensionID(suspensionID: com.sun.jna.Pointer?)

	companion object {
		private val CLASS: _Class = Rococoa.createClass("NSAppleEventManager", _Class::class.java)

		/**
		 * Get the pointer to the program's single NSAppleEventManager.<br></br>
		 * Original signature : `+(NSAppleEventManager*)sharedAppleEventManager`<br></br>
		 * *native declaration : line 30*
		 */
		fun sharedAppleEventManager(): NSAppleEventManager? {
			return CLASS.sharedAppleEventManager()
		}
	}
}
